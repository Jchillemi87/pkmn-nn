module.exports = function(e) { var a = {};

  function t(r) { if (a[r]) return a[r].exports; var i = a[r] = { i: r, l: !1, exports: {} }; return e[r].call(i.exports, i, i.exports, t), i.l = !0, i.exports } return t.m = e, t.c = a, t.d = function(e, a, r) { t.o(e, a) || Object.defineProperty(e, a, { enumerable: !0, get: r }) }, t.r = function(e) { "undefined" != typeof Symbol && Symbol.toStringTag && Object.defineProperty(e, Symbol.toStringTag, { value: "Module" }), Object.defineProperty(e, "__esModule", { value: !0 }) }, t.t = function(e, a) { if (1 & a && (e = t(e)), 8 & a) return e; if (4 & a && "object" == typeof e && e && e.__esModule) return e; var r = Object.create(null); if (t.r(r), Object.defineProperty(r, "default", { enumerable: !0, value: e }), 2 & a && "string" != typeof e)
      for (var i in e) t.d(r, i, function(a) { return e[a] }.bind(null, i)); return r }, t.n = function(e) { var a = e && e.__esModule ? function() { return e.default } : function() { return e }; return t.d(a, "a", a), a }, t.o = function(e, a) { return Object.prototype.hasOwnProperty.call(e, a) }, t.p = "", t(t.s = 238) }([function(e, a) { var t = Array.isArray;
  e.exports = t }, function(e, a, t) {
  (function(e) { var t, r = function(e) { "use strict"; var a = 1e7,
        t = 7,
        i = 9007199254740992,
        n = d(i),
        o = Math.log(i);

      function s(e, a) { return void 0 === e ? s[0] : void 0 !== a ? 10 == +a ? Z(e) : N(e, a) : Z(e) }

      function c(e, a) { this.value = e, this.sign = a, this.isSmall = !1 }

      function l(e) { this.value = e, this.sign = e < 0, this.isSmall = !0 }

      function u(e) { return -i < e && e < i }

      function d(e) { return e < 1e7 ? [e] : e < 1e14 ? [e % 1e7, Math.floor(e / 1e7)] : [e % 1e7, Math.floor(e / 1e7) % 1e7, Math.floor(e / 1e14)] }

      function b(e) { h(e); var t = e.length; if (t < 4 && A(e, n) < 0) switch (t) {
          case 0:
            return 0;
          case 1:
            return e[0];
          case 2:
            return e[0] + e[1] * a;
          default:
            return e[0] + (e[1] + e[2] * a) * a }
        return e }

      function h(e) { for (var a = e.length; 0 === e[--a];);
        e.length = a + 1 }

      function p(e) { for (var a = new Array(e), t = -1; ++t < e;) a[t] = 0; return a }

      function m(e) { return e > 0 ? Math.floor(e) : Math.ceil(e) }

      function g(e, t) { var r, i, n = e.length,
          o = t.length,
          s = new Array(n),
          c = 0,
          l = a; for (i = 0; i < o; i++) c = (r = e[i] + t[i] + c) >= l ? 1 : 0, s[i] = r - c * l; for (; i < n;) c = (r = e[i] + c) === l ? 1 : 0, s[i++] = r - c * l; return c > 0 && s.push(c), s }

      function f(e, a) { return e.length >= a.length ? g(e, a) : g(a, e) }

      function y(e, t) { var r, i, n = e.length,
          o = new Array(n),
          s = a; for (i = 0; i < n; i++) r = e[i] - s + t, t = Math.floor(r / s), o[i] = r - t * s, t += 1; for (; t > 0;) o[i++] = t % s, t = Math.floor(t / s); return o }

      function k(e, t) { var r, i, n = e.length,
          o = t.length,
          s = new Array(n),
          c = 0,
          l = a; for (r = 0; r < o; r++)(i = e[r] - c - t[r]) < 0 ? (i += l, c = 1) : c = 0, s[r] = i; for (r = o; r < n; r++) { if (!((i = e[r] - c) < 0)) { s[r++] = i; break } i += l, s[r] = i } for (; r < n; r++) s[r] = e[r]; return h(s), s }

      function v(e, t, r) { var i, n, o = e.length,
          s = new Array(o),
          u = -t,
          d = a; for (i = 0; i < o; i++) n = e[i] + u, u = Math.floor(n / d), n %= d, s[i] = n < 0 ? n + d : n; return "number" == typeof(s = b(s)) ? (r && (s = -s), new l(s)) : new c(s, r) }

      function w(e, t) { var r, i, n, o, s = e.length,
          c = t.length,
          l = p(s + c),
          u = a; for (n = 0; n < s; ++n) { o = e[n]; for (var d = 0; d < c; ++d) r = o * t[d] + l[n + d], i = Math.floor(r / u), l[n + d] = r - i * u, l[n + d + 1] += i } return h(l), l }

      function S(e, t) { var r, i, n = e.length,
          o = new Array(n),
          s = a,
          c = 0; for (i = 0; i < n; i++) r = e[i] * t + c, c = Math.floor(r / s), o[i] = r - c * s; for (; c > 0;) o[i++] = c % s, c = Math.floor(c / s); return o }

      function M(e, a) { for (var t = []; a-- > 0;) t.push(0); return t.concat(e) }

      function B(e, t, r) { return new c(e < a ? S(t, e) : w(t, d(e)), r) }

      function x(e) { var t, r, i, n, o = e.length,
          s = p(o + o),
          c = a; for (i = 0; i < o; i++) { r = 0 - (n = e[i]) * n; for (var l = i; l < o; l++) t = n * e[l] * 2 + s[i + l] + r, r = Math.floor(t / c), s[i + l] = t - r * c;
          s[i + o] = r } return h(s), s }

      function D(e, t) { var r, i, n, o, s = e.length,
          c = p(s),
          l = a; for (n = 0, r = s - 1; r >= 0; --r) n = (o = n * l + e[r]) - (i = m(o / t)) * t, c[r] = 0 | i; return [c, 0 | n] }

      function P(e, t) { var r, i, n = Z(t),
          o = e.value,
          u = n.value; if (0 === u) throw new Error("Cannot divide by zero"); if (e.isSmall) return n.isSmall ? [new l(m(o / u)), new l(o % u)] : [s[0], e]; if (n.isSmall) { if (1 === u) return [e, s[0]]; if (-1 == u) return [e.negate(), s[0]]; var g = Math.abs(u); if (g < a) { i = b((r = D(o, g))[0]); var f = r[1]; return e.sign && (f = -f), "number" == typeof i ? (e.sign !== n.sign && (i = -i), [new l(i), new l(f)]) : [new c(i, e.sign !== n.sign), new l(f)] } u = d(g) } var y = A(o, u); if (-1 === y) return [s[0], e]; if (0 === y) return [s[e.sign === n.sign ? 1 : -1], s[0]];
        i = (r = o.length + u.length <= 200 ? function(e, t) { var r, i, n, o, s, c, l, u = e.length,
            d = t.length,
            h = a,
            m = p(t.length),
            g = t[d - 1],
            f = Math.ceil(h / (2 * g)),
            y = S(e, f),
            k = S(t, f); for (y.length <= u && y.push(0), k.push(0), g = k[d - 1], i = u - d; i >= 0; i--) { for (r = h - 1, y[i + d] !== g && (r = Math.floor((y[i + d] * h + y[i + d - 1]) / g)), n = 0, o = 0, c = k.length, s = 0; s < c; s++) n += r * k[s], l = Math.floor(n / h), o += y[i + s] - (n - l * h), n = l, o < 0 ? (y[i + s] = o + h, o = -1) : (y[i + s] = o, o = 0); for (; 0 !== o;) { for (r -= 1, n = 0, s = 0; s < c; s++)(n += y[i + s] - h + k[s]) < 0 ? (y[i + s] = n + h, n = 0) : (y[i + s] = n, n = 1);
              o += n } m[i] = r } return y = D(y, f)[0], [b(m), b(y)] }(o, u) : function(e, t) { for (var r, i, n, o, s, c = e.length, l = t.length, u = [], d = [], p = a; c;)
            if (d.unshift(e[--c]), h(d), A(d, t) < 0) u.push(0);
            else { n = d[(i = d.length) - 1] * p + d[i - 2], o = t[l - 1] * p + t[l - 2], i > l && (n = (n + 1) * p), r = Math.ceil(n / o);
              do { if (A(s = S(t, r), d) <= 0) break;
                r-- } while (r);
              u.push(r), d = k(d, s) } return u.reverse(), [b(u), b(d)] }(o, u))[0]; var v = e.sign !== n.sign,
          w = r[1],
          M = e.sign; return "number" == typeof i ? (v && (i = -i), i = new l(i)) : i = new c(i, v), "number" == typeof w ? (M && (w = -w), w = new l(w)) : w = new c(w, M), [i, w] }

      function A(e, a) { if (e.length !== a.length) return e.length > a.length ? 1 : -1; for (var t = e.length - 1; t >= 0; t--)
          if (e[t] !== a[t]) return e[t] > a[t] ? 1 : -1; return 0 }

      function T(e) { var a = e.abs(); return !a.isUnit() && (!!(a.equals(2) || a.equals(3) || a.equals(5)) || !(a.isEven() || a.isDivisibleBy(3) || a.isDivisibleBy(5)) && (!!a.lesser(49) || void 0)) }

      function E(e, a) { for (var t, i, n, o = e.prev(), c = o, l = 0; c.isEven();) c = c.divide(2), l++;
        e: for (i = 0; i < a.length; i++)
          if (!e.lesser(a[i]) && !(n = r(a[i]).modPow(c, e)).equals(s[1]) && !n.equals(o)) { for (t = l - 1; 0 != t; t--) { if ((n = n.square().mod(e)).isUnit()) return !1; if (n.equals(o)) continue e } return !1 } return !0 } c.prototype = Object.create(s.prototype), l.prototype = Object.create(s.prototype), c.prototype.add = function(e) { var a = Z(e); if (this.sign !== a.sign) return this.subtract(a.negate()); var t = this.value,
          r = a.value; return a.isSmall ? new c(y(t, Math.abs(r)), this.sign) : new c(f(t, r), this.sign) }, c.prototype.plus = c.prototype.add, l.prototype.add = function(e) { var a = Z(e),
          t = this.value; if (t < 0 !== a.sign) return this.subtract(a.negate()); var r = a.value; if (a.isSmall) { if (u(t + r)) return new l(t + r);
          r = d(Math.abs(r)) } return new c(y(r, Math.abs(t)), t < 0) }, l.prototype.plus = l.prototype.add, c.prototype.subtract = function(e) { var a = Z(e); if (this.sign !== a.sign) return this.add(a.negate()); var t = this.value,
          r = a.value; return a.isSmall ? v(t, Math.abs(r), this.sign) : function(e, a, t) { var r; return A(e, a) >= 0 ? r = k(e, a) : (r = k(a, e), t = !t), "number" == typeof(r = b(r)) ? (t && (r = -r), new l(r)) : new c(r, t) }(t, r, this.sign) }, c.prototype.minus = c.prototype.subtract, l.prototype.subtract = function(e) { var a = Z(e),
          t = this.value; if (t < 0 !== a.sign) return this.add(a.negate()); var r = a.value; return a.isSmall ? new l(t - r) : v(r, Math.abs(t), t >= 0) }, l.prototype.minus = l.prototype.subtract, c.prototype.negate = function() { return new c(this.value, !this.sign) }, l.prototype.negate = function() { var e = this.sign,
          a = new l(-this.value); return a.sign = !e, a }, c.prototype.abs = function() { return new c(this.value, !1) }, l.prototype.abs = function() { return new l(Math.abs(this.value)) }, c.prototype.multiply = function(e) { var t, r, i, n = Z(e),
          o = this.value,
          l = n.value,
          u = this.sign !== n.sign; if (n.isSmall) { if (0 === l) return s[0]; if (1 === l) return this; if (-1 === l) return this.negate(); if ((t = Math.abs(l)) < a) return new c(S(o, t), u);
          l = d(t) } return r = o.length, i = l.length, new c(-.012 * r - .012 * i + 15e-6 * r * i > 0 ? function e(a, t) { var r = Math.max(a.length, t.length); if (r <= 30) return w(a, t);
          r = Math.ceil(r / 2); var i = a.slice(r),
            n = a.slice(0, r),
            o = t.slice(r),
            s = t.slice(0, r),
            c = e(n, s),
            l = e(i, o),
            u = e(f(n, i), f(s, o)),
            d = f(f(c, M(k(k(u, c), l), r)), M(l, 2 * r)); return h(d), d }(o, l) : w(o, l), u) }, c.prototype.times = c.prototype.multiply, l.prototype._multiplyBySmall = function(e) { return u(e.value * this.value) ? new l(e.value * this.value) : B(Math.abs(e.value), d(Math.abs(this.value)), this.sign !== e.sign) }, c.prototype._multiplyBySmall = function(e) { return 0 === e.value ? s[0] : 1 === e.value ? this : -1 === e.value ? this.negate() : B(Math.abs(e.value), this.value, this.sign !== e.sign) }, l.prototype.multiply = function(e) { return Z(e)._multiplyBySmall(this) }, l.prototype.times = l.prototype.multiply, c.prototype.square = function() { return new c(x(this.value), !1) }, l.prototype.square = function() { var e = this.value * this.value; return u(e) ? new l(e) : new c(x(d(Math.abs(this.value))), !1) }, c.prototype.divmod = function(e) { var a = P(this, e); return { quotient: a[0], remainder: a[1] } }, l.prototype.divmod = c.prototype.divmod, c.prototype.divide = function(e) { return P(this, e)[0] }, l.prototype.over = l.prototype.divide = c.prototype.over = c.prototype.divide, c.prototype.mod = function(e) { return P(this, e)[1] }, l.prototype.remainder = l.prototype.mod = c.prototype.remainder = c.prototype.mod, c.prototype.pow = function(e) { var a, t, r, i = Z(e),
          n = this.value,
          o = i.value; if (0 === o) return s[1]; if (0 === n) return s[0]; if (1 === n) return s[1]; if (-1 === n) return i.isEven() ? s[1] : s[-1]; if (i.sign) return s[0]; if (!i.isSmall) throw new Error("The exponent " + i.toString() + " is too large."); if (this.isSmall && u(a = Math.pow(n, o))) return new l(m(a)); for (t = this, r = s[1]; !0 & o && (r = r.times(t), --o), 0 !== o;) o /= 2, t = t.square(); return r }, l.prototype.pow = c.prototype.pow, c.prototype.modPow = function(e, a) { if (e = Z(e), (a = Z(a)).isZero()) throw new Error("Cannot take modPow with modulus 0"); for (var t = s[1], r = this.mod(a); e.isPositive();) { if (r.isZero()) return s[0];
          e.isOdd() && (t = t.multiply(r).mod(a)), e = e.divide(2), r = r.square().mod(a) } return t }, l.prototype.modPow = c.prototype.modPow, c.prototype.compareAbs = function(e) { var a = Z(e),
          t = this.value,
          r = a.value; return a.isSmall ? 1 : A(t, r) }, l.prototype.compareAbs = function(e) { var a = Z(e),
          t = Math.abs(this.value),
          r = a.value; return a.isSmall ? t === (r = Math.abs(r)) ? 0 : t > r ? 1 : -1 : -1 }, c.prototype.compare = function(e) { if (e === 1 / 0) return -1; if (e === -1 / 0) return 1; var a = Z(e),
          t = this.value,
          r = a.value; return this.sign !== a.sign ? a.sign ? 1 : -1 : a.isSmall ? this.sign ? -1 : 1 : A(t, r) * (this.sign ? -1 : 1) }, c.prototype.compareTo = c.prototype.compare, l.prototype.compare = function(e) { if (e === 1 / 0) return -1; if (e === -1 / 0) return 1; var a = Z(e),
          t = this.value,
          r = a.value; return a.isSmall ? t == r ? 0 : t > r ? 1 : -1 : t < 0 !== a.sign ? t < 0 ? -1 : 1 : t < 0 ? 1 : -1 }, l.prototype.compareTo = l.prototype.compare, c.prototype.equals = function(e) { return 0 === this.compare(e) }, l.prototype.eq = l.prototype.equals = c.prototype.eq = c.prototype.equals, c.prototype.notEquals = function(e) { return 0 !== this.compare(e) }, l.prototype.neq = l.prototype.notEquals = c.prototype.neq = c.prototype.notEquals, c.prototype.greater = function(e) { return this.compare(e) > 0 }, l.prototype.gt = l.prototype.greater = c.prototype.gt = c.prototype.greater, c.prototype.lesser = function(e) { return this.compare(e) < 0 }, l.prototype.lt = l.prototype.lesser = c.prototype.lt = c.prototype.lesser, c.prototype.greaterOrEquals = function(e) { return this.compare(e) >= 0 }, l.prototype.geq = l.prototype.greaterOrEquals = c.prototype.geq = c.prototype.greaterOrEquals, c.prototype.lesserOrEquals = function(e) { return this.compare(e) <= 0 }, l.prototype.leq = l.prototype.lesserOrEquals = c.prototype.leq = c.prototype.lesserOrEquals, c.prototype.isEven = function() { return 0 == (1 & this.value[0]) }, l.prototype.isEven = function() { return 0 == (1 & this.value) }, c.prototype.isOdd = function() { return 1 == (1 & this.value[0]) }, l.prototype.isOdd = function() { return 1 == (1 & this.value) }, c.prototype.isPositive = function() { return !this.sign }, l.prototype.isPositive = function() { return this.value > 0 }, c.prototype.isNegative = function() { return this.sign }, l.prototype.isNegative = function() { return this.value < 0 }, c.prototype.isUnit = function() { return !1 }, l.prototype.isUnit = function() { return 1 === Math.abs(this.value) }, c.prototype.isZero = function() { return !1 }, l.prototype.isZero = function() { return 0 === this.value }, c.prototype.isDivisibleBy = function(e) { var a = Z(e),
          t = a.value; return 0 !== t && (1 === t || (2 === t ? this.isEven() : this.mod(a).equals(s[0]))) }, l.prototype.isDivisibleBy = c.prototype.isDivisibleBy, c.prototype.isPrime = function(e) { var a = T(this); if (void 0 !== a) return a; var t = this.abs(),
          i = t.bitLength(); if (i <= 64) return E(t, [2, 325, 9375, 28178, 450775, 9780504, 1795265022]); for (var n = Math.log(2) * i, o = Math.ceil(!0 === e ? 2 * Math.pow(n, 2) : n), s = [], c = 0; c < o; c++) s.push(r(c + 2)); return E(t, s) }, l.prototype.isPrime = c.prototype.isPrime, c.prototype.isProbablePrime = function(e) { var a = T(this); if (void 0 !== a) return a; for (var t = this.abs(), i = void 0 === e ? 5 : e, n = [], o = 0; o < i; o++) n.push(r.randBetween(2, t.minus(2))); return E(t, n) }, l.prototype.isProbablePrime = c.prototype.isProbablePrime, c.prototype.modInv = function(e) { for (var a, t, i, n = r.zero, o = r.one, s = Z(e), c = this.abs(); !c.equals(r.zero);) a = s.divide(c), t = n, i = s, n = o, s = c, o = t.subtract(a.multiply(o)), c = i.subtract(a.multiply(c)); if (!s.equals(1)) throw new Error(this.toString() + " and " + e.toString() + " are not co-prime"); return -1 === n.compare(0) && (n = n.add(e)), this.isNegative() ? n.negate() : n }, l.prototype.modInv = c.prototype.modInv, c.prototype.next = function() { var e = this.value; return this.sign ? v(e, 1, this.sign) : new c(y(e, 1), this.sign) }, l.prototype.next = function() { var e = this.value; return e + 1 < i ? new l(e + 1) : new c(n, !1) }, c.prototype.prev = function() { var e = this.value; return this.sign ? new c(y(e, 1), !0) : v(e, 1, this.sign) }, l.prototype.prev = function() { var e = this.value; return e - 1 > -i ? new l(e - 1) : new c(n, !0) }; for (var R = [1]; 2 * R[R.length - 1] <= a;) R.push(2 * R[R.length - 1]); var C = R.length,
        z = R[C - 1];

      function F(e) { return ("number" == typeof e || "string" == typeof e) && +Math.abs(e) <= a || e instanceof c && e.value.length <= 1 }

      function H(e, a, t) { a = Z(a); for (var i = e.isNegative(), n = a.isNegative(), o = i ? e.not() : e, s = n ? a.not() : a, c = 0, l = 0, u = null, d = null, b = []; !o.isZero() || !s.isZero();) c = (u = P(o, z))[1].toJSNumber(), i && (c = z - 1 - c), l = (d = P(s, z))[1].toJSNumber(), n && (l = z - 1 - l), o = u[0], s = d[0], b.push(t(c, l)); for (var h = 0 !== t(i ? 1 : 0, n ? 1 : 0) ? r(-1) : r(0), p = b.length - 1; p >= 0; p -= 1) h = h.multiply(z).add(r(b[p])); return h } c.prototype.shiftLeft = function(e) { if (!F(e)) throw new Error(String(e) + " is too large for shifting."); if ((e = +e) < 0) return this.shiftRight(-e); var a = this; if (a.isZero()) return a; for (; e >= C;) a = a.multiply(z), e -= C - 1; return a.multiply(R[e]) }, l.prototype.shiftLeft = c.prototype.shiftLeft, c.prototype.shiftRight = function(e) { var a; if (!F(e)) throw new Error(String(e) + " is too large for shifting."); if ((e = +e) < 0) return this.shiftLeft(-e); for (var t = this; e >= C;) { if (t.isZero() || t.isNegative() && t.isUnit()) return t;
          t = (a = P(t, z))[1].isNegative() ? a[0].prev() : a[0], e -= C - 1 } return (a = P(t, R[e]))[1].isNegative() ? a[0].prev() : a[0] }, l.prototype.shiftRight = c.prototype.shiftRight, c.prototype.not = function() { return this.negate().prev() }, l.prototype.not = c.prototype.not, c.prototype.and = function(e) { return H(this, e, function(e, a) { return e & a }) }, l.prototype.and = c.prototype.and, c.prototype.or = function(e) { return H(this, e, function(e, a) { return e | a }) }, l.prototype.or = c.prototype.or, c.prototype.xor = function(e) { return H(this, e, function(e, a) { return e ^ a }) }, l.prototype.xor = c.prototype.xor; var O = 1 << 30,
        j = (a & -a) * (a & -a) | O;

      function G(e) { var t = e.value,
          r = "number" == typeof t ? t | O : t[0] + t[1] * a | j; return r & -r }

      function I(e, a) { return e = Z(e), a = Z(a), e.greater(a) ? e : a }

      function L(e, a) { return e = Z(e), a = Z(a), e.lesser(a) ? e : a }

      function _(e, a) { if (e = Z(e).abs(), a = Z(a).abs(), e.equals(a)) return e; if (e.isZero()) return a; if (a.isZero()) return e; for (var t, r, i = s[1]; e.isEven() && a.isEven();) t = Math.min(G(e), G(a)), e = e.divide(t), a = a.divide(t), i = i.multiply(t); for (; e.isEven();) e = e.divide(G(e));
        do { for (; a.isEven();) a = a.divide(G(a));
          e.greater(a) && (r = a, a = e, e = r), a = a.subtract(e) } while (!a.isZero()); return i.isUnit() ? e : e.multiply(i) } c.prototype.bitLength = function() { var e = this; return e.compareTo(r(0)) < 0 && (e = e.negate().subtract(r(1))), 0 === e.compareTo(r(0)) ? r(0) : r(function e(a, t) { if (t.compareTo(a) <= 0) { var i = e(a, t.square(t)),
              n = i.p,
              o = i.e,
              s = n.multiply(t); return s.compareTo(a) <= 0 ? { p: s, e: 2 * o + 1 } : { p: n, e: 2 * o } } return { p: r(1), e: 0 } }(e, r(2)).e).add(r(1)) }, l.prototype.bitLength = c.prototype.bitLength; var N = function(e, a) { for (var t = e.length, r = Math.abs(a), i = 0; i < t; i++) { if ("-" !== (u = e[i].toLowerCase()) && /[a-z0-9]/.test(u)) { if (/[0-9]/.test(u) && +u >= r) { if ("1" === u && 1 === r) continue; throw new Error(u + " is not a valid digit in base " + a + ".") } if (u.charCodeAt(0) - 87 >= r) throw new Error(u + " is not a valid digit in base " + a + ".") } } if (2 <= a && a <= 36 && t <= o / Math.log(a)) { var n = parseInt(e, a); if (isNaN(n)) throw new Error(u + " is not a valid digit in base " + a + "."); return new l(parseInt(e, a)) } a = Z(a); var s = [],
          c = "-" === e[0]; for (i = c ? 1 : 0; i < e.length; i++) { var u, d = (u = e[i].toLowerCase()).charCodeAt(0); if (48 <= d && d <= 57) s.push(Z(u));
          else if (97 <= d && d <= 122) s.push(Z(u.charCodeAt(0) - 87));
          else { if ("<" !== u) throw new Error(u + " is not a valid character"); var b = i;
            do { i++ } while (">" !== e[i]);
            s.push(Z(e.slice(b + 1, i))) } } return K(s, a, c) };

      function K(e, a, t) { var r, i = s[0],
          n = s[1]; for (r = e.length - 1; r >= 0; r--) i = i.add(e[r].times(n)), n = n.times(a); return t ? i.negate() : i }

      function W(e) { return e <= 35 ? "0123456789abcdefghijklmnopqrstuvwxyz".charAt(e) : "<" + e + ">" }

      function U(e, a) { if ((a = r(a)).isZero()) { if (e.isZero()) return { value: [0], isNegative: !1 }; throw new Error("Cannot convert nonzero numbers to base 0.") } if (a.equals(-1)) { if (e.isZero()) return { value: [0], isNegative: !1 }; if (e.isNegative()) return { value: [].concat.apply([], Array.apply(null, Array(-e)).map(Array.prototype.valueOf, [1, 0])), isNegative: !1 }; var t = Array.apply(null, Array(+e - 1)).map(Array.prototype.valueOf, [0, 1]); return t.unshift([1]), { value: [].concat.apply([], t), isNegative: !1 } } var i = !1; if (e.isNegative() && a.isPositive() && (i = !0, e = e.abs()), a.equals(1)) return e.isZero() ? { value: [0], isNegative: !1 } : { value: Array.apply(null, Array(+e)).map(Number.prototype.valueOf, 1), isNegative: i }; for (var n, o = [], s = e; s.isNegative() || s.compareAbs(a) >= 0;) { n = s.divmod(a), s = n.quotient; var c = n.remainder;
          c.isNegative() && (c = a.minus(c).abs(), s = s.next()), o.push(c.toJSNumber()) } return o.push(s.toJSNumber()), { value: o.reverse(), isNegative: i } }

      function V(e, a) { var t = U(e, a); return (t.isNegative ? "-" : "") + t.value.map(W).join("") }

      function q(e) { if (u(+e)) { var a = +e; if (a === m(a)) return new l(a); throw new Error("Invalid integer: " + e) } var r = "-" === e[0];
        r && (e = e.slice(1)); var i = e.split(/e/i); if (i.length > 2) throw new Error("Invalid integer: " + i.join("e")); if (2 === i.length) { var n = i[1]; if ("+" === n[0] && (n = n.slice(1)), (n = +n) !== m(n) || !u(n)) throw new Error("Invalid integer: " + n + " is not a valid exponent."); var o = i[0],
            s = o.indexOf("."); if (s >= 0 && (n -= o.length - s - 1, o = o.slice(0, s) + o.slice(s + 1)), n < 0) throw new Error("Cannot include negative exponent part for integers");
          e = o += new Array(n + 1).join("0") } if (!/^([0-9][0-9]*)$/.test(e)) throw new Error("Invalid integer: " + e); for (var d = [], b = e.length, p = t, g = b - p; b > 0;) d.push(+e.slice(g, b)), (g -= p) < 0 && (g = 0), b -= p; return h(d), new c(d, r) }

      function Z(e) { return "number" == typeof e ? function(e) { if (u(e)) { if (e !== m(e)) throw new Error(e + " is not an integer."); return new l(e) } return q(e.toString()) }(e) : "string" == typeof e ? q(e) : e } c.prototype.toArray = function(e) { return U(this, e) }, l.prototype.toArray = function(e) { return U(this, e) }, c.prototype.toString = function(e) { if (void 0 === e && (e = 10), 10 !== e) return V(this, e); for (var a, t = this.value, r = t.length, i = String(t[--r]); --r >= 0;) a = String(t[r]), i += "0000000".slice(a.length) + a; return (this.sign ? "-" : "") + i }, l.prototype.toString = function(e) { return void 0 === e && (e = 10), 10 != e ? V(this, e) : String(this.value) }, c.prototype.toJSON = l.prototype.toJSON = function() { return this.toString() }, c.prototype.valueOf = function() { return parseInt(this.toString(), 10) }, c.prototype.toJSNumber = c.prototype.valueOf, l.prototype.valueOf = function() { return this.value }, l.prototype.toJSNumber = l.prototype.valueOf; for (var Y = 0; Y < 1e3; Y++) s[Y] = new l(Y), Y > 0 && (s[-Y] = new l(-Y)); return s.one = s[1], s.zero = s[0], s.minusOne = s[-1], s.max = I, s.min = L, s.gcd = _, s.lcm = function(e, a) { return e = Z(e).abs(), a = Z(a).abs(), e.divide(_(e, a)).multiply(a) }, s.isInstance = function(e) { return e instanceof c || e instanceof l }, s.randBetween = function(e, t) { var r = L(e = Z(e), t = Z(t)),
          i = I(e, t).subtract(r).add(1); if (i.isSmall) return r.add(Math.floor(Math.random() * i)); for (var n = [], o = !0, s = i.value.length - 1; s >= 0; s--) { var u = o ? i.value[s] : a,
            d = m(Math.random() * u);
          n.unshift(d), d < u && (o = !1) } return n = b(n), r.add("number" == typeof n ? new l(n) : new c(n, !1)) }, s.fromArray = function(e, a, t) { return K(e.map(Z), Z(a || 10), t) }, s }();
    e.hasOwnProperty("exports") && (e.exports = r), void 0 === (t = function() { return r }.apply(a, [])) || (e.exports = t) }).call(this, t(47)(e)) }, function(e, a) { var t = e.exports = "undefined" != typeof window && window.Math == Math ? window : "undefined" != typeof self && self.Math == Math ? self : Function("return this")(); "number" == typeof __g && (__g = t) }, function(e, a, t) { var r = t(36)("wks"),
    i = t(16),
    n = t(2).Symbol,
    o = "function" == typeof n;
  (e.exports = function(e) { return r[e] || (r[e] = o && n[e] || (o ? n : i)("Symbol." + e)) }).store = r }, function(e, a, t) { var r = t(72),
    i = "object" == typeof self && self && self.Object === Object && self,
    n = r || i || Function("return this")();
  e.exports = n }, function(e, a, t) { var r = t(10),
    i = t(27);
  e.exports = t(12) ? function(e, a, t) { return r.f(e, a, i(1, t)) } : function(e, a, t) { return e[a] = t, e } }, function(e, a) { e.exports = function(e) { try { return !!e() } catch (e) { return !0 } } }, function(e, a) { var t = {}.hasOwnProperty;
  e.exports = function(e, a) { return t.call(e, a) } }, function(e, a, t) { var r = t(132),
    i = t(135);
  e.exports = function(e, a) { var t = i(e, a); return r(t) ? t : void 0 } }, function(e, a, t) { var r = t(121),
    i = t(122);
  e.exports = function(e, a, t) { return void 0 === t && (t = a, a = void 0), void 0 !== t && (t = (t = i(t)) == t ? t : 0), void 0 !== a && (a = (a = i(a)) == a ? a : 0), r(i(e), a, t) } }, function(e, a, t) { var r = t(25),
    i = t(62),
    n = t(37),
    o = Object.defineProperty;
  a.f = t(12) ? Object.defineProperty : function(e, a, t) { if (r(e), a = n(a, !0), r(t), i) try { return o(e, a, t) } catch (e) {}
    if ("get" in t || "set" in t) throw TypeError("Accessors not supported!"); return "value" in t && (e[a] = t.value), e } }, function(e, a) { e.exports = function(e) { return "object" == typeof e ? null !== e : "function" == typeof e } }, function(e, a, t) { e.exports = !t(6)(function() { return 7 != Object.defineProperty({}, "a", { get: function() { return 7 } }).a }) }, function(e, a, t) { var r = t(102),
    i = t(41);
  e.exports = function(e) { return r(i(e)) } }, function(e, a, t) { for (var r = t(111), i = t(28), n = t(17), o = t(2), s = t(5), c = t(45), l = t(3), u = l("iterator"), d = l("toStringTag"), b = c.Array, h = { CSSRuleList: !0, CSSStyleDeclaration: !1, CSSValueList: !1, ClientRectList: !1, DOMRectList: !1, DOMStringList: !1, DOMTokenList: !0, DataTransferItemList: !1, FileList: !1, HTMLAllCollection: !1, HTMLCollection: !1, HTMLFormElement: !1, HTMLSelectElement: !1, MediaList: !0, MimeTypeArray: !1, NamedNodeMap: !1, NodeList: !0, PaintRequestList: !1, Plugin: !1, PluginArray: !1, SVGLengthList: !1, SVGNumberList: !1, SVGPathSegList: !1, SVGPointList: !1, SVGStringList: !1, SVGTransformList: !1, SourceBufferList: !1, StyleSheetList: !0, TextTrackCueList: !1, TextTrackList: !1, TouchList: !1 }, p = i(h), m = 0; m < p.length; m++) { var g, f = p[m],
      y = h[f],
      k = o[f],
      v = k && k.prototype; if (v && (v[u] || s(v, u, b), v[d] || s(v, d, f), c[f] = b, y))
      for (g in r) v[g] || n(v, g, r[g], !0) } }, function(e, a) { e.exports = function(e) { return null != e && "object" == typeof e } }, function(e, a) { var t = 0,
    r = Math.random();
  e.exports = function(e) { return "Symbol(".concat(void 0 === e ? "" : e, ")_", (++t + r).toString(36)) } }, function(e, a, t) { var r = t(2),
    i = t(5),
    n = t(7),
    o = t(16)("src"),
    s = Function.toString,
    c = ("" + s).split("toString");
  t(23).inspectSource = function(e) { return s.call(e) }, (e.exports = function(e, a, t, s) { var l = "function" == typeof t;
    l && (n(t, "name") || i(t, "name", a)), e[a] !== t && (l && (n(t, o) || i(t, o, e[a] ? "" + e[a] : c.join(String(a)))), e === r ? e[a] = t : s ? e[a] ? e[a] = t : i(e, a, t) : (delete e[a], i(e, a, t))) })(Function.prototype, "toString", function() { return "function" == typeof this && this[o] || s.call(this) }) }, function(e, a) { e.exports = function(e) { var a = typeof e; return null != e && ("object" == a || "function" == a) } }, function(e, a, t) { var r = t(20),
    i = t(124),
    n = t(125),
    o = "[object Null]",
    s = "[object Undefined]",
    c = r ? r.toStringTag : void 0;
  e.exports = function(e) { return null == e ? void 0 === e ? s : o : c && c in Object(e) ? i(e) : n(e) } }, function(e, a, t) { var r = t(4).Symbol;
  e.exports = r }, function(e, a, t) { var r = t(150);
  e.exports = function(e) { return null == e ? "" : r(e) } }, function(e, a, t) { t(60)("asyncIterator") }, function(e, a) { var t = e.exports = { version: "2.5.7" }; "number" == typeof __e && (__e = t) }, function(e, a) { e.exports = !1 }, function(e, a, t) { var r = t(11);
  e.exports = function(e) { if (!r(e)) throw TypeError(e + " is not an object!"); return e } }, function(e, a, t) { "use strict"; var r = t(2),
    i = t(7),
    n = t(12),
    o = t(38),
    s = t(17),
    c = t(100).KEY,
    l = t(6),
    u = t(36),
    d = t(39),
    b = t(16),
    h = t(3),
    p = t(61),
    m = t(60),
    g = t(101),
    f = t(106),
    y = t(25),
    k = t(11),
    v = t(13),
    w = t(37),
    S = t(27),
    M = t(68),
    B = t(109),
    x = t(110),
    D = t(10),
    P = t(28),
    A = x.f,
    T = D.f,
    E = B.f,
    R = r.Symbol,
    C = r.JSON,
    z = C && C.stringify,
    F = h("_hidden"),
    H = h("toPrimitive"),
    O = {}.propertyIsEnumerable,
    j = u("symbol-registry"),
    G = u("symbols"),
    I = u("op-symbols"),
    L = Object.prototype,
    _ = "function" == typeof R,
    N = r.QObject,
    K = !N || !N.prototype || !N.prototype.findChild,
    W = n && l(function() { return 7 != M(T({}, "a", { get: function() { return T(this, "a", { value: 7 }).a } })).a }) ? function(e, a, t) { var r = A(L, a);
      r && delete L[a], T(e, a, t), r && e !== L && T(L, a, r) } : T,
    U = function(e) { var a = G[e] = M(R.prototype); return a._k = e, a },
    V = _ && "symbol" == typeof R.iterator ? function(e) { return "symbol" == typeof e } : function(e) { return e instanceof R },
    q = function(e, a, t) { return e === L && q(I, a, t), y(e), a = w(a, !0), y(t), i(G, a) ? (t.enumerable ? (i(e, F) && e[F][a] && (e[F][a] = !1), t = M(t, { enumerable: S(0, !1) })) : (i(e, F) || T(e, F, S(1, {})), e[F][a] = !0), W(e, a, t)) : T(e, a, t) },
    Z = function(e, a) { y(e); for (var t, r = g(a = v(a)), i = 0, n = r.length; n > i;) q(e, t = r[i++], a[t]); return e },
    Y = function(e) { var a = O.call(this, e = w(e, !0)); return !(this === L && i(G, e) && !i(I, e)) && (!(a || !i(this, e) || !i(G, e) || i(this, F) && this[F][e]) || a) },
    $ = function(e, a) { if (e = v(e), a = w(a, !0), e !== L || !i(G, a) || i(I, a)) { var t = A(e, a); return !t || !i(G, a) || i(e, F) && e[F][a] || (t.enumerable = !0), t } },
    J = function(e) { for (var a, t = E(v(e)), r = [], n = 0; t.length > n;) i(G, a = t[n++]) || a == F || a == c || r.push(a); return r },
    Q = function(e) { for (var a, t = e === L, r = E(t ? I : v(e)), n = [], o = 0; r.length > o;) !i(G, a = r[o++]) || t && !i(L, a) || n.push(G[a]); return n };
  _ || (s((R = function() { if (this instanceof R) throw TypeError("Symbol is not a constructor!"); var e = b(arguments.length > 0 ? arguments[0] : void 0),
      a = function(t) { this === L && a.call(I, t), i(this, F) && i(this[F], e) && (this[F][e] = !1), W(this, e, S(1, t)) }; return n && K && W(L, e, { configurable: !0, set: a }), U(e) }).prototype, "toString", function() { return this._k }), x.f = $, D.f = q, t(69).f = B.f = J, t(44).f = Y, t(67).f = Q, n && !t(24) && s(L, "propertyIsEnumerable", Y, !0), p.f = function(e) { return U(h(e)) }), o(o.G + o.W + o.F * !_, { Symbol: R }); for (var X = "hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables".split(","), ee = 0; X.length > ee;) h(X[ee++]); for (var ae = P(h.store), te = 0; ae.length > te;) m(ae[te++]);
  o(o.S + o.F * !_, "Symbol", { for: function(e) { return i(j, e += "") ? j[e] : j[e] = R(e) }, keyFor: function(e) { if (!V(e)) throw TypeError(e + " is not a symbol!"); for (var a in j)
        if (j[a] === e) return a }, useSetter: function() { K = !0 }, useSimple: function() { K = !1 } }), o(o.S + o.F * !_, "Object", { create: function(e, a) { return void 0 === a ? M(e) : Z(M(e), a) }, defineProperty: q, defineProperties: Z, getOwnPropertyDescriptor: $, getOwnPropertyNames: J, getOwnPropertySymbols: Q }), C && o(o.S + o.F * (!_ || l(function() { var e = R(); return "[null]" != z([e]) || "{}" != z({ a: e }) || "{}" != z(Object(e)) })), "JSON", { stringify: function(e) { for (var a, t, r = [e], i = 1; arguments.length > i;) r.push(arguments[i++]); if (t = a = r[1], (k(a) || void 0 !== e) && !V(e)) return f(a) || (a = function(e, a) { if ("function" == typeof t && (a = t.call(this, e, a)), !V(a)) return a }), r[1] = a, z.apply(C, r) } }), R.prototype[H] || t(5)(R.prototype, H, R.prototype.valueOf), d(R, "Symbol"), d(Math, "Math", !0), d(r.JSON, "JSON", !0) }, function(e, a) { e.exports = function(e, a) { return { enumerable: !(1 & e), configurable: !(2 & e), writable: !(4 & e), value: a } } }, function(e, a, t) { var r = t(65),
    i = t(43);
  e.exports = Object.keys || function(e) { return r(e, i) } }, function(e, a, t) { "use strict"; var r = t(38),
    i = t(64),
    n = t(70),
    o = t(6),
    s = [].sort,
    c = [1, 2, 3];
  r(r.P + r.F * (o(function() { c.sort(void 0) }) || !o(function() { c.sort(null) }) || !t(117)(s)), "Array", { sort: function(e) { return void 0 === e ? s.call(n(this)) : s.call(n(this), i(e)) } }) }, function(e, a, t) { var r = t(19),
    i = t(15),
    n = "[object Symbol]";
  e.exports = function(e) { return "symbol" == typeof e || i(e) && r(e) == n } }, function(e, a, t) { var r = t(8)(Object, "create");
  e.exports = r }, function(e, a, t) { var r = t(140),
    i = t(141),
    n = t(142),
    o = t(143),
    s = t(144);

  function c(e) { var a = -1,
      t = null == e ? 0 : e.length; for (this.clear(); ++a < t;) { var r = e[a];
      this.set(r[0], r[1]) } } c.prototype.clear = r, c.prototype.delete = i, c.prototype.get = n, c.prototype.has = o, c.prototype.set = s, e.exports = c }, function(e, a, t) { var r = t(77);
  e.exports = function(e, a) { for (var t = e.length; t--;)
      if (r(e[t][0], a)) return t; return -1 } }, function(e, a, t) { var r = t(146);
  e.exports = function(e, a) { var t = e.__data__; return r(a) ? t["string" == typeof a ? "string" : "hash"] : t.map } }, function(e, a, t) { var r = t(30),
    i = 1 / 0;
  e.exports = function(e) { if ("string" == typeof e || r(e)) return e; var a = e + ""; return "0" == a && 1 / e == -i ? "-0" : a } }, function(e, a, t) { var r = t(23),
    i = t(2),
    n = i["__core-js_shared__"] || (i["__core-js_shared__"] = {});
  (e.exports = function(e, a) { return n[e] || (n[e] = void 0 !== a ? a : {}) })("versions", []).push({ version: r.version, mode: t(24) ? "pure" : "global", copyright: "© 2018 Denis Pushkarev (zloirock.ru)" }) }, function(e, a, t) { var r = t(11);
  e.exports = function(e, a) { if (!r(e)) return e; var t, i; if (a && "function" == typeof(t = e.toString) && !r(i = t.call(e))) return i; if ("function" == typeof(t = e.valueOf) && !r(i = t.call(e))) return i; if (!a && "function" == typeof(t = e.toString) && !r(i = t.call(e))) return i; throw TypeError("Can't convert object to primitive value") } }, function(e, a, t) { var r = t(2),
    i = t(23),
    n = t(5),
    o = t(17),
    s = t(99),
    c = function(e, a, t) { var l, u, d, b, h = e & c.F,
        p = e & c.G,
        m = e & c.S,
        g = e & c.P,
        f = e & c.B,
        y = p ? r : m ? r[a] || (r[a] = {}) : (r[a] || {}).prototype,
        k = p ? i : i[a] || (i[a] = {}),
        v = k.prototype || (k.prototype = {}); for (l in p && (t = a), t) d = ((u = !h && y && void 0 !== y[l]) ? y : t)[l], b = f && u ? s(d, r) : g && "function" == typeof d ? s(Function.call, d) : d, y && o(y, l, d, e & c.U), k[l] != d && n(k, l, b), g && v[l] != d && (v[l] = d) };
  r.core = i, c.F = 1, c.G = 2, c.S = 4, c.P = 8, c.B = 16, c.W = 32, c.U = 64, c.R = 128, e.exports = c }, function(e, a, t) { var r = t(10).f,
    i = t(7),
    n = t(3)("toStringTag");
  e.exports = function(e, a, t) { e && !i(e = t ? e : e.prototype, n) && r(e, n, { configurable: !0, value: a }) } }, function(e, a) { var t = {}.toString;
  e.exports = function(e) { return t.call(e).slice(8, -1) } }, function(e, a) { e.exports = function(e) { if (null == e) throw TypeError("Can't call method on  " + e); return e } }, function(e, a, t) { var r = t(36)("keys"),
    i = t(16);
  e.exports = function(e) { return r[e] || (r[e] = i(e)) } }, function(e, a) { e.exports = "constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf".split(",") }, function(e, a) { a.f = {}.propertyIsEnumerable }, function(e, a) { e.exports = {} }, function(e, a, t) { "use strict"; var r = t(5),
    i = t(17),
    n = t(6),
    o = t(41),
    s = t(3);
  e.exports = function(e, a, t) { var c = s(e),
      l = t(o, c, "" [e]),
      u = l[0],
      d = l[1];
    n(function() { var a = {}; return a[c] = function() { return 7 }, 7 != "" [e](a) }) && (i(String.prototype, e, u), r(RegExp.prototype, c, 2 == a ? function(e, a) { return d.call(e, this, a) } : function(e) { return d.call(e, this) })) } }, function(e, a) { e.exports = function(e) { return e.webpackPolyfill || (e.deprecate = function() {}, e.paths = [], e.children || (e.children = []), Object.defineProperty(e, "loaded", { enumerable: !0, get: function() { return e.l } }), Object.defineProperty(e, "id", { enumerable: !0, get: function() { return e.i } }), e.webpackPolyfill = 1), e } }, function(e, a, t) { var r = t(0),
    i = t(30),
    n = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
    o = /^\w*$/;
  e.exports = function(e, a) { if (r(e)) return !1; var t = typeof e; return !("number" != t && "symbol" != t && "boolean" != t && null != e && !i(e)) || o.test(e) || !n.test(e) || null != a && e in Object(a) } }, function(e, a, t) { var r = t(129),
    i = t(145),
    n = t(147),
    o = t(148),
    s = t(149);

  function c(e) { var a = -1,
      t = null == e ? 0 : e.length; for (this.clear(); ++a < t;) { var r = e[a];
      this.set(r[0], r[1]) } } c.prototype.clear = r, c.prototype.delete = i, c.prototype.get = n, c.prototype.has = o, c.prototype.set = s, e.exports = c }, function(e, a, t) { var r = t(8)(t(4), "Map");
  e.exports = r }, function(e, a, t) { var r = t(153),
    i = t(15),
    n = Object.prototype,
    o = n.hasOwnProperty,
    s = n.propertyIsEnumerable,
    c = r(function() { return arguments }()) ? r : function(e) { return i(e) && o.call(e, "callee") && !s.call(e, "callee") };
  e.exports = c }, function(e, a) { var t = 9007199254740991;
  e.exports = function(e) { return "number" == typeof e && e > -1 && e % 1 == 0 && e <= t } }, function(e, a, t) { var r = t(173),
    i = t(179),
    n = t(183);
  e.exports = function(e) { return n(e) ? r(e) : i(e) } }, function(e, a, t) { var r = t(91),
    i = t(55);

  function n(e, a) { this.__wrapped__ = e, this.__actions__ = [], this.__chain__ = !!a, this.__index__ = 0, this.__values__ = void 0 } n.prototype = r(i.prototype), n.prototype.constructor = n, e.exports = n }, function(e, a) { e.exports = function() {} }, function(e, a, t) { var r = t(91),
    i = t(55),
    n = 4294967295;

  function o(e) { this.__wrapped__ = e, this.__actions__ = [], this.__dir__ = 1, this.__filtered__ = !1, this.__iteratees__ = [], this.__takeCount__ = n, this.__views__ = [] } o.prototype = r(i.prototype), o.prototype.constructor = o, e.exports = o }, function(e, a, t) { var r = t(73);
  e.exports = function(e, a, t) { var i = null == e ? void 0 : r(e, a); return void 0 === i ? t : i } }, function(e, a, t) { var r = t(161),
    i = t(162),
    n = t(21),
    o = t(163);
  e.exports = function(e, a, t) { return e = n(e), void 0 === (a = t ? void 0 : a) ? i(e) ? o(e) : r(e) : e.match(a) || [] } }, function(e, a, t) { var r = t(0);
  e.exports = function() { if (!arguments.length) return []; var e = arguments[0]; return r(e) ? e : [e] } }, function(e, a, t) { var r = t(2),
    i = t(23),
    n = t(24),
    o = t(61),
    s = t(10).f;
  e.exports = function(e) { var a = i.Symbol || (i.Symbol = n ? {} : r.Symbol || {}); "_" == e.charAt(0) || e in a || s(a, e, { value: o.f(e) }) } }, function(e, a, t) { a.f = t(3) }, function(e, a, t) { e.exports = !t(12) && !t(6)(function() { return 7 != Object.defineProperty(t(63)("div"), "a", { get: function() { return 7 } }).a }) }, function(e, a, t) { var r = t(11),
    i = t(2).document,
    n = r(i) && r(i.createElement);
  e.exports = function(e) { return n ? i.createElement(e) : {} } }, function(e, a) { e.exports = function(e) { if ("function" != typeof e) throw TypeError(e + " is not a function!"); return e } }, function(e, a, t) { var r = t(7),
    i = t(13),
    n = t(103)(!1),
    o = t(42)("IE_PROTO");
  e.exports = function(e, a) { var t, s = i(e),
      c = 0,
      l = []; for (t in s) t != o && r(s, t) && l.push(t); for (; a.length > c;) r(s, t = a[c++]) && (~n(l, t) || l.push(t)); return l } }, function(e, a) { var t = Math.ceil,
    r = Math.floor;
  e.exports = function(e) { return isNaN(e = +e) ? 0 : (e > 0 ? r : t)(e) } }, function(e, a) { a.f = Object.getOwnPropertySymbols }, function(e, a, t) { var r = t(25),
    i = t(107),
    n = t(43),
    o = t(42)("IE_PROTO"),
    s = function() {},
    c = function() { var e, a = t(63)("iframe"),
        r = n.length; for (a.style.display = "none", t(108).appendChild(a), a.src = "javascript:", (e = a.contentWindow.document).open(), e.write("<script>document.F=Object<\/script>"), e.close(), c = e.F; r--;) delete c.prototype[n[r]]; return c() };
  e.exports = Object.create || function(e, a) { var t; return null !== e ? (s.prototype = r(e), t = new s, s.prototype = null, t[o] = e) : t = c(), void 0 === a ? t : i(t, a) } }, function(e, a, t) { var r = t(65),
    i = t(43).concat("length", "prototype");
  a.f = Object.getOwnPropertyNames || function(e) { return r(e, i) } }, function(e, a, t) { var r = t(41);
  e.exports = function(e) { return Object(r(e)) } }, function(e, a, t) { t(46)("replace", 2, function(e, a, t) { return [function(r, i) { "use strict"; var n = e(this),
        o = null == r ? void 0 : r[a]; return void 0 !== o ? o.call(r, n, i) : t.call(String(n), r, i) }, t] }) }, function(e, a, t) {
  (function(a) { var t = "object" == typeof a && a && a.Object === Object && a;
    e.exports = t }).call(this, t(123)) }, function(e, a, t) { var r = t(74),
    i = t(35);
  e.exports = function(e, a) { for (var t = 0, n = (a = r(a, e)).length; null != e && t < n;) e = e[i(a[t++])]; return t && t == n ? e : void 0 } }, function(e, a, t) { var r = t(0),
    i = t(48),
    n = t(126),
    o = t(21);
  e.exports = function(e, a) { return r(e) ? e : i(e, a) ? [e] : n(o(e)) } }, function(e, a, t) { var r = t(19),
    i = t(18),
    n = "[object AsyncFunction]",
    o = "[object Function]",
    s = "[object GeneratorFunction]",
    c = "[object Proxy]";
  e.exports = function(e) { if (!i(e)) return !1; var a = r(e); return a == o || a == s || a == n || a == c } }, function(e, a) { var t = Function.prototype.toString;
  e.exports = function(e) { if (null != e) { try { return t.call(e) } catch (e) {} try { return e + "" } catch (e) {} } return "" } }, function(e, a) { e.exports = function(e, a) { return e === a || e != e && a != a } }, function(e, a, t) { var r = t(74),
    i = t(51),
    n = t(0),
    o = t(79),
    s = t(52),
    c = t(35);
  e.exports = function(e, a, t) { for (var l = -1, u = (a = r(a, e)).length, d = !1; ++l < u;) { var b = c(a[l]); if (!(d = null != e && t(e, b))) break;
      e = e[b] } return d || ++l != u ? d : !!(u = null == e ? 0 : e.length) && s(u) && o(b, u) && (n(e) || i(e)) } }, function(e, a) { var t = 9007199254740991,
    r = /^(?:0|[1-9]\d*)$/;
  e.exports = function(e, a) { var i = typeof e; return !!(a = null == a ? t : a) && ("number" == i || "symbol" != i && r.test(e)) && e > -1 && e % 1 == 0 && e < a } }, function(e, a) { var t = RegExp("[\\u200d\\ud800-\\udfff\\u0300-\\u036f\\ufe20-\\ufe2f\\u20d0-\\u20ff\\ufe0e\\ufe0f]");
  e.exports = function(e) { return t.test(e) } }, function(e, a, t) {
  (function(e) { var r = t(4),
      i = t(175),
      n = a && !a.nodeType && a,
      o = n && "object" == typeof e && e && !e.nodeType && e,
      s = o && o.exports === n ? r.Buffer : void 0,
      c = (s ? s.isBuffer : void 0) || i;
    e.exports = c }).call(this, t(47)(e)) }, function(e, a, t) { var r = t(176),
    i = t(177),
    n = t(178),
    o = n && n.isTypedArray,
    s = o ? i(o) : r;
  e.exports = s }, function(e, a, t) { var r = t(32),
    i = t(187),
    n = t(188),
    o = t(189),
    s = t(190),
    c = t(191);

  function l(e) { var a = this.__data__ = new r(e);
    this.size = a.size } l.prototype.clear = i, l.prototype.delete = n, l.prototype.get = o, l.prototype.has = s, l.prototype.set = c, e.exports = l }, function(e, a, t) { var r = t(192),
    i = t(15);
  e.exports = function e(a, t, n, o, s) { return a === t || (null == a || null == t || !i(a) && !i(t) ? a != a && t != t : r(a, t, n, o, e, s)) } }, function(e, a, t) { var r = t(193),
    i = t(196),
    n = t(197),
    o = 1,
    s = 2;
  e.exports = function(e, a, t, c, l, u) { var d = t & o,
      b = e.length,
      h = a.length; if (b != h && !(d && h > b)) return !1; var p = u.get(e); if (p && u.get(a)) return p == a; var m = -1,
      g = !0,
      f = t & s ? new r : void 0; for (u.set(e, a), u.set(a, e); ++m < b;) { var y = e[m],
        k = a[m]; if (c) var v = d ? c(k, y, m, a, e, u) : c(y, k, m, e, a, u); if (void 0 !== v) { if (v) continue;
        g = !1; break } if (f) { if (!i(a, function(e, a) { if (!n(f, a) && (y === e || l(y, e, t, c, u))) return f.push(a) })) { g = !1; break } } else if (y !== k && !l(y, k, t, c, u)) { g = !1; break } } return u.delete(e), u.delete(a), g } }, function(e, a) { e.exports = function(e, a) { for (var t = -1, r = a.length, i = e.length; ++t < r;) e[i + t] = a[t]; return e } }, function(e, a, t) { var r = t(8)(t(4), "WeakMap");
  e.exports = r }, function(e, a, t) { var r = t(18);
  e.exports = function(e) { return e == e && !r(e) } }, function(e, a) { e.exports = function(e, a) { return function(t) { return null != t && t[e] === a && (void 0 !== a || e in Object(t)) } } }, function(e, a) { e.exports = function(e) { return e } }, function(e, a, t) { var r = t(18),
    i = Object.create,
    n = function() {
      function e() {} return function(a) { if (!r(a)) return {}; if (i) return i(a);
        e.prototype = a; var t = new e; return e.prototype = void 0, t } }();
  e.exports = n }, function(e, a, t) { var r = t(231),
    i = t(232),
    n = r ? function(e) { return r.get(e) } : i;
  e.exports = n }, function(e, a, t) { var r = t(233),
    i = Object.prototype.hasOwnProperty;
  e.exports = function(e) { for (var a = e.name + "", t = r[a], n = i.call(r, a) ? t.length : 0; n--;) { var o = t[n],
        s = o.func; if (null == s || s == e) return o.name } return a } }, function(e, a, t) { var r = t(152),
    i = t(78);
  e.exports = function(e, a) { return null != e && i(e, a, r) } }, function(e, a, t) { var r = t(21),
    i = t(154);
  e.exports = function(e) { return i(r(e).toLowerCase()) } }, function(e, a, t) { var r = t(164)(function(e, a, t) { return e + (t ? "_" : "") + a.toLowerCase() });
  e.exports = r }, function(e, a, t) { var r = t(169),
    i = t(170),
    n = t(184);
  e.exports = function(e, a) { return r(e, n(a, 3), i) } }, function(e, a, t) { var r = t(219)(!0);
  e.exports = r }, function(e, a, t) { var r = t(64);
  e.exports = function(e, a, t) { if (r(e), void 0 === a) return e; switch (t) {
      case 1:
        return function(t) { return e.call(a, t) };
      case 2:
        return function(t, r) { return e.call(a, t, r) };
      case 3:
        return function(t, r, i) { return e.call(a, t, r, i) } } return function() { return e.apply(a, arguments) } } }, function(e, a, t) { var r = t(16)("meta"),
    i = t(11),
    n = t(7),
    o = t(10).f,
    s = 0,
    c = Object.isExtensible || function() { return !0 },
    l = !t(6)(function() { return c(Object.preventExtensions({})) }),
    u = function(e) { o(e, r, { value: { i: "O" + ++s, w: {} } }) },
    d = e.exports = { KEY: r, NEED: !1, fastKey: function(e, a) { if (!i(e)) return "symbol" == typeof e ? e : ("string" == typeof e ? "S" : "P") + e; if (!n(e, r)) { if (!c(e)) return "F"; if (!a) return "E";
          u(e) } return e[r].i }, getWeak: function(e, a) { if (!n(e, r)) { if (!c(e)) return !0; if (!a) return !1;
          u(e) } return e[r].w }, onFreeze: function(e) { return l && d.NEED && c(e) && !n(e, r) && u(e), e } } }, function(e, a, t) { var r = t(28),
    i = t(67),
    n = t(44);
  e.exports = function(e) { var a = r(e),
      t = i.f; if (t)
      for (var o, s = t(e), c = n.f, l = 0; s.length > l;) c.call(e, o = s[l++]) && a.push(o); return a } }, function(e, a, t) { var r = t(40);
  e.exports = Object("z").propertyIsEnumerable(0) ? Object : function(e) { return "String" == r(e) ? e.split("") : Object(e) } }, function(e, a, t) { var r = t(13),
    i = t(104),
    n = t(105);
  e.exports = function(e) { return function(a, t, o) { var s, c = r(a),
        l = i(c.length),
        u = n(o, l); if (e && t != t) { for (; l > u;)
          if ((s = c[u++]) != s) return !0 } else
        for (; l > u; u++)
          if ((e || u in c) && c[u] === t) return e || u || 0; return !e && -1 } } }, function(e, a, t) { var r = t(66),
    i = Math.min;
  e.exports = function(e) { return e > 0 ? i(r(e), 9007199254740991) : 0 } }, function(e, a, t) { var r = t(66),
    i = Math.max,
    n = Math.min;
  e.exports = function(e, a) { return (e = r(e)) < 0 ? i(e + a, 0) : n(e, a) } }, function(e, a, t) { var r = t(40);
  e.exports = Array.isArray || function(e) { return "Array" == r(e) } }, function(e, a, t) { var r = t(10),
    i = t(25),
    n = t(28);
  e.exports = t(12) ? Object.defineProperties : function(e, a) { i(e); for (var t, o = n(a), s = o.length, c = 0; s > c;) r.f(e, t = o[c++], a[t]); return e } }, function(e, a, t) { var r = t(2).document;
  e.exports = r && r.documentElement }, function(e, a, t) { var r = t(13),
    i = t(69).f,
    n = {}.toString,
    o = "object" == typeof window && window && Object.getOwnPropertyNames ? Object.getOwnPropertyNames(window) : [];
  e.exports.f = function(e) { return o && "[object Window]" == n.call(e) ? function(e) { try { return i(e) } catch (e) { return o.slice() } }(e) : i(r(e)) } }, function(e, a, t) { var r = t(44),
    i = t(27),
    n = t(13),
    o = t(37),
    s = t(7),
    c = t(62),
    l = Object.getOwnPropertyDescriptor;
  a.f = t(12) ? l : function(e, a) { if (e = n(e), a = o(a, !0), c) try { return l(e, a) } catch (e) {}
    if (s(e, a)) return i(!r.f.call(e, a), e[a]) } }, function(e, a, t) { "use strict"; var r = t(112),
    i = t(113),
    n = t(45),
    o = t(13);
  e.exports = t(114)(Array, "Array", function(e, a) { this._t = o(e), this._i = 0, this._k = a }, function() { var e = this._t,
      a = this._k,
      t = this._i++; return !e || t >= e.length ? (this._t = void 0, i(1)) : i(0, "keys" == a ? t : "values" == a ? e[t] : [t, e[t]]) }, "values"), n.Arguments = n.Array, r("keys"), r("values"), r("entries") }, function(e, a, t) { var r = t(3)("unscopables"),
    i = Array.prototype;
  null == i[r] && t(5)(i, r, {}), e.exports = function(e) { i[r][e] = !0 } }, function(e, a) { e.exports = function(e, a) { return { value: a, done: !!e } } }, function(e, a, t) { "use strict"; var r = t(24),
    i = t(38),
    n = t(17),
    o = t(5),
    s = t(45),
    c = t(115),
    l = t(39),
    u = t(116),
    d = t(3)("iterator"),
    b = !([].keys && "next" in [].keys()),
    h = function() { return this };
  e.exports = function(e, a, t, p, m, g, f) { c(t, a, p); var y, k, v, w = function(e) { if (!b && e in x) return x[e]; switch (e) {
          case "keys":
          case "values":
            return function() { return new t(this, e) } } return function() { return new t(this, e) } },
      S = a + " Iterator",
      M = "values" == m,
      B = !1,
      x = e.prototype,
      D = x[d] || x["@@iterator"] || m && x[m],
      P = D || w(m),
      A = m ? M ? w("entries") : P : void 0,
      T = "Array" == a && x.entries || D; if (T && (v = u(T.call(new e))) !== Object.prototype && v.next && (l(v, S, !0), r || "function" == typeof v[d] || o(v, d, h)), M && D && "values" !== D.name && (B = !0, P = function() { return D.call(this) }), r && !f || !b && !B && x[d] || o(x, d, P), s[a] = P, s[S] = h, m)
      if (y = { values: M ? P : w("values"), keys: g ? P : w("keys"), entries: A }, f)
        for (k in y) k in x || n(x, k, y[k]);
      else i(i.P + i.F * (b || B), a, y); return y } }, function(e, a, t) { "use strict"; var r = t(68),
    i = t(27),
    n = t(39),
    o = {};
  t(5)(o, t(3)("iterator"), function() { return this }), e.exports = function(e, a, t) { e.prototype = r(o, { next: i(1, t) }), n(e, a + " Iterator") } }, function(e, a, t) { var r = t(7),
    i = t(70),
    n = t(42)("IE_PROTO"),
    o = Object.prototype;
  e.exports = Object.getPrototypeOf || function(e) { return e = i(e), r(e, n) ? e[n] : "function" == typeof e.constructor && e instanceof e.constructor ? e.constructor.prototype : e instanceof Object ? o : null } }, function(e, a, t) { "use strict"; var r = t(6);
  e.exports = function(e, a) { return !!e && r(function() { a ? e.call(null, function() {}, 1) : e.call(null) }) } }, function(e, a, t) { t(46)("match", 1, function(e, a, t) { return [function(t) { "use strict"; var r = e(this),
        i = null == t ? void 0 : t[a]; return void 0 !== i ? i.call(t, r) : new RegExp(t)[a](String(r)) }, t] }) }, function(e, a, t) { t(46)("split", 2, function(e, a, r) { "use strict"; var i = t(120),
      n = r,
      o = [].push; if ("c" == "abbc".split(/(b)*/)[1] || 4 != "test".split(/(?:)/, -1).length || 2 != "ab".split(/(?:ab)*/).length || 4 != ".".split(/(.?)(.?)/).length || ".".split(/()()/).length > 1 || "".split(/.?/).length) { var s = void 0 === /()??/.exec("")[1];
      r = function(e, a) { var t = String(this); if (void 0 === e && 0 === a) return []; if (!i(e)) return n.call(t, e, a); var r, c, l, u, d, b = [],
          h = (e.ignoreCase ? "i" : "") + (e.multiline ? "m" : "") + (e.unicode ? "u" : "") + (e.sticky ? "y" : ""),
          p = 0,
          m = void 0 === a ? 4294967295 : a >>> 0,
          g = new RegExp(e.source, h + "g"); for (s || (r = new RegExp("^" + g.source + "$(?!\\s)", h));
          (c = g.exec(t)) && !((l = c.index + c[0].length) > p && (b.push(t.slice(p, c.index)), !s && c.length > 1 && c[0].replace(r, function() { for (d = 1; d < arguments.length - 2; d++) void 0 === arguments[d] && (c[d] = void 0) }), c.length > 1 && c.index < t.length && o.apply(b, c.slice(1)), u = c[0].length, p = l, b.length >= m));) g.lastIndex === c.index && g.lastIndex++; return p === t.length ? !u && g.test("") || b.push("") : b.push(t.slice(p)), b.length > m ? b.slice(0, m) : b } } else "0".split(void 0, 0).length && (r = function(e, a) { return void 0 === e && 0 === a ? [] : n.call(this, e, a) }); return [function(t, i) { var n = e(this),
        o = null == t ? void 0 : t[a]; return void 0 !== o ? o.call(t, n, i) : r.call(String(n), t, i) }, r] }) }, function(e, a, t) { var r = t(11),
    i = t(40),
    n = t(3)("match");
  e.exports = function(e) { var a; return r(e) && (void 0 !== (a = e[n]) ? !!a : "RegExp" == i(e)) } }, function(e, a) { e.exports = function(e, a, t) { return e == e && (void 0 !== t && (e = e <= t ? e : t), void 0 !== a && (e = e >= a ? e : a)), e } }, function(e, a, t) { var r = t(18),
    i = t(30),
    n = NaN,
    o = /^\s+|\s+$/g,
    s = /^[-+]0x[0-9a-f]+$/i,
    c = /^0b[01]+$/i,
    l = /^0o[0-7]+$/i,
    u = parseInt;
  e.exports = function(e) { if ("number" == typeof e) return e; if (i(e)) return n; if (r(e)) { var a = "function" == typeof e.valueOf ? e.valueOf() : e;
      e = r(a) ? a + "" : a } if ("string" != typeof e) return 0 === e ? e : +e;
    e = e.replace(o, ""); var t = c.test(e); return t || l.test(e) ? u(e.slice(2), t ? 2 : 8) : s.test(e) ? n : +e } }, function(e, a) { var t;
  t = function() { return this }(); try { t = t || Function("return this")() || (0, eval)("this") } catch (e) { "object" == typeof window && (t = window) } e.exports = t }, function(e, a, t) { var r = t(20),
    i = Object.prototype,
    n = i.hasOwnProperty,
    o = i.toString,
    s = r ? r.toStringTag : void 0;
  e.exports = function(e) { var a = n.call(e, s),
      t = e[s]; try { e[s] = void 0; var r = !0 } catch (e) {} var i = o.call(e); return r && (a ? e[s] = t : delete e[s]), i } }, function(e, a) { var t = Object.prototype.toString;
  e.exports = function(e) { return t.call(e) } }, function(e, a, t) { var r = t(127),
    i = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g,
    n = /\\(\\)?/g,
    o = r(function(e) { var a = []; return 46 === e.charCodeAt(0) && a.push(""), e.replace(i, function(e, t, r, i) { a.push(r ? i.replace(n, "$1") : t || e) }), a });
  e.exports = o }, function(e, a, t) { var r = t(128),
    i = 500;
  e.exports = function(e) { var a = r(e, function(e) { return t.size === i && t.clear(), e }),
      t = a.cache; return a } }, function(e, a, t) { var r = t(49),
    i = "Expected a function";

  function n(e, a) { if ("function" != typeof e || null != a && "function" != typeof a) throw new TypeError(i); var t = function() { var r = arguments,
        i = a ? a.apply(this, r) : r[0],
        n = t.cache; if (n.has(i)) return n.get(i); var o = e.apply(this, r); return t.cache = n.set(i, o) || n, o }; return t.cache = new(n.Cache || r), t } n.Cache = r, e.exports = n }, function(e, a, t) { var r = t(130),
    i = t(32),
    n = t(50);
  e.exports = function() { this.size = 0, this.__data__ = { hash: new r, map: new(n || i), string: new r } } }, function(e, a, t) { var r = t(131),
    i = t(136),
    n = t(137),
    o = t(138),
    s = t(139);

  function c(e) { var a = -1,
      t = null == e ? 0 : e.length; for (this.clear(); ++a < t;) { var r = e[a];
      this.set(r[0], r[1]) } } c.prototype.clear = r, c.prototype.delete = i, c.prototype.get = n, c.prototype.has = o, c.prototype.set = s, e.exports = c }, function(e, a, t) { var r = t(31);
  e.exports = function() { this.__data__ = r ? r(null) : {}, this.size = 0 } }, function(e, a, t) { var r = t(75),
    i = t(133),
    n = t(18),
    o = t(76),
    s = /^\[object .+?Constructor\]$/,
    c = Function.prototype,
    l = Object.prototype,
    u = c.toString,
    d = l.hasOwnProperty,
    b = RegExp("^" + u.call(d).replace(/[\\^$.*+?()[\]{}|]/g, "\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$");
  e.exports = function(e) { return !(!n(e) || i(e)) && (r(e) ? b : s).test(o(e)) } }, function(e, a, t) { var r, i = t(134),
    n = (r = /[^.]+$/.exec(i && i.keys && i.keys.IE_PROTO || "")) ? "Symbol(src)_1." + r : "";
  e.exports = function(e) { return !!n && n in e } }, function(e, a, t) { var r = t(4)["__core-js_shared__"];
  e.exports = r }, function(e, a) { e.exports = function(e, a) { return null == e ? void 0 : e[a] } }, function(e, a) { e.exports = function(e) { var a = this.has(e) && delete this.__data__[e]; return this.size -= a ? 1 : 0, a } }, function(e, a, t) { var r = t(31),
    i = "__lodash_hash_undefined__",
    n = Object.prototype.hasOwnProperty;
  e.exports = function(e) { var a = this.__data__; if (r) { var t = a[e]; return t === i ? void 0 : t } return n.call(a, e) ? a[e] : void 0 } }, function(e, a, t) { var r = t(31),
    i = Object.prototype.hasOwnProperty;
  e.exports = function(e) { var a = this.__data__; return r ? void 0 !== a[e] : i.call(a, e) } }, function(e, a, t) { var r = t(31),
    i = "__lodash_hash_undefined__";
  e.exports = function(e, a) { var t = this.__data__; return this.size += this.has(e) ? 0 : 1, t[e] = r && void 0 === a ? i : a, this } }, function(e, a) { e.exports = function() { this.__data__ = [], this.size = 0 } }, function(e, a, t) { var r = t(33),
    i = Array.prototype.splice;
  e.exports = function(e) { var a = this.__data__,
      t = r(a, e); return !(t < 0 || (t == a.length - 1 ? a.pop() : i.call(a, t, 1), --this.size, 0)) } }, function(e, a, t) { var r = t(33);
  e.exports = function(e) { var a = this.__data__,
      t = r(a, e); return t < 0 ? void 0 : a[t][1] } }, function(e, a, t) { var r = t(33);
  e.exports = function(e) { return r(this.__data__, e) > -1 } }, function(e, a, t) { var r = t(33);
  e.exports = function(e, a) { var t = this.__data__,
      i = r(t, e); return i < 0 ? (++this.size, t.push([e, a])) : t[i][1] = a, this } }, function(e, a, t) { var r = t(34);
  e.exports = function(e) { var a = r(this, e).delete(e); return this.size -= a ? 1 : 0, a } }, function(e, a) { e.exports = function(e) { var a = typeof e; return "string" == a || "number" == a || "symbol" == a || "boolean" == a ? "__proto__" !== e : null === e } }, function(e, a, t) { var r = t(34);
  e.exports = function(e) { return r(this, e).get(e) } }, function(e, a, t) { var r = t(34);
  e.exports = function(e) { return r(this, e).has(e) } }, function(e, a, t) { var r = t(34);
  e.exports = function(e, a) { var t = r(this, e),
      i = t.size; return t.set(e, a), this.size += t.size == i ? 0 : 1, this } }, function(e, a, t) { var r = t(20),
    i = t(151),
    n = t(0),
    o = t(30),
    s = 1 / 0,
    c = r ? r.prototype : void 0,
    l = c ? c.toString : void 0;
  e.exports = function e(a) { if ("string" == typeof a) return a; if (n(a)) return i(a, e) + ""; if (o(a)) return l ? l.call(a) : ""; var t = a + ""; return "0" == t && 1 / a == -s ? "-0" : t } }, function(e, a) { e.exports = function(e, a) { for (var t = -1, r = null == e ? 0 : e.length, i = Array(r); ++t < r;) i[t] = a(e[t], t, e); return i } }, function(e, a) { var t = Object.prototype.hasOwnProperty;
  e.exports = function(e, a) { return null != e && t.call(e, a) } }, function(e, a, t) { var r = t(19),
    i = t(15),
    n = "[object Arguments]";
  e.exports = function(e) { return i(e) && r(e) == n } }, function(e, a, t) { var r = t(155)("toUpperCase");
  e.exports = r }, function(e, a, t) { var r = t(156),
    i = t(80),
    n = t(158),
    o = t(21);
  e.exports = function(e) { return function(a) { a = o(a); var t = i(a) ? n(a) : void 0,
        s = t ? t[0] : a.charAt(0),
        c = t ? r(t, 1).join("") : a.slice(1); return s[e]() + c } } }, function(e, a, t) { var r = t(157);
  e.exports = function(e, a, t) { var i = e.length; return t = void 0 === t ? i : t, !a && t >= i ? e : r(e, a, t) } }, function(e, a) { e.exports = function(e, a, t) { var r = -1,
      i = e.length;
    a < 0 && (a = -a > i ? 0 : i + a), (t = t > i ? i : t) < 0 && (t += i), i = a > t ? 0 : t - a >>> 0, a >>>= 0; for (var n = Array(i); ++r < i;) n[r] = e[r + a]; return n } }, function(e, a, t) { var r = t(159),
    i = t(80),
    n = t(160);
  e.exports = function(e) { return i(e) ? n(e) : r(e) } }, function(e, a) { e.exports = function(e) { return e.split("") } }, function(e, a) { var t = "[\\ud800-\\udfff]",
    r = "[\\u0300-\\u036f\\ufe20-\\ufe2f\\u20d0-\\u20ff]",
    i = "\\ud83c[\\udffb-\\udfff]",
    n = "[^\\ud800-\\udfff]",
    o = "(?:\\ud83c[\\udde6-\\uddff]){2}",
    s = "[\\ud800-\\udbff][\\udc00-\\udfff]",
    c = "(?:" + r + "|" + i + ")" + "?",
    l = "[\\ufe0e\\ufe0f]?" + c + ("(?:\\u200d(?:" + [n, o, s].join("|") + ")[\\ufe0e\\ufe0f]?" + c + ")*"),
    u = "(?:" + [n + r + "?", r, o, s, t].join("|") + ")",
    d = RegExp(i + "(?=" + i + ")|" + u + l, "g");
  e.exports = function(e) { return e.match(d) || [] } }, function(e, a) { var t = /[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g;
  e.exports = function(e) { return e.match(t) || [] } }, function(e, a) { var t = /[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;
  e.exports = function(e) { return t.test(e) } }, function(e, a) { var t = "\\xac\\xb1\\xd7\\xf7\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf\\u2000-\\u206f \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000",
    r = "[" + t + "]",
    i = "\\d+",
    n = "[\\u2700-\\u27bf]",
    o = "[a-z\\xdf-\\xf6\\xf8-\\xff]",
    s = "[^\\ud800-\\udfff" + t + i + "\\u2700-\\u27bfa-z\\xdf-\\xf6\\xf8-\\xffA-Z\\xc0-\\xd6\\xd8-\\xde]",
    c = "(?:\\ud83c[\\udde6-\\uddff]){2}",
    l = "[\\ud800-\\udbff][\\udc00-\\udfff]",
    u = "[A-Z\\xc0-\\xd6\\xd8-\\xde]",
    d = "(?:" + o + "|" + s + ")",
    b = "(?:" + u + "|" + s + ")",
    h = "(?:[\\u0300-\\u036f\\ufe20-\\ufe2f\\u20d0-\\u20ff]|\\ud83c[\\udffb-\\udfff])?",
    p = "[\\ufe0e\\ufe0f]?" + h + ("(?:\\u200d(?:" + ["[^\\ud800-\\udfff]", c, l].join("|") + ")[\\ufe0e\\ufe0f]?" + h + ")*"),
    m = "(?:" + [n, c, l].join("|") + ")" + p,
    g = RegExp([u + "?" + o + "+(?:['’](?:d|ll|m|re|s|t|ve))?(?=" + [r, u, "$"].join("|") + ")", b + "+(?:['’](?:D|LL|M|RE|S|T|VE))?(?=" + [r, u + d, "$"].join("|") + ")", u + "?" + d + "+(?:['’](?:d|ll|m|re|s|t|ve))?", u + "+(?:['’](?:D|LL|M|RE|S|T|VE))?", "\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])", "\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])", i, m].join("|"), "g");
  e.exports = function(e) { return e.match(g) || [] } }, function(e, a, t) { var r = t(165),
    i = t(166),
    n = t(58),
    o = RegExp("['’]", "g");
  e.exports = function(e) { return function(a) { return r(n(i(a).replace(o, "")), e, "") } } }, function(e, a) { e.exports = function(e, a, t, r) { var i = -1,
      n = null == e ? 0 : e.length; for (r && n && (t = e[++i]); ++i < n;) t = a(t, e[i], i, e); return t } }, function(e, a, t) { var r = t(167),
    i = t(21),
    n = /[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g,
    o = RegExp("[\\u0300-\\u036f\\ufe20-\\ufe2f\\u20d0-\\u20ff]", "g");
  e.exports = function(e) { return (e = i(e)) && e.replace(n, r).replace(o, "") } }, function(e, a, t) { var r = t(168)({ "À": "A", "Á": "A", "Â": "A", "Ã": "A", "Ä": "A", "Å": "A", "à": "a", "á": "a", "â": "a", "ã": "a", "ä": "a", "å": "a", "Ç": "C", "ç": "c", "Ð": "D", "ð": "d", "È": "E", "É": "E", "Ê": "E", "Ë": "E", "è": "e", "é": "e", "ê": "e", "ë": "e", "Ì": "I", "Í": "I", "Î": "I", "Ï": "I", "ì": "i", "í": "i", "î": "i", "ï": "i", "Ñ": "N", "ñ": "n", "Ò": "O", "Ó": "O", "Ô": "O", "Õ": "O", "Ö": "O", "Ø": "O", "ò": "o", "ó": "o", "ô": "o", "õ": "o", "ö": "o", "ø": "o", "Ù": "U", "Ú": "U", "Û": "U", "Ü": "U", "ù": "u", "ú": "u", "û": "u", "ü": "u", "Ý": "Y", "ý": "y", "ÿ": "y", "Æ": "Ae", "æ": "ae", "Þ": "Th", "þ": "th", "ß": "ss", "Ā": "A", "Ă": "A", "Ą": "A", "ā": "a", "ă": "a", "ą": "a", "Ć": "C", "Ĉ": "C", "Ċ": "C", "Č": "C", "ć": "c", "ĉ": "c", "ċ": "c", "č": "c", "Ď": "D", "Đ": "D", "ď": "d", "đ": "d", "Ē": "E", "Ĕ": "E", "Ė": "E", "Ę": "E", "Ě": "E", "ē": "e", "ĕ": "e", "ė": "e", "ę": "e", "ě": "e", "Ĝ": "G", "Ğ": "G", "Ġ": "G", "Ģ": "G", "ĝ": "g", "ğ": "g", "ġ": "g", "ģ": "g", "Ĥ": "H", "Ħ": "H", "ĥ": "h", "ħ": "h", "Ĩ": "I", "Ī": "I", "Ĭ": "I", "Į": "I", "İ": "I", "ĩ": "i", "ī": "i", "ĭ": "i", "į": "i", "ı": "i", "Ĵ": "J", "ĵ": "j", "Ķ": "K", "ķ": "k", "ĸ": "k", "Ĺ": "L", "Ļ": "L", "Ľ": "L", "Ŀ": "L", "Ł": "L", "ĺ": "l", "ļ": "l", "ľ": "l", "ŀ": "l", "ł": "l", "Ń": "N", "Ņ": "N", "Ň": "N", "Ŋ": "N", "ń": "n", "ņ": "n", "ň": "n", "ŋ": "n", "Ō": "O", "Ŏ": "O", "Ő": "O", "ō": "o", "ŏ": "o", "ő": "o", "Ŕ": "R", "Ŗ": "R", "Ř": "R", "ŕ": "r", "ŗ": "r", "ř": "r", "Ś": "S", "Ŝ": "S", "Ş": "S", "Š": "S", "ś": "s", "ŝ": "s", "ş": "s", "š": "s", "Ţ": "T", "Ť": "T", "Ŧ": "T", "ţ": "t", "ť": "t", "ŧ": "t", "Ũ": "U", "Ū": "U", "Ŭ": "U", "Ů": "U", "Ű": "U", "Ų": "U", "ũ": "u", "ū": "u", "ŭ": "u", "ů": "u", "ű": "u", "ų": "u", "Ŵ": "W", "ŵ": "w", "Ŷ": "Y", "ŷ": "y", "Ÿ": "Y", "Ź": "Z", "Ż": "Z", "Ž": "Z", "ź": "z", "ż": "z", "ž": "z", "Ĳ": "IJ", "ĳ": "ij", "Œ": "Oe", "œ": "oe", "ŉ": "'n", "ſ": "s" });
  e.exports = r }, function(e, a) { e.exports = function(e) { return function(a) { return null == e ? void 0 : e[a] } } }, function(e, a) { e.exports = function(e, a, t) { var r; return t(e, function(e, t, i) { if (a(e, t, i)) return r = t, !1 }), r } }, function(e, a, t) { var r = t(171),
    i = t(53);
  e.exports = function(e, a) { return e && r(e, a, i) } }, function(e, a, t) { var r = t(172)();
  e.exports = r }, function(e, a) { e.exports = function(e) { return function(a, t, r) { for (var i = -1, n = Object(a), o = r(a), s = o.length; s--;) { var c = o[e ? s : ++i]; if (!1 === t(n[c], c, n)) break } return a } } }, function(e, a, t) { var r = t(174),
    i = t(51),
    n = t(0),
    o = t(81),
    s = t(79),
    c = t(82),
    l = Object.prototype.hasOwnProperty;
  e.exports = function(e, a) { var t = n(e),
      u = !t && i(e),
      d = !t && !u && o(e),
      b = !t && !u && !d && c(e),
      h = t || u || d || b,
      p = h ? r(e.length, String) : [],
      m = p.length; for (var g in e) !a && !l.call(e, g) || h && ("length" == g || d && ("offset" == g || "parent" == g) || b && ("buffer" == g || "byteLength" == g || "byteOffset" == g) || s(g, m)) || p.push(g); return p } }, function(e, a) { e.exports = function(e, a) { for (var t = -1, r = Array(e); ++t < e;) r[t] = a(t); return r } }, function(e, a) { e.exports = function() { return !1 } }, function(e, a, t) { var r = t(19),
    i = t(52),
    n = t(15),
    o = {};
  o["[object Float32Array]"] = o["[object Float64Array]"] = o["[object Int8Array]"] = o["[object Int16Array]"] = o["[object Int32Array]"] = o["[object Uint8Array]"] = o["[object Uint8ClampedArray]"] = o["[object Uint16Array]"] = o["[object Uint32Array]"] = !0, o["[object Arguments]"] = o["[object Array]"] = o["[object ArrayBuffer]"] = o["[object Boolean]"] = o["[object DataView]"] = o["[object Date]"] = o["[object Error]"] = o["[object Function]"] = o["[object Map]"] = o["[object Number]"] = o["[object Object]"] = o["[object RegExp]"] = o["[object Set]"] = o["[object String]"] = o["[object WeakMap]"] = !1, e.exports = function(e) { return n(e) && i(e.length) && !!o[r(e)] } }, function(e, a) { e.exports = function(e) { return function(a) { return e(a) } } }, function(e, a, t) {
  (function(e) { var r = t(72),
      i = a && !a.nodeType && a,
      n = i && "object" == typeof e && e && !e.nodeType && e,
      o = n && n.exports === i && r.process,
      s = function() { try { var e = n && n.require && n.require("util").types; return e || o && o.binding && o.binding("util") } catch (e) {} }();
    e.exports = s }).call(this, t(47)(e)) }, function(e, a, t) { var r = t(180),
    i = t(181),
    n = Object.prototype.hasOwnProperty;
  e.exports = function(e) { if (!r(e)) return i(e); var a = []; for (var t in Object(e)) n.call(e, t) && "constructor" != t && a.push(t); return a } }, function(e, a) { var t = Object.prototype;
  e.exports = function(e) { var a = e && e.constructor; return e === ("function" == typeof a && a.prototype || t) } }, function(e, a, t) { var r = t(182)(Object.keys, Object);
  e.exports = r }, function(e, a) { e.exports = function(e, a) { return function(t) { return e(a(t)) } } }, function(e, a, t) { var r = t(75),
    i = t(52);
  e.exports = function(e) { return null != e && i(e.length) && !r(e) } }, function(e, a, t) { var r = t(185),
    i = t(213),
    n = t(90),
    o = t(0),
    s = t(216);
  e.exports = function(e) { return "function" == typeof e ? e : null == e ? n : "object" == typeof e ? o(e) ? i(e[0], e[1]) : r(e) : s(e) } }, function(e, a, t) { var r = t(186),
    i = t(212),
    n = t(89);
  e.exports = function(e) { var a = i(e); return 1 == a.length && a[0][2] ? n(a[0][0], a[0][1]) : function(t) { return t === e || r(t, e, a) } } }, function(e, a, t) { var r = t(83),
    i = t(84),
    n = 1,
    o = 2;
  e.exports = function(e, a, t, s) { var c = t.length,
      l = c,
      u = !s; if (null == e) return !l; for (e = Object(e); c--;) { var d = t[c]; if (u && d[2] ? d[1] !== e[d[0]] : !(d[0] in e)) return !1 } for (; ++c < l;) { var b = (d = t[c])[0],
        h = e[b],
        p = d[1]; if (u && d[2]) { if (void 0 === h && !(b in e)) return !1 } else { var m = new r; if (s) var g = s(h, p, b, e, a, m); if (!(void 0 === g ? i(p, h, n | o, s, m) : g)) return !1 } } return !0 } }, function(e, a, t) { var r = t(32);
  e.exports = function() { this.__data__ = new r, this.size = 0 } }, function(e, a) { e.exports = function(e) { var a = this.__data__,
      t = a.delete(e); return this.size = a.size, t } }, function(e, a) { e.exports = function(e) { return this.__data__.get(e) } }, function(e, a) { e.exports = function(e) { return this.__data__.has(e) } }, function(e, a, t) { var r = t(32),
    i = t(50),
    n = t(49),
    o = 200;
  e.exports = function(e, a) { var t = this.__data__; if (t instanceof r) { var s = t.__data__; if (!i || s.length < o - 1) return s.push([e, a]), this.size = ++t.size, this;
      t = this.__data__ = new n(s) } return t.set(e, a), this.size = t.size, this } }, function(e, a, t) { var r = t(83),
    i = t(85),
    n = t(198),
    o = t(202),
    s = t(208),
    c = t(0),
    l = t(81),
    u = t(82),
    d = 1,
    b = "[object Arguments]",
    h = "[object Array]",
    p = "[object Object]",
    m = Object.prototype.hasOwnProperty;
  e.exports = function(e, a, t, g, f, y) { var k = c(e),
      v = c(a),
      w = k ? h : s(e),
      S = v ? h : s(a),
      M = (w = w == b ? p : w) == p,
      B = (S = S == b ? p : S) == p,
      x = w == S; if (x && l(e)) { if (!l(a)) return !1;
      k = !0, M = !1 } if (x && !M) return y || (y = new r), k || u(e) ? i(e, a, t, g, f, y) : n(e, a, w, t, g, f, y); if (!(t & d)) { var D = M && m.call(e, "__wrapped__"),
        P = B && m.call(a, "__wrapped__"); if (D || P) { var A = D ? e.value() : e,
          T = P ? a.value() : a; return y || (y = new r), f(A, T, t, g, y) } } return !!x && (y || (y = new r), o(e, a, t, g, f, y)) } }, function(e, a, t) { var r = t(49),
    i = t(194),
    n = t(195);

  function o(e) { var a = -1,
      t = null == e ? 0 : e.length; for (this.__data__ = new r; ++a < t;) this.add(e[a]) } o.prototype.add = o.prototype.push = i, o.prototype.has = n, e.exports = o }, function(e, a) { var t = "__lodash_hash_undefined__";
  e.exports = function(e) { return this.__data__.set(e, t), this } }, function(e, a) { e.exports = function(e) { return this.__data__.has(e) } }, function(e, a) { e.exports = function(e, a) { for (var t = -1, r = null == e ? 0 : e.length; ++t < r;)
      if (a(e[t], t, e)) return !0; return !1 } }, function(e, a) { e.exports = function(e, a) { return e.has(a) } }, function(e, a, t) { var r = t(20),
    i = t(199),
    n = t(77),
    o = t(85),
    s = t(200),
    c = t(201),
    l = 1,
    u = 2,
    d = "[object Boolean]",
    b = "[object Date]",
    h = "[object Error]",
    p = "[object Map]",
    m = "[object Number]",
    g = "[object RegExp]",
    f = "[object Set]",
    y = "[object String]",
    k = "[object Symbol]",
    v = "[object ArrayBuffer]",
    w = "[object DataView]",
    S = r ? r.prototype : void 0,
    M = S ? S.valueOf : void 0;
  e.exports = function(e, a, t, r, S, B, x) { switch (t) {
      case w:
        if (e.byteLength != a.byteLength || e.byteOffset != a.byteOffset) return !1;
        e = e.buffer, a = a.buffer;
      case v:
        return !(e.byteLength != a.byteLength || !B(new i(e), new i(a)));
      case d:
      case b:
      case m:
        return n(+e, +a);
      case h:
        return e.name == a.name && e.message == a.message;
      case g:
      case y:
        return e == a + "";
      case p:
        var D = s;
      case f:
        var P = r & l; if (D || (D = c), e.size != a.size && !P) return !1; var A = x.get(e); if (A) return A == a;
        r |= u, x.set(e, a); var T = o(D(e), D(a), r, S, B, x); return x.delete(e), T;
      case k:
        if (M) return M.call(e) == M.call(a) } return !1 } }, function(e, a, t) { var r = t(4).Uint8Array;
  e.exports = r }, function(e, a) { e.exports = function(e) { var a = -1,
      t = Array(e.size); return e.forEach(function(e, r) { t[++a] = [r, e] }), t } }, function(e, a) { e.exports = function(e) { var a = -1,
      t = Array(e.size); return e.forEach(function(e) { t[++a] = e }), t } }, function(e, a, t) { var r = t(203),
    i = 1,
    n = Object.prototype.hasOwnProperty;
  e.exports = function(e, a, t, o, s, c) { var l = t & i,
      u = r(e),
      d = u.length; if (d != r(a).length && !l) return !1; for (var b = d; b--;) { var h = u[b]; if (!(l ? h in a : n.call(a, h))) return !1 } var p = c.get(e); if (p && c.get(a)) return p == a; var m = !0;
    c.set(e, a), c.set(a, e); for (var g = l; ++b < d;) { var f = e[h = u[b]],
        y = a[h]; if (o) var k = l ? o(y, f, h, a, e, c) : o(f, y, h, e, a, c); if (!(void 0 === k ? f === y || s(f, y, t, o, c) : k)) { m = !1; break } g || (g = "constructor" == h) } if (m && !g) { var v = e.constructor,
        w = a.constructor;
      v != w && "constructor" in e && "constructor" in a && !("function" == typeof v && v instanceof v && "function" == typeof w && w instanceof w) && (m = !1) } return c.delete(e), c.delete(a), m } }, function(e, a, t) { var r = t(204),
    i = t(205),
    n = t(53);
  e.exports = function(e) { return r(e, n, i) } }, function(e, a, t) { var r = t(86),
    i = t(0);
  e.exports = function(e, a, t) { var n = a(e); return i(e) ? n : r(n, t(e)) } }, function(e, a, t) { var r = t(206),
    i = t(207),
    n = Object.prototype.propertyIsEnumerable,
    o = Object.getOwnPropertySymbols,
    s = o ? function(e) { return null == e ? [] : (e = Object(e), r(o(e), function(a) { return n.call(e, a) })) } : i;
  e.exports = s }, function(e, a) { e.exports = function(e, a) { for (var t = -1, r = null == e ? 0 : e.length, i = 0, n = []; ++t < r;) { var o = e[t];
      a(o, t, e) && (n[i++] = o) } return n } }, function(e, a) { e.exports = function() { return [] } }, function(e, a, t) { var r = t(209),
    i = t(50),
    n = t(210),
    o = t(211),
    s = t(87),
    c = t(19),
    l = t(76),
    u = l(r),
    d = l(i),
    b = l(n),
    h = l(o),
    p = l(s),
    m = c;
  (r && "[object DataView]" != m(new r(new ArrayBuffer(1))) || i && "[object Map]" != m(new i) || n && "[object Promise]" != m(n.resolve()) || o && "[object Set]" != m(new o) || s && "[object WeakMap]" != m(new s)) && (m = function(e) { var a = c(e),
      t = "[object Object]" == a ? e.constructor : void 0,
      r = t ? l(t) : ""; if (r) switch (r) {
      case u:
        return "[object DataView]";
      case d:
        return "[object Map]";
      case b:
        return "[object Promise]";
      case h:
        return "[object Set]";
      case p:
        return "[object WeakMap]" }
    return a }), e.exports = m }, function(e, a, t) { var r = t(8)(t(4), "DataView");
  e.exports = r }, function(e, a, t) { var r = t(8)(t(4), "Promise");
  e.exports = r }, function(e, a, t) { var r = t(8)(t(4), "Set");
  e.exports = r }, function(e, a, t) { var r = t(88),
    i = t(53);
  e.exports = function(e) { for (var a = i(e), t = a.length; t--;) { var n = a[t],
        o = e[n];
      a[t] = [n, o, r(o)] } return a } }, function(e, a, t) { var r = t(84),
    i = t(57),
    n = t(214),
    o = t(48),
    s = t(88),
    c = t(89),
    l = t(35),
    u = 1,
    d = 2;
  e.exports = function(e, a) { return o(e) && s(a) ? c(l(e), a) : function(t) { var o = i(t, e); return void 0 === o && o === a ? n(t, e) : r(a, o, u | d) } } }, function(e, a, t) { var r = t(215),
    i = t(78);
  e.exports = function(e, a) { return null != e && i(e, a, r) } }, function(e, a) { e.exports = function(e, a) { return null != e && a in Object(e) } }, function(e, a, t) { var r = t(217),
    i = t(218),
    n = t(48),
    o = t(35);
  e.exports = function(e) { return n(e) ? r(o(e)) : i(e) } }, function(e, a) { e.exports = function(e) { return function(a) { return null == a ? void 0 : a[e] } } }, function(e, a, t) { var r = t(73);
  e.exports = function(e) { return function(a) { return r(a, e) } } }, function(e, a, t) { var r = t(54),
    i = t(220),
    n = t(92),
    o = t(93),
    s = t(0),
    c = t(234),
    l = "Expected a function",
    u = 8,
    d = 32,
    b = 128,
    h = 256;
  e.exports = function(e) { return i(function(a) { var t = a.length,
        i = t,
        p = r.prototype.thru; for (e && a.reverse(); i--;) { var m = a[i]; if ("function" != typeof m) throw new TypeError(l); if (p && !g && "wrapper" == o(m)) var g = new r([], !0) } for (i = g ? i : t; ++i < t;) { m = a[i]; var f = o(m),
          y = "wrapper" == f ? n(m) : void 0;
        g = y && c(y[0]) && y[1] == (b | u | d | h) && !y[4].length && 1 == y[9] ? g[o(y[0])].apply(g, y[3]) : 1 == m.length && c(m) ? g[f]() : g.thru(m) } return function() { var e = arguments,
          r = e[0]; if (g && 1 == e.length && s(r)) return g.plant(r).value(); for (var i = 0, n = t ? a[i].apply(this, e) : r; ++i < t;) n = a[i].call(this, n); return n } }) } }, function(e, a, t) { var r = t(221),
    i = t(224),
    n = t(226);
  e.exports = function(e) { return n(i(e, void 0, r), e + "") } }, function(e, a, t) { var r = t(222);
  e.exports = function(e) { return null != e && e.length ? r(e, 1) : [] } }, function(e, a, t) { var r = t(86),
    i = t(223);
  e.exports = function e(a, t, n, o, s) { var c = -1,
      l = a.length; for (n || (n = i), s || (s = []); ++c < l;) { var u = a[c];
      t > 0 && n(u) ? t > 1 ? e(u, t - 1, n, o, s) : r(s, u) : o || (s[s.length] = u) } return s } }, function(e, a, t) { var r = t(20),
    i = t(51),
    n = t(0),
    o = r ? r.isConcatSpreadable : void 0;
  e.exports = function(e) { return n(e) || i(e) || !!(o && e && e[o]) } }, function(e, a, t) { var r = t(225),
    i = Math.max;
  e.exports = function(e, a, t) { return a = i(void 0 === a ? e.length - 1 : a, 0),
      function() { for (var n = arguments, o = -1, s = i(n.length - a, 0), c = Array(s); ++o < s;) c[o] = n[a + o];
        o = -1; for (var l = Array(a + 1); ++o < a;) l[o] = n[o]; return l[a] = t(c), r(e, this, l) } } }, function(e, a) { e.exports = function(e, a, t) { switch (t.length) {
      case 0:
        return e.call(a);
      case 1:
        return e.call(a, t[0]);
      case 2:
        return e.call(a, t[0], t[1]);
      case 3:
        return e.call(a, t[0], t[1], t[2]) } return e.apply(a, t) } }, function(e, a, t) { var r = t(227),
    i = t(230)(r);
  e.exports = i }, function(e, a, t) { var r = t(228),
    i = t(229),
    n = t(90),
    o = i ? function(e, a) { return i(e, "toString", { configurable: !0, enumerable: !1, value: r(a), writable: !0 }) } : n;
  e.exports = o }, function(e, a) { e.exports = function(e) { return function() { return e } } }, function(e, a, t) { var r = t(8),
    i = function() { try { var e = r(Object, "defineProperty"); return e({}, "", {}), e } catch (e) {} }();
  e.exports = i }, function(e, a) { var t = 800,
    r = 16,
    i = Date.now;
  e.exports = function(e) { var a = 0,
      n = 0; return function() { var o = i(),
        s = r - (o - n); if (n = o, s > 0) { if (++a >= t) return arguments[0] } else a = 0; return e.apply(void 0, arguments) } } }, function(e, a, t) { var r = t(87),
    i = r && new r;
  e.exports = i }, function(e, a) { e.exports = function() {} }, function(e, a) { e.exports = {} }, function(e, a, t) { var r = t(56),
    i = t(92),
    n = t(93),
    o = t(235);
  e.exports = function(e) { var a = n(e),
      t = o[a]; if ("function" != typeof t || !(a in r.prototype)) return !1; if (e === t) return !0; var s = i(t); return !!s && e === s[0] } }, function(e, a, t) { var r = t(56),
    i = t(54),
    n = t(55),
    o = t(0),
    s = t(15),
    c = t(236),
    l = Object.prototype.hasOwnProperty;

  function u(e) { if (s(e) && !o(e) && !(e instanceof r)) { if (e instanceof i) return e; if (l.call(e, "__wrapped__")) return c(e) } return new i(e) } u.prototype = n.prototype, u.prototype.constructor = u, e.exports = u }, function(e, a, t) { var r = t(56),
    i = t(54),
    n = t(237);
  e.exports = function(e) { if (e instanceof r) return e.clone(); var a = new i(e.__wrapped__, e.__chain__); return a.__actions__ = n(e.__actions__), a.__index__ = e.__index__, a.__values__ = e.__values__, a } }, function(e, a) { e.exports = function(e, a) { var t = -1,
      r = e.length; for (a || (a = Array(r)); ++t < r;) a[t] = e[t]; return a } }, function(e, a, t) { "use strict";
  t.r(a); var r = {};
  t.r(r), t.d(r, "genName", function() { return O }), t.d(r, "natureName", function() { return I }), t.d(r, "natureId", function() { return L }), t.d(r, "natureMultiplier", function() { return _ }), t.d(r, "natureStats", function() { return N }), t.d(r, "pokemonName", function() { return K }), t.d(r, "pokemonId", function() { return W }), t.d(r, "isPokeReleased", function() { return U }), t.d(r, "releasedPokes", function() { return V }), t.d(r, "baseStats", function() { return q }), t.d(r, "weight", function() { return Z }), t.d(r, "pokeTypes", function() { return Y }), t.d(r, "pokeType1", function() { return $ }), t.d(r, "pokeType2", function() { return J }), t.d(r, "hasEvolution", function() { return Q }), t.d(r, "hasPreEvolution", function() { return X }), t.d(r, "isMega", function() { return ee }), t.d(r, "requiredItemForPoke", function() { return ae }), t.d(r, "moveName", function() { return te }), t.d(r, "moveId", function() { return re }), t.d(r, "movePower", function() { return ie }), t.d(r, "isMoveReleased", function() { return ne }), t.d(r, "releasedMoves", function() { return oe }), t.d(r, "moveType", function() { return se }), t.d(r, "moveDamageClass", function() { return ce }), t.d(r, "moveIgnoresAbilities", function() { return le }), t.d(r, "priority", function() { return ue }), t.d(r, "minHits", function() { return de }), t.d(r, "maxHits", function() { return be }), t.d(r, "hitsMultipleTargets", function() { return he }), t.d(r, "zMovePower", function() { return pe }), t.d(r, "hasSecondaryEffect", function() { return me }), t.d(r, "recoil", function() { return ge }), t.d(r, "isOhkoMove", function() { return fe }), t.d(r, "hasBiteFlag", function() { return ye }), t.d(r, "hasBulletFlag", function() { return ke }), t.d(r, "hasContactFlag", function() { return ve }), t.d(r, "hasPowderFlag", function() { return we }), t.d(r, "hasPulseFlag", function() { return Se }), t.d(r, "hasPunchFlag", function() { return Me }), t.d(r, "requiresRecharge", function() { return Be }), t.d(r, "hasSoundFlag", function() { return xe }), t.d(r, "itemName", function() { return De }), t.d(r, "itemId", function() { return Pe }), t.d(r, "isItemReleased", function() { return Ae }), t.d(r, "isHeavy", function() { return Te }), t.d(r, "isPlate", function() { return Ee }), t.d(r, "itemBoostedType", function() { return Re }), t.d(r, "berryTypeResist", function() { return Ce }), t.d(r, "gemType", function() { return ze }), t.d(r, "isBerry", function() { return Fe }), t.d(r, "naturalGiftPower", function() { return He }), t.d(r, "naturalGiftType", function() { return Oe }), t.d(r, "flingPower", function() { return je }), t.d(r, "megaStone", function() { return Ge }), t.d(r, "memoryType", function() { return Ie }), t.d(r, "releasedItems", function() { return Le }), t.d(r, "zMoveTransformsTo", function() { return _e }), t.d(r, "zMoveTransformsFrom", function() { return Ne }), t.d(r, "abilityName", function() { return Ke }), t.d(r, "abilityId", function() { return We }), t.d(r, "isIgnoredByMoldBreaker", function() { return Ue }), t.d(r, "isAbilityReleased", function() { return Ve }), t.d(r, "releasedAbilities", function() { return qe }), t.d(r, "immunityType", function() { return Ze }), t.d(r, "pinchType", function() { return Ye }), t.d(r, "critArmor", function() { return $e }), t.d(r, "normalToType", function() { return Je }), t.d(r, "abilityIgnoresAbilities", function() { return Qe }), t.d(r, "typeName", function() { return Xe }), t.d(r, "typeId", function() { return ea }), t.d(r, "types", function() { return aa }), t.d(r, "typeDamageClass", function() { return ta }), t.d(r, "isPhysicalType", function() { return ra }), t.d(r, "isSpecialType", function() { return ia }), t.d(r, "isLustrousType", function() { return na }), t.d(r, "isAdamantType", function() { return oa }), t.d(r, "isGriseousType", function() { return sa }), t.d(r, "isSoulDewType", function() { return ca }), t.d(r, "isSandForceType", function() { return la }), t.d(r, "effectiveness", function() { return da });
  t(22), t(26), t(14), t(29), t(118), t(71), t(119); var i = t(9),
    n = t(1);

  function o(e, a) { return function(e) { if (Array.isArray(e)) return e }(e) || function(e, a) { var t = [],
        r = !0,
        i = !1,
        n = void 0; try { for (var o, s = e[Symbol.iterator](); !(r = (o = s.next()).done) && (t.push(o.value), !a || t.length !== a); r = !0); } catch (e) { i = !0, n = e } finally { try { r || null == s.return || s.return() } finally { if (i) throw n } } return t }(e, a) || function() { throw new TypeError("Invalid attempt to destructure non-iterable instance") }() } class s { constructor() { let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : []; if (e instanceof s) this._data = new Map(e._data);
      else if (e instanceof Map) { this._data = new Map; for (const t of e) { var a = o(t, 2); const e = a[0],
            r = a[1];
          this._data.set(e, n(r)) } } else { this._data = new Map; for (const a of e) this.add(a) } } add(e) { let a = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : n.one; return this._data.set(e, n(this._data.get(e)).add(a)), this } clear() { this._data.clear() } count() { let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : () => !0,
        a = n.zero; for (const r of this) { var t = o(r, 2); const i = t[0],
          n = t[1];
        e(i, n) && (a = a.add(n)) } return a } delete(e) { return this._data.delete(e) }* entries() { yield* this._data } every(e) { for (const a of this)
        if (!e(...a)) return !1; return !0 } has(e) { return this._data.has(e) } get(e) { return this._data.get(e) } intersect(e) { const a = e instanceof s ? e : new s(e),
        t = new s; for (const e of this) { var r = o(e, 2); const i = r[0],
          n = r[1];
        a.has(i) && (n.leq(a.get(i)) ? t.add(i, n) : t.add(i, a.get(i))) } return t } isEmpty() { return 0 === this._data.size }* keys() { yield* this._data.keys() } map(e) { let a = !1;

      function t() { a = !0 } const r = new s; for (const i of this) { const n = e(...i, t);
        a ? a = !1 : r.add(n, i[1]) } return r } max() { let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : (e, a) => e > a,
        a = void 0; const t = this.values(),
        r = t.next(); if (!r.done) { a = r.value; for (const r of t) e(r, a) > 0 && (a = r) } return a } min() { let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : (e, a) => e > a,
        a = void 0; const t = this.values(),
        r = t.next(); if (!r.done) { a = r.value; for (const r of t) e(r, a) <= 0 && (a = r) } return a } permute(e) { let a = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : (e, a) => e + a; const t = e instanceof s ? e : new s(e),
        r = new s; for (const e of this) { var i = o(e, 2); const s = i[0],
          c = i[1]; for (const e of t) { var n = o(e, 2); const t = n[0],
            i = n[1];
          r.add(a(s, t), c.multiply(i)) } } return r } get size() { let e = n.zero; for (const a of this.multiplicities()) e = e.add(a); return e } reduce(e, a) { const t = this.entries(); let r = a; if (void 0 === a) { const e = t.next(); if (e.done) return;
        r = e.value } for (const a of t) r = e(r, ...a); return r } scale() { let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : n.one; const a = new s; for (const r of this) { var t = o(r, 2); const i = t[0],
          n = t[1];
        a.add(i, n.multiply(e)) } return a } simplify() { const e = new s,
        a = this.multiplicities(),
        t = a.next(); if (t.done) return e; let r = t.value; for (const e of a) r = n.gcd(r, e); for (const a of this) { var i = o(a, 2); const t = i[0],
          n = i[1];
        e.add(t, n.divide(r)) } return e } some(e) { for (const a of this)
        if (e(...a)) return !0; return !1 } toArray() { const e = Array(Number(this.size)); let a = 0; for (const r of this) { var t = o(r, 2); const i = t[0],
          n = t[1],
          s = Number(n);
        e.fill(i, a, a + s), a += s } return e } toString() { let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : e => e.join(":"),
        a = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : (e, a) => { let t = o(e, 1)[0],
            r = o(a, 1)[0]; return (t > r) - (r > t) }; return Array.from(this).sort(a).map(e).join(", ") } union(e) { const a = e instanceof s ? e : new s(e),
        t = new s(this); for (const e of a) t.add(...e); return t }* values() { yield* this._data.keys() }* multiplicities() { yield* this._data.values() }*[Symbol.iterator]() { yield* this._data } static average(e) { let a = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 4; const t = e.size; if (t.isZero()) return NaN; const r = 10 ** (a + 1),
        i = e.reduce((e, a, t) => e.add(t.multiply(a)), n.zero).multiply(r).divide(t); return 10 * Math.round(i / 10) / r } static weightedUnion(e, a) { const t = e.reduce((e, a) => e.multiply(a.size), n.one); let r = new s; for (let i = 0; i < e.length; i++) { if (!a[i]) continue; const n = t.divide(e[i].size).multiply(a[i]),
          o = e[i].scale(n);
        r = r.union(o) } return r.simplify() } } const c = { RBY: 1, GSC: 2, ADV: 3, HGSS: 4, B2W2: 5, ORAS: 6, SM: 7 },
    l = Math.max(...Object.values(c)),
    u = { HP: 0, ATK: 1, DEF: 2, SATK: 3, SDEF: 4, SPD: 5, ACC: 6, EVA: 7, SPC: 3 },
    d = { NO_GENDER: 0, MALE: 1, FEMALE: 2 },
    b = { OTHER: 0, PHYSICAL: 1, SPECIAL: 2 },
    h = { NO_STATUS: 0, POISONED: 1, BADLY_POISONED: 2, BURNED: 3, PARALYZED: 4, ASLEEP: 5, FROZEN: 6 },
    p = { NORMAL: 0, FIGHTING: 1, FLYING: 2, POISON: 3, GROUND: 4, ROCK: 5, BUG: 6, GHOST: 7, STEEL: 8, FIRE: 9, WATER: 10, GRASS: 11, ELECTRIC: 12, PSYCHIC: 13, ICE: 14, DRAGON: 15, DARK: 16, FAIRY: 17, CURSE: 18 },
    m = { CLEAR: 0, SUN: 4, RAIN: 2, SAND: 3, HAIL: 1, HARSH_SUN: 6, HEAVY_RAIN: 5, STRONG_WINDS: 7 },
    g = { HARDY: 0, LONELY: 1, BRAVE: 2, ADAMANT: 3, NAUGHTY: 4, BOLD: 5, DOCILE: 6, RELAXED: 7, IMPISH: 8, LAX: 9, TIMID: 10, HASTY: 11, SERIOUS: 12, JOLLY: 13, NAIVE: 14, MODEST: 15, MILD: 16, QUIET: 17, BASHFUL: 18, RASH: 19, CALM: 20, GENTLE: 21, SASSY: 22, CAREFUL: 23, QUIRKY: 24 },
    f = { NO_TERRAIN: Symbol("sulcalc.Terrains.NO_TERRAIN"), GRASSY_TERRAIN: Symbol("sulcalc.Terrains.GRASSY_TERRAIN"), MISTY_TERRAIN: Symbol("sulcalc.Terrains.MISTY_TERRAIN"), ELECTRIC_TERRAIN: Symbol("sulcalc.Terrains.ELECTRIC_TERRAIN"), PSYCHIC_TERRAIN: Symbol("sulcalc.Terrains.PSYCHIC_TERRAIN") },
    y = e => Math.trunc(e) + Math.sign(e) * (Math.abs(e - Math.trunc(e)) > .5),
    k = (e, a) => e * a + 2048 >> 12,
    v = (e, a) => Array.isArray(a) ? a.map(a => y(a * e / 4096)) : y(a * e / 4096);

  function w(e, a, t) { const r = []; for (let i = a; i <= t; i++) r.push(Math.trunc(e * i / t)); return r } const S = function() { for (var e = arguments.length, a = new Array(e), t = 0; t < e; t++) a[t] = arguments[t]; return a.some(e => e > 255) },
    M = function(e) { return e >> (arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 2) & 255 }; var B = t(57),
    x = t(94),
    D = t(95),
    P = t(58),
    A = t(96),
    T = t(97),
    E = t(59),
    R = { 1: { name: "RBY", abilities: { None: { a: 3, b: "None" } }, items: {}, moves: { acid: { l: { a: 33, e: [0, 0, -1, 0, 0, 0] } }, amnesia: {}, aurorabeam: { l: { a: 33, e: [0, -1, 0, 0, 0, 0] } }, bide: { d: 18 }, bind: {}, bite: { d: 0, l: { a: 10, c: 1 } }, blizzard: { h: 90 }, bubble: { l: { a: 33, e: [0, 0, 0, 0, 0, -1] } }, bubblebeam: { l: { a: 33, e: [0, 0, 0, 0, 0, -1] } }, clamp: { h: 75 }, constrict: { l: { a: 33, e: [0, 0, 0, 0, 0, -1] } }, conversion: {}, counter: {}, crabhammer: {}, dig: { c: 100 }, disable: {}, dizzypunch: {}, doubleedge: { c: 100 }, dragonrage: { c: 1 }, explosion: { c: 170 }, fireblast: { l: { a: 30, b: 3 } }, firespin: { c: 15, h: 70 }, fly: {}, focusenergy: {}, glare: {}, growth: {}, gust: { d: 0 }, haze: {}, highjumpkick: {}, hyperbeam: {}, jumpkick: {}, karatechop: { d: 0 }, leechseed: {}, lightscreen: { a: 1, b: "Light Screen", c: 0, d: 13, e: 0 }, metronome: { d: 0 }, mimic: {}, mirrormove: {}, nightshade: { c: 1 }, poisonsting: { l: { a: 20, b: 1 } }, psychic: { l: { a: 33, e: [0, 0, 0, -1, -1, 0] } }, psywave: { c: 1 }, rage: {}, razorleaf: {}, razorwind: {}, recover: {}, reflect: { a: 1, b: "Reflect", c: 0, d: 13, e: 0 }, rest: {}, rockslide: {}, rockthrow: { h: 65 }, sandattack: { d: 0 }, seismictoss: { c: 1 }, selfdestruct: { c: 130 }, skullbash: {}, slash: {}, softboiled: {}, struggle: { m: [1, 2] }, substitute: { a: 1, b: "Substitute", c: 0, d: 0, e: 0 }, superfang: { c: 1 }, thunder: { l: { a: 10, b: 4 } }, thunderwave: { h: 100 }, triattack: {}, whirlwind: { h: 85 }, wingattack: { c: 35 }, wrap: { h: 85 } }, pokedex: { missingno: { b: "Missingno.", c: [33, 136, 0, 6, 6, 29], d: 15908, e: [18, 0] }, bulbasaur: { a: 1, b: "Bulbasaur", c: [45, 49, 49, 65, 65, 45], d: 69, e: [11, 3], f: ["ivysaur"] }, ivysaur: { a: 1, b: "Ivysaur", c: [60, 62, 63, 80, 80, 60], d: 130, e: [11, 3], f: ["venusaur"], g: "bulbasaur" }, venusaur: { a: 1, b: "Venusaur", c: [80, 82, 83, 100, 100, 80], d: 1e3, e: [11, 3], g: "ivysaur" }, charmander: { a: 1, b: "Charmander", c: [39, 52, 43, 50, 50, 65], d: 85, e: [9], f: ["charmeleon"] }, charmeleon: { a: 1, b: "Charmeleon", c: [58, 64, 58, 65, 65, 80], d: 190, e: [9], f: ["charizard"], g: "charmander" }, charizard: { a: 1, b: "Charizard", c: [78, 84, 78, 85, 85, 100], d: 905, e: [9, 2], g: "charmeleon" }, squirtle: { a: 1, b: "Squirtle", c: [44, 48, 65, 50, 50, 43], d: 90, e: [10], f: ["wartortle"] }, wartortle: { a: 1, b: "Wartortle", c: [59, 63, 80, 65, 65, 58], d: 225, e: [10], f: ["blastoise"], g: "squirtle" }, blastoise: { a: 1, b: "Blastoise", c: [79, 83, 100, 85, 85, 78], d: 855, e: [10], g: "wartortle" }, caterpie: { a: 1, b: "Caterpie", c: [45, 30, 35, 20, 20, 45], d: 29, e: [6], f: ["metapod"] }, metapod: { a: 1, b: "Metapod", c: [50, 20, 55, 25, 25, 30], d: 99, e: [6], f: ["butterfree"], g: "caterpie" }, butterfree: { a: 1, b: "Butterfree", c: [60, 45, 50, 80, 80, 70], d: 320, e: [6, 2], g: "metapod" }, weedle: { a: 1, b: "Weedle", c: [40, 35, 30, 20, 20, 50], d: 32, e: [6, 3], f: ["kakuna"] }, kakuna: { a: 1, b: "Kakuna", c: [45, 25, 50, 25, 25, 35], d: 100, e: [6, 3], f: ["beedrill"], g: "weedle" }, beedrill: { a: 1, b: "Beedrill", c: [65, 80, 40, 45, 45, 75], d: 295, e: [6, 3], g: "kakuna" }, pidgey: { a: 1, b: "Pidgey", c: [40, 45, 40, 35, 35, 56], d: 18, e: [0, 2], f: ["pidgeotto"] }, pidgeotto: { a: 1, b: "Pidgeotto", c: [63, 60, 55, 50, 50, 71], d: 300, e: [0, 2], f: ["pidgeot"], g: "pidgey" }, pidgeot: { a: 1, b: "Pidgeot", c: [83, 80, 75, 70, 70, 91], d: 395, e: [0, 2], g: "pidgeotto" }, rattata: { a: 1, b: "Rattata", c: [30, 56, 35, 25, 25, 72], d: 35, e: [0], f: ["raticate"] }, raticate: { a: 1, b: "Raticate", c: [55, 81, 60, 50, 50, 97], d: 185, e: [0], g: "rattata" }, spearow: { a: 1, b: "Spearow", c: [40, 60, 30, 31, 31, 70], d: 20, e: [0, 2], f: ["fearow"] }, fearow: { a: 1, b: "Fearow", c: [65, 90, 65, 61, 61, 100], d: 380, e: [0, 2], g: "spearow" }, ekans: { a: 1, b: "Ekans", c: [35, 60, 44, 40, 40, 55], d: 69, e: [3], f: ["arbok"] }, arbok: { a: 1, b: "Arbok", c: [60, 85, 69, 65, 65, 80], d: 650, e: [3], g: "ekans" }, pikachu: { a: 1, b: "Pikachu", c: [35, 55, 30, 50, 50, 90], d: 60, e: [12], f: ["raichu"], g: "pichu" }, raichu: { a: 1, b: "Raichu", c: [60, 90, 55, 90, 90, 100], d: 300, e: [12], g: "pikachu" }, sandshrew: { a: 1, b: "Sandshrew", c: [50, 75, 85, 30, 30, 40], d: 120, e: [4], f: ["sandslash"] }, sandslash: { a: 1, b: "Sandslash", c: [75, 100, 110, 55, 55, 65], d: 295, e: [4], g: "sandshrew" }, nidoranf: { a: 1, b: "Nidoran-F", c: [55, 47, 52, 40, 40, 41], d: 70, e: [3], f: ["nidorina"] }, nidorina: { a: 1, b: "Nidorina", c: [70, 62, 67, 55, 55, 56], d: 200, e: [3], f: ["nidoqueen"], g: "nidoranf" }, nidoqueen: { a: 1, b: "Nidoqueen", c: [90, 82, 87, 75, 75, 76], d: 600, e: [3, 4], g: "nidorina" }, nidoranm: { a: 1, b: "Nidoran-M", c: [46, 57, 40, 40, 40, 50], d: 90, e: [3], f: ["nidorino"] }, nidorino: { a: 1, b: "Nidorino", c: [61, 72, 57, 55, 55, 65], d: 195, e: [3], f: ["nidoking"], g: "nidoranm" }, nidoking: { a: 1, b: "Nidoking", c: [81, 92, 77, 75, 75, 85], d: 620, e: [3, 4], g: "nidorino" }, clefairy: { a: 1, b: "Clefairy", c: [70, 45, 48, 60, 60, 35], d: 75, e: [0], f: ["clefable"], g: "cleffa" }, clefable: { a: 1, b: "Clefable", c: [95, 70, 73, 85, 85, 60], d: 400, e: [0], g: "clefairy" }, vulpix: { a: 1, b: "Vulpix", c: [38, 41, 40, 65, 65, 65], d: 99, e: [9], f: ["ninetales"] }, ninetales: { a: 1, b: "Ninetales", c: [73, 76, 75, 100, 100, 100], d: 199, e: [9], g: "vulpix" }, jigglypuff: { a: 1, b: "Jigglypuff", c: [115, 45, 20, 25, 25, 20], d: 55, e: [0], f: ["wigglytuff"], g: "igglybuff" }, wigglytuff: { a: 1, b: "Wigglytuff", c: [140, 70, 45, 50, 50, 45], d: 120, e: [0], g: "jigglypuff" }, zubat: { a: 1, b: "Zubat", c: [40, 45, 35, 40, 40, 55], d: 75, e: [3, 2], f: ["golbat"] }, golbat: { a: 1, b: "Golbat", c: [75, 80, 70, 75, 75, 90], d: 550, e: [3, 2], f: ["crobat"], g: "zubat" }, oddish: { a: 1, b: "Oddish", c: [45, 50, 55, 75, 75, 30], d: 54, e: [11, 3], f: ["gloom"] }, gloom: { a: 1, b: "Gloom", c: [60, 65, 70, 85, 85, 40], d: 86, e: [11, 3], f: ["vileplume", "bellossom"], g: "oddish" }, vileplume: { a: 1, b: "Vileplume", c: [75, 80, 85, 100, 100, 50], d: 186, e: [11, 3], g: "gloom" }, paras: { a: 1, b: "Paras", c: [35, 70, 55, 55, 55, 25], d: 54, e: [6, 11], f: ["parasect"] }, parasect: { a: 1, b: "Parasect", c: [60, 95, 80, 80, 80, 30], d: 295, e: [6, 11], g: "paras" }, venonat: { a: 1, b: "Venonat", c: [60, 55, 50, 40, 40, 45], d: 300, e: [6, 3], f: ["venomoth"] }, venomoth: { a: 1, b: "Venomoth", c: [70, 65, 60, 90, 90, 90], d: 125, e: [6, 3], g: "venonat" }, diglett: { a: 1, b: "Diglett", c: [10, 55, 25, 45, 45, 95], d: 8, e: [4], f: ["dugtrio"] }, dugtrio: { a: 1, b: "Dugtrio", c: [35, 80, 50, 70, 70, 120], d: 333, e: [4], g: "diglett" }, meowth: { a: 1, b: "Meowth", c: [40, 45, 35, 40, 40, 90], d: 42, e: [0], f: ["persian"] }, persian: { a: 1, b: "Persian", c: [65, 70, 60, 65, 65, 115], d: 320, e: [0], g: "meowth" }, psyduck: { a: 1, b: "Psyduck", c: [50, 52, 48, 50, 50, 55], d: 196, e: [10], f: ["golduck"] }, golduck: { a: 1, b: "Golduck", c: [80, 82, 78, 80, 80, 85], d: 766, e: [10], g: "psyduck" }, mankey: { a: 1, b: "Mankey", c: [40, 80, 35, 35, 35, 70], d: 280, e: [1], f: ["primeape"] }, primeape: { a: 1, b: "Primeape", c: [65, 105, 60, 60, 60, 95], d: 320, e: [1], g: "mankey" }, growlithe: { a: 1, b: "Growlithe", c: [55, 70, 45, 50, 50, 60], d: 190, e: [9], f: ["arcanine"] }, arcanine: { a: 1, b: "Arcanine", c: [90, 110, 80, 80, 80, 95], d: 1550, e: [9], g: "growlithe" }, poliwag: { a: 1, b: "Poliwag", c: [40, 50, 40, 40, 40, 90], d: 124, e: [10], f: ["poliwhirl"] }, poliwhirl: { a: 1, b: "Poliwhirl", c: [65, 65, 65, 50, 50, 90], d: 200, e: [10], f: ["poliwrath", "politoed"], g: "poliwag" }, poliwrath: { a: 1, b: "Poliwrath", c: [90, 85, 95, 70, 70, 70], d: 540, e: [10, 1], g: "poliwhirl" }, abra: { a: 1, b: "Abra", c: [25, 20, 15, 105, 105, 90], d: 195, e: [13], f: ["kadabra"] }, kadabra: { a: 1, b: "Kadabra", c: [40, 35, 30, 120, 120, 105], d: 565, e: [13], f: ["alakazam"], g: "abra" }, alakazam: { a: 1, b: "Alakazam", c: [55, 50, 45, 135, 135, 120], d: 480, e: [13], g: "kadabra" }, machop: { a: 1, b: "Machop", c: [70, 80, 50, 35, 35, 35], d: 195, e: [1], f: ["machoke"] }, machoke: { a: 1, b: "Machoke", c: [80, 100, 70, 50, 50, 45], d: 705, e: [1], f: ["machamp"], g: "machop" }, machamp: { a: 1, b: "Machamp", c: [90, 130, 80, 65, 65, 55], d: 1300, e: [1], g: "machoke" }, bellsprout: { a: 1, b: "Bellsprout", c: [50, 75, 35, 70, 70, 40], d: 40, e: [11, 3], f: ["weepinbell"] }, weepinbell: { a: 1, b: "Weepinbell", c: [65, 90, 50, 85, 85, 55], d: 64, e: [11, 3], f: ["victreebel"], g: "bellsprout" }, victreebel: { a: 1, b: "Victreebel", c: [80, 105, 65, 100, 100, 70], d: 155, e: [11, 3], g: "weepinbell" }, tentacool: { a: 1, b: "Tentacool", c: [40, 40, 35, 100, 100, 70], d: 455, e: [10, 3], f: ["tentacruel"] }, tentacruel: { a: 1, b: "Tentacruel", c: [80, 70, 65, 120, 120, 100], d: 550, e: [10, 3], g: "tentacool" }, geodude: { a: 1, b: "Geodude", c: [40, 80, 100, 30, 30, 20], d: 200, e: [5, 4], f: ["graveler"] }, graveler: { a: 1, b: "Graveler", c: [55, 95, 115, 45, 45, 35], d: 1050, e: [5, 4], f: ["golem"], g: "geodude" }, golem: { a: 1, b: "Golem", c: [80, 110, 130, 55, 55, 45], d: 3e3, e: [5, 4], g: "graveler" }, ponyta: { a: 1, b: "Ponyta", c: [50, 85, 55, 65, 65, 90], d: 300, e: [9], f: ["rapidash"] }, rapidash: { a: 1, b: "Rapidash", c: [65, 100, 70, 80, 80, 105], d: 950, e: [9], g: "ponyta" }, slowpoke: { a: 1, b: "Slowpoke", c: [90, 65, 65, 40, 40, 15], d: 360, e: [10, 13], f: ["slowbro", "slowking"] }, slowbro: { a: 1, b: "Slowbro", c: [95, 75, 110, 80, 80, 30], d: 785, e: [10, 13], g: "slowpoke" }, magnemite: { a: 1, b: "Magnemite", c: [25, 35, 70, 95, 95, 45], d: 60, e: [12], f: ["magneton"] }, magneton: { a: 1, b: "Magneton", c: [50, 60, 95, 120, 120, 70], d: 600, e: [12], f: ["magnezone"], g: "magnemite" }, farfetchd: { a: 1, b: "Farfetch'd", c: [52, 65, 55, 58, 58, 60], d: 150, e: [0, 2] }, doduo: { a: 1, b: "Doduo", c: [35, 85, 45, 35, 35, 75], d: 392, e: [0, 2], f: ["dodrio"] }, dodrio: { a: 1, b: "Dodrio", c: [60, 110, 70, 60, 60, 100], d: 852, e: [0, 2], g: "doduo" }, seel: { a: 1, b: "Seel", c: [65, 45, 55, 70, 70, 45], d: 900, e: [10], f: ["dewgong"] }, dewgong: { a: 1, b: "Dewgong", c: [90, 70, 80, 95, 95, 70], d: 1200, e: [10, 14], g: "seel" }, grimer: { a: 1, b: "Grimer", c: [80, 80, 50, 40, 40, 25], d: 300, e: [3], f: ["muk"] }, muk: { a: 1, b: "Muk", c: [105, 105, 75, 65, 65, 50], d: 300, e: [3], g: "grimer" }, shellder: { a: 1, b: "Shellder", c: [30, 65, 100, 45, 45, 40], d: 40, e: [10], f: ["cloyster"] }, cloyster: { a: 1, b: "Cloyster", c: [50, 95, 180, 85, 85, 70], d: 1325, e: [10, 14], g: "shellder" }, gastly: { a: 1, b: "Gastly", c: [30, 35, 30, 100, 100, 80], d: 1, e: [7, 3], f: ["haunter"] }, haunter: { a: 1, b: "Haunter", c: [45, 50, 45, 115, 115, 95], d: 1, e: [7, 3], f: ["gengar"], g: "gastly" }, gengar: { a: 1, b: "Gengar", c: [60, 65, 60, 130, 130, 110], d: 405, e: [7, 3], g: "haunter" }, onix: { a: 1, b: "Onix", c: [35, 45, 160, 30, 30, 70], d: 2100, e: [5, 4], f: ["steelix"] }, drowzee: { a: 1, b: "Drowzee", c: [60, 48, 45, 90, 90, 42], d: 324, e: [13], f: ["hypno"] }, hypno: { a: 1, b: "Hypno", c: [85, 73, 70, 115, 115, 67], d: 756, e: [13], g: "drowzee" }, krabby: { a: 1, b: "Krabby", c: [30, 105, 90, 25, 25, 50], d: 65, e: [10], f: ["kingler"] }, kingler: { a: 1, b: "Kingler", c: [55, 130, 115, 50, 50, 75], d: 600, e: [10], g: "krabby" }, voltorb: { a: 1, b: "Voltorb", c: [40, 30, 50, 55, 55, 100], d: 104, e: [12], f: ["electrode"] }, electrode: { a: 1, b: "Electrode", c: [60, 50, 70, 80, 80, 140], d: 666, e: [12], g: "voltorb" }, exeggcute: { a: 1, b: "Exeggcute", c: [60, 40, 80, 60, 60, 40], d: 25, e: [11, 13], f: ["exeggutor"] }, exeggutor: { a: 1, b: "Exeggutor", c: [95, 95, 85, 125, 125, 55], d: 1200, e: [11, 13], g: "exeggcute" }, cubone: { a: 1, b: "Cubone", c: [50, 50, 95, 40, 40, 35], d: 65, e: [4], f: ["marowak"] }, marowak: { a: 1, b: "Marowak", c: [60, 80, 110, 50, 50, 45], d: 450, e: [4], g: "cubone" }, hitmonlee: { a: 1, b: "Hitmonlee", c: [50, 120, 53, 35, 35, 87], d: 498, e: [1], g: "tyrogue" }, hitmonchan: { a: 1, b: "Hitmonchan", c: [50, 105, 79, 35, 35, 76], d: 502, e: [1], g: "tyrogue" }, lickitung: { a: 1, b: "Lickitung", c: [90, 55, 75, 60, 60, 30], d: 655, e: [0], f: ["lickilicky"] }, koffing: { a: 1, b: "Koffing", c: [40, 65, 95, 60, 60, 35], d: 10, e: [3], f: ["weezing"] }, weezing: { a: 1, b: "Weezing", c: [65, 90, 120, 85, 85, 60], d: 95, e: [3], g: "koffing" }, rhyhorn: { a: 1, b: "Rhyhorn", c: [80, 85, 95, 30, 30, 25], d: 1150, e: [4, 5], f: ["rhydon"] }, rhydon: { a: 1, b: "Rhydon", c: [105, 130, 120, 45, 45, 40], d: 1200, e: [4, 5], f: ["rhyperior"], g: "rhyhorn" }, chansey: { a: 1, b: "Chansey", c: [250, 5, 5, 105, 105, 50], d: 346, e: [0], f: ["blissey"] }, tangela: { a: 1, b: "Tangela", c: [65, 55, 115, 100, 100, 60], d: 350, e: [11], f: ["tangrowth"] }, kangaskhan: { a: 1, b: "Kangaskhan", c: [105, 95, 80, 40, 40, 90], d: 800, e: [0] }, horsea: { a: 1, b: "Horsea", c: [30, 40, 70, 70, 70, 60], d: 80, e: [10], f: ["seadra"] }, seadra: { a: 1, b: "Seadra", c: [55, 65, 95, 95, 95, 85], d: 250, e: [10], f: ["kingdra"], g: "horsea" }, goldeen: { a: 1, b: "Goldeen", c: [45, 67, 60, 50, 50, 63], d: 150, e: [10], f: ["seaking"] }, seaking: { a: 1, b: "Seaking", c: [80, 92, 65, 80, 80, 68], d: 390, e: [10], g: "goldeen" }, staryu: { a: 1, b: "Staryu", c: [30, 45, 55, 70, 70, 85], d: 345, e: [10], f: ["starmie"] }, starmie: { a: 1, b: "Starmie", c: [60, 75, 85, 100, 100, 115], d: 800, e: [10, 13], g: "staryu" }, mrmime: { a: 1, b: "Mr. Mime", c: [40, 45, 65, 100, 100, 90], d: 545, e: [13] }, scyther: { a: 1, b: "Scyther", c: [70, 110, 80, 55, 55, 105], d: 560, e: [6, 2], f: ["scizor"] }, jynx: { a: 1, b: "Jynx", c: [65, 50, 35, 95, 95, 95], d: 406, e: [14, 13], g: "smoochum" }, electabuzz: { a: 1, b: "Electabuzz", c: [65, 83, 57, 85, 85, 105], d: 300, e: [12], f: ["electivire"], g: "elekid" }, magmar: { a: 1, b: "Magmar", c: [65, 95, 57, 85, 85, 93], d: 445, e: [9], f: ["magmortar"], g: "magby" }, pinsir: { a: 1, b: "Pinsir", c: [65, 125, 100, 55, 55, 85], d: 550, e: [6] }, tauros: { a: 1, b: "Tauros", c: [75, 100, 95, 70, 70, 110], d: 884, e: [0] }, magikarp: { a: 1, b: "Magikarp", c: [20, 10, 55, 20, 20, 80], d: 100, e: [10], f: ["gyarados"] }, gyarados: { a: 1, b: "Gyarados", c: [95, 125, 79, 100, 100, 81], d: 2350, e: [10, 2], g: "magikarp" }, lapras: { a: 1, b: "Lapras", c: [130, 85, 80, 95, 95, 60], d: 2200, e: [10, 14] }, ditto: { a: 1, b: "Ditto", c: [48, 48, 48, 48, 48, 48], d: 40, e: [0] }, eevee: { a: 1, b: "Eevee", c: [55, 55, 50, 65, 65, 55], d: 65, e: [0], f: ["vaporeon", "jolteon", "flareon", "espeon", "umbreon", "leafeon", "glaceon", "sylveon"] }, vaporeon: { a: 1, b: "Vaporeon", c: [130, 65, 60, 110, 110, 65], d: 290, e: [10], g: "eevee" }, jolteon: { a: 1, b: "Jolteon", c: [65, 65, 60, 110, 110, 130], d: 245, e: [12], g: "eevee" }, flareon: { a: 1, b: "Flareon", c: [65, 130, 60, 110, 110, 65], d: 250, e: [9], g: "eevee" }, porygon: { a: 1, b: "Porygon", c: [65, 60, 70, 75, 75, 40], d: 365, e: [0], f: ["porygon2"] }, omanyte: { a: 1, b: "Omanyte", c: [35, 40, 100, 90, 90, 35], d: 75, e: [5, 10], f: ["omastar"] }, omastar: { a: 1, b: "Omastar", c: [70, 60, 125, 115, 115, 55], d: 350, e: [5, 10], g: "omanyte" }, kabuto: { a: 1, b: "Kabuto", c: [30, 80, 90, 45, 45, 55], d: 115, e: [5, 10], f: ["kabutops"] }, kabutops: { a: 1, b: "Kabutops", c: [60, 115, 105, 70, 70, 80], d: 405, e: [5, 10], g: "kabuto" }, aerodactyl: { a: 1, b: "Aerodactyl", c: [80, 105, 65, 60, 60, 130], d: 590, e: [5, 2] }, snorlax: { a: 1, b: "Snorlax", c: [160, 110, 65, 65, 65, 30], d: 4600, e: [0] }, articuno: { a: 1, b: "Articuno", c: [90, 85, 100, 125, 125, 85], d: 554, e: [14, 2] }, zapdos: { a: 1, b: "Zapdos", c: [90, 90, 85, 125, 125, 100], d: 526, e: [12, 2] }, moltres: { a: 1, b: "Moltres", c: [90, 100, 90, 125, 125, 90], d: 600, e: [9, 2] }, dratini: { a: 1, b: "Dratini", c: [41, 64, 45, 50, 50, 50], d: 33, e: [15], f: ["dragonair"] }, dragonair: { a: 1, b: "Dragonair", c: [61, 84, 65, 70, 70, 70], d: 165, e: [15], f: ["dragonite"], g: "dratini" }, dragonite: { a: 1, b: "Dragonite", c: [91, 134, 95, 100, 100, 80], d: 2100, e: [15, 2], g: "dragonair" }, mewtwo: { a: 1, b: "Mewtwo", c: [106, 110, 90, 154, 154, 130], d: 1220, e: [13] }, mew: { a: 1, b: "Mew", c: [100, 100, 100, 100, 100, 100], d: 40, e: [13] } }, typechart: { 3: { 0: 2, 1: 1, 2: 2, 3: 1, 4: 4, 5: 2, 6: 4, 7: 2, 9: 2, 10: 2, 11: 1, 12: 2, 13: 4, 14: 2, 15: 2 }, 6: { 0: 2, 1: 1, 2: 4, 3: 4, 4: 1, 5: 4, 6: 2, 7: 2, 9: 4, 10: 2, 11: 1, 12: 2, 13: 2, 14: 2, 15: 2 }, 7: { 0: 0, 1: 0, 2: 2, 3: 1, 4: 2, 5: 2, 6: 1, 7: 4, 9: 2, 10: 2, 11: 2, 12: 2, 13: 2, 14: 2, 15: 2 }, 8: {}, 9: { 0: 2, 1: 2, 2: 2, 3: 2, 4: 4, 5: 4, 6: 1, 7: 2, 9: 1, 10: 4, 11: 1, 12: 2, 13: 2, 14: 2, 15: 2 }, 13: { 0: 2, 1: 1, 2: 2, 3: 2, 4: 2, 5: 2, 6: 4, 7: 0, 9: 2, 10: 2, 11: 2, 12: 2, 13: 1, 14: 2, 15: 2 }, 14: { 0: 2, 1: 4, 2: 2, 3: 2, 4: 2, 5: 4, 6: 2, 7: 2, 8: 4, 9: 4, 10: 2, 11: 2, 12: 2, 13: 2, 14: 1, 15: 2, 16: 2, 17: 2 }, 16: {} } }, 2: { name: "GSC", abilities: { None: { a: 3, b: "None" } }, items: {}, moves: { aeroblast: {}, beatup: {}, bellydrum: {}, bide: {}, counter: { g: -1 }, crabhammer: {}, crosschop: {}, curse: {}, detect: { g: 2 }, dig: {}, doubleedge: { m: [25, 100] }, encore: {}, endure: { g: 2 }, explosion: { c: 250 }, flail: {}, fly: {}, focusenergy: {}, healbell: {}, highjumpkick: {}, jumpkick: {}, karatechop: {}, leechseed: {}, lightscreen: {}, lowkick: { c: 50, h: 90, l: { a: 30, c: 1 } }, metronome: {}, mimic: {}, mirrorcoat: { g: -1 }, mirrormove: {}, moonlight: {}, morningsun: {}, nightmare: {}, outrage: {}, petaldance: {}, poisongas: {}, poisonpowder: {}, protect: { g: 2 }, psywave: {}, rage: {}, razorleaf: {}, razorwind: { h: 75 }, reflect: {}, rest: {}, reversal: {}, roar: { g: -1 }, selfdestruct: { c: 200 }, sketch: {}, skullbash: {}, skyattack: {}, slash: {}, sleeptalk: {}, solarbeam: {}, spikes: {}, substitute: {}, synthesis: {}, thrash: {}, toxic: {}, transform: {}, triattack: { l: { a: 20 } }, triplekick: { i: [1, 3] }, whirlwind: { g: -1 } }, pokedex: {}, typechart: { 8: { 0: 1, 1: 4, 2: 1, 3: 0, 4: 4, 5: 1, 6: 1, 7: 1, 8: 1, 9: 4, 10: 2, 11: 1, 12: 2, 13: 1, 14: 1, 15: 1, 16: 1, 17: 1 }, 9: { 0: 2, 1: 2, 2: 2, 3: 2, 4: 4, 5: 4, 6: 1, 7: 2, 8: 1, 9: 1, 10: 4, 11: 1, 12: 2, 13: 2, 14: 1, 15: 2, 16: 2 }, 14: { 0: 2, 1: 4, 2: 2, 3: 2, 4: 2, 5: 4, 6: 2, 7: 2, 8: 4, 9: 4, 10: 2, 11: 2, 12: 2, 13: 2, 14: 1, 15: 2, 16: 2 } } }, 3: { name: "ADV", abilities: { flashfire: { d: 9 }, lightningrod: { a: 3, b: "Lightning Rod", d: -1 } }, items: { blackbelt: { k: 1 }, blackglasses: { k: 16 }, charcoal: { k: 9 }, dragonfang: { k: 15 }, enigmaberry: { a: 3, b: "Enigma Berry", n: 1 }, hardstone: { k: 5 }, magnet: { k: 12 }, metalcoat: { k: 8 }, miracleseed: { k: 11 }, mysticwater: { k: 10 }, nevermeltice: { k: 14 }, poisonbarb: { k: 3 }, seaincense: { k: 10 }, sharpbeak: { k: 2 }, silkscarf: { k: 0 }, silverpowder: { k: 6 }, softsand: { k: 4 }, spelltag: { k: 7 }, twistedspoon: { k: 13 } }, moves: { absorb: {}, acid: { l: { a: 10, e: [0, 0, -1, 0, 0, 0] } }, ancientpower: { D: 1 }, astonish: {}, beatup: {}, bide: { h: 100 }, blizzard: {}, charge: {}, counter: {}, covet: {}, crunch: { l: { a: 20, e: [0, 0, 0, 0, -1, 0] } }, dig: { c: 60 }, disable: { h: 55 }, dive: { c: 60 }, dreameater: {}, encore: {}, extrasensory: {}, fakeout: {}, feintattack: {}, flash: { h: 70 }, fly: { c: 70 }, gigadrain: {}, glare: {}, hiddenpower: { c: 0, e: 1 }, highjumpkick: { c: 85 }, hypnosis: { h: 60 }, ingrain: {}, jumpkick: { c: 70 }, leafblade: { c: 70 }, megadrain: {}, mirrorcoat: {}, mirrormove: {}, naturepower: {}, needlearm: {}, outrage: { c: 90 }, overheat: { D: 1 }, petaldance: { c: 70 }, recover: {}, rocksmash: { c: 20 }, sleeptalk: {}, spite: {}, stockpile: {}, struggle: { h: 100, m: [1, 4] }, surf: { j: 1 }, taunt: {}, tickle: {}, vinewhip: {}, volttackle: {}, waterfall: {}, weatherball: {}, zapcannon: { c: 100 } }, pokedex: {}, typechart: {} }, 4: { name: "HGSS", abilities: { lightningrod: { d: -1 }, magicguard: { a: 4, b: "Magic Guard" }, minus: { a: 3, b: "Minus" }, pickup: { a: 3, b: "Pickup" }, plus: { a: 3, b: "Plus" }, pressure: { a: 3, b: "Pressure" }, simple: { a: 4, b: "Simple" }, stench: { a: 3, b: "Stench" }, stormdrain: { d: -1 } }, items: { ironball: { j: 1 }, mentalherb: { d: 10 } }, moves: { acupressure: {}, aromatherapy: {}, assist: {}, aquaring: {}, beatup: { c: 10 }, bide: {}, bind: { h: 75 }, bonerush: { h: 80 }, bravebird: { m: [1, 3] }, brickbreak: {}, bulletseed: { c: 10 }, chatter: { l: { a: 31, d: 1 } }, clamp: { h: 75 }, conversion: {}, copycat: {}, cottonspore: { h: 85 }, covet: { c: 40 }, crabhammer: { h: 85 }, crushgrip: {}, curse: { d: 18 }, defog: {}, detect: { g: 3 }, disable: { h: 80 }, doomdesire: { c: 120, h: 85 }, doubleedge: { m: [1, 3] }, drainpunch: { c: 60 }, dreameater: {}, embargo: {}, encore: {}, endeavor: {}, explosion: { c: 500 }, extremespeed: { g: 1 }, fakeout: { g: 1 }, feint: { c: 50 }, firespin: { c: 15, h: 70 }, flail: {}, flareblitz: { m: [1, 3] }, focuspunch: {}, foresight: {}, furycutter: { c: 10 }, futuresight: { c: 80, h: 90 }, gigadrain: { c: 60 }, glare: { h: 75 }, growth: {}, healbell: {}, healblock: {}, healingwish: {}, highjumpkick: { c: 100 }, iciclespear: { c: 10 }, imprison: {}, jumpkick: { c: 85 }, lastresort: { c: 130 }, lightscreen: {}, luckychant: {}, lunardance: {}, magiccoat: {}, magmastorm: { h: 70 }, magnetrise: {}, mefirst: {}, metronome: {}, mimic: {}, minimize: {}, miracleeye: {}, mirrormove: {}, moonlight: {}, morningsun: {}, odorsleuth: {}, outrage: {}, payback: {}, petaldance: { c: 90 }, poisongas: { h: 55 }, powertrick: {}, protect: { g: 3 }, psychup: {}, recycle: {}, reflect: {}, reversal: {}, roar: { I: 1 }, rockblast: { h: 80 }, sandtomb: { c: 15, h: 70 }, scaryface: { h: 90 }, selfdestruct: { c: 400 }, sketch: {}, skillswap: {}, sleeptalk: {}, spikes: {}, spite: {}, stealthrock: {}, struggle: {}, suckerpunch: {}, synthesis: {}, tackle: { c: 35, h: 95 }, tailglow: {}, tailwind: {}, taunt: {}, thrash: { c: 90 }, torment: {}, toxic: { h: 85 }, toxicspikes: {}, transform: {}, uproar: { c: 50 }, volttackle: { m: [1, 3] }, whirlpool: { c: 15, h: 70 }, whirlwind: {}, wish: {}, woodhammer: { m: [1, 3] }, worryseed: {}, wrap: { h: 85 }, wringout: {} }, pokedex: { rotomheat: { e: [12, 7] }, rotomwash: { e: [12, 7] }, rotomfrost: { e: [12, 7] }, rotomfan: { e: [12, 7] }, rotommow: { e: [12, 7] } }, typechart: {} }, 5: { name: "B2W2", abilities: {}, items: { aguavberry: { c: [60, 15] }, apicotberry: { c: [80, 4] }, aspearberry: { c: [60, 14] }, babiriberry: { c: [60, 8] }, belueberry: { c: [80, 12] }, blukberry: { c: [70, 9] }, chartiberry: { c: [60, 5] }, cheriberry: { c: [60, 9] }, chestoberry: { c: [60, 10] }, chilanberry: { c: [60, 0] }, chopleberry: { c: [60, 1] }, cobaberry: { c: [60, 2] }, colburberry: { c: [60, 16] }, cornnberry: { c: [70, 6] }, custapberry: { c: [80, 7] }, durinberry: { c: [80, 10] }, enigmaberry: { c: [80, 6] }, figyberry: { c: [60, 6] }, ganlonberry: { c: [80, 14] }, grepaberry: { c: [70, 2] }, habanberry: { c: [60, 15] }, hondewberry: { c: [70, 4] }, iapapaberry: { c: [60, 16] }, jabocaberry: { c: [80, 15] }, kasibberry: { c: [60, 7] }, kebiaberry: { c: [60, 3] }, kelpsyberry: { c: [70, 1] }, lansatberry: { c: [80, 2] }, leppaberry: { c: [60, 1] }, liechiberry: { c: [80, 11] }, lumberry: { c: [60, 2] }, magoberry: { c: [60, 7] }, magostberry: { c: [70, 5] }, micleberry: { c: [80, 5] }, nanabberry: { c: [70, 10] }, nomelberry: { c: [70, 15] }, occaberry: { c: [60, 9] }, oranberry: { c: [60, 3] }, pamtreberry: { c: [70, 8] }, passhoberry: { c: [60, 10] }, payapaberry: { c: [60, 13] }, pechaberry: { c: [60, 12] }, persimberry: { c: [60, 4] }, petayaberry: { c: [80, 3] }, pinapberry: { c: [70, 11] }, pomegberry: { c: [70, 14] }, qualotberry: { c: [70, 3] }, rabutaberry: { c: [70, 7] }, rawstberry: { c: [60, 11] }, razzberry: { c: [60, 8] }, rindoberry: { c: [60, 11] }, rowapberry: { c: [80, 16] }, salacberry: { c: [80, 1] }, shucaberry: { c: [60, 4] }, sitrusberry: { c: [60, 13] }, spelonberry: { c: [70, 16] }, starfberry: { c: [80, 13] }, tamatoberry: { c: [70, 13] }, tangaberry: { c: [60, 6] }, wacanberry: { c: [60, 12] }, watmelberry: { c: [80, 9] }, wepearberry: { c: [70, 12] }, wikiberry: { c: [60, 5] }, yacheberry: { c: [60, 14] } }, moves: { absorb: {}, acidarmor: {}, aircutter: { c: 55 }, airslash: {}, aromatherapy: {}, assist: {}, assurance: { c: 50 }, aurasphere: { c: 90 }, barrier: {}, bestow: {}, bind: {}, blizzard: { c: 120 }, block: {}, bubble: { c: 20 }, bugbuzz: { I: 1 }, camouflage: {}, charm: { d: 0 }, chatter: { c: 60, l: { a: 10, d: 1 }, I: 1 }, clamp: {}, conversion: {}, copycat: {}, cottonspore: {}, covet: {}, crabhammer: { c: 90 }, defog: {}, detect: {}, dracometeor: { c: 140 }, dragonpulse: { c: 90 }, drainpunch: { D: 1, G: 1 }, dreameater: {}, echoedvoice: { I: 1 }, endure: {}, energyball: { c: 80 }, extrasensory: {}, feint: {}, finalgambit: { D: 1 }, fireblast: { c: 120 }, firepledge: { c: 50 }, firespin: {}, flamethrower: { c: 95 }, followme: { g: 3 }, frostbreath: { c: 40 }, furycutter: { c: 20 }, futuresight: { c: 100 }, gigadrain: {}, glare: { h: 90 }, grasswhistle: { I: 1 }, grasspledge: { c: 50 }, growl: { I: 1 }, growth: {}, gunkshot: { h: 70 }, healbell: { I: 1 }, healpulse: {}, heatwave: { c: 100 }, hex: { c: 50 }, hiddenpower: { c: 0 }, hiddenpowerbug: { c: 70 }, hiddenpowerdark: { c: 70 }, hiddenpowerdragon: { c: 70 }, hiddenpowerelectric: { c: 70 }, hiddenpowerfighting: { c: 70 }, hiddenpowerfire: { c: 70 }, hiddenpowerflying: { c: 70 }, hiddenpowerghost: { c: 70 }, hiddenpowergrass: { c: 70 }, hiddenpowerground: { c: 70 }, hiddenpowerice: { c: 70 }, hiddenpowerpoison: { c: 70 }, hiddenpowerpsychic: { c: 70 }, hiddenpowerrock: { c: 70 }, hiddenpowersteel: { c: 70 }, hiddenpowerwater: { c: 70 }, hornleech: { D: 1 }, hurricane: { c: 120 }, hydropump: { c: 120 }, hypervoice: { I: 1 }, icebeam: { c: 95 }, incinerate: { c: 30 }, knockoff: { c: 20 }, leafstorm: { c: 140 }, leechlife: { D: 1 }, lick: { c: 20 }, lightscreen: {}, lowsweep: { c: 60 }, magmastorm: { c: 120 }, meanlook: {}, megadrain: {}, metalsound: { I: 1 }, meteormash: { c: 100, h: 85 }, minimize: {}, moonlight: { d: 0 }, mudsport: { a: 3, b: "Mud Sport", c: 0, d: 4, e: 0 }, muddywater: { c: 95 }, naturepower: {}, overheat: { c: 140 }, perishsong: { I: 1 }, pinmissile: { c: 14, h: 85 }, poisonfang: { l: { a: 30, b: 2 } }, poisongas: { h: 80 }, poisonpowder: {}, powergem: { c: 70 }, protect: {}, psychoshift: { h: 90 }, psywave: { h: 80 }, quickguard: {}, ragepowder: { g: 3 }, reflect: {}, relicsong: { I: 1 }, roar: { h: 100, I: 1 }, rocktomb: { c: 50, h: 80 }, round: { I: 1 }, sandtomb: {}, sacredsword: {}, scald: {}, screech: { I: 1 }, secretpower: {}, shadowforce: {}, sing: { I: 1 }, skillswap: {}, skullbash: { c: 100 }, skydrop: {}, sleeppowder: {}, smellingsalts: { c: 60 }, smog: { c: 20 }, snarl: { I: 1 }, snore: { c: 40, I: 1 }, spore: {}, stormthrow: { c: 40 }, stringshot: {}, strugglebug: { c: 30 }, stunspore: {}, substitute: {}, submission: {}, supersonic: { I: 1 }, surf: { c: 95 }, sweetkiss: { d: 0 }, sweetscent: {}, switcheroo: {}, swordsdance: {}, synchronoise: { c: 70 }, tailwind: {}, technoblast: { c: 85 }, thief: { c: 40 }, thunder: { c: 120 }, thunderbolt: { c: 95 }, trick: {}, uproar: { I: 1 }, vinewhip: { c: 35 }, wakeupslap: { c: 60 }, waterpledge: { c: 50 }, watersport: { a: 3, b: "Water Sport", c: 0, d: 10, e: 0 }, whirlwind: { h: 100 }, wideguard: {}, whirlpool: {}, willowisp: { h: 75 }, wonderroom: { g: -7 }, wrap: {} }, pokedex: { butterfree: { c: [60, 45, 50, 80, 80, 70] }, beedrill: { c: [65, 80, 40, 45, 80, 75] }, pidgeot: { c: [83, 80, 75, 70, 70, 91] }, pikachu: { c: [35, 55, 30, 50, 40, 90] }, raichu: { c: [60, 90, 55, 90, 80, 100] }, nidoqueen: { c: [90, 82, 87, 75, 85, 76] }, nidoking: { c: [81, 92, 77, 85, 75, 85] }, clefairy: { e: [0] }, clefable: { c: [95, 70, 73, 85, 90, 60], e: [0] }, jigglypuff: { e: [0] }, wigglytuff: { c: [140, 70, 45, 75, 50, 45], e: [0] }, vileplume: { c: [75, 80, 85, 100, 90, 50] }, poliwrath: { c: [90, 85, 95, 70, 90, 70] }, alakazam: { c: [55, 50, 45, 135, 85, 120] }, victreebel: { c: [80, 105, 65, 100, 60, 70] }, golem: { c: [80, 110, 130, 55, 65, 45] }, mrmime: { e: [13] }, igglybuff: { e: [0] }, togepi: { e: [0] }, togetic: { e: [0, 2] }, cleffa: { e: [0] }, ampharos: { c: [90, 75, 75, 115, 90, 55] }, bellossom: { c: [75, 80, 85, 90, 100, 50] }, marill: { e: [10] }, azumarill: { c: [100, 50, 80, 50, 80, 50], e: [10] }, jumpluff: { c: [75, 55, 70, 55, 85, 110] }, snubbull: { e: [0] }, granbull: { e: [0] }, beautifly: { c: [60, 70, 50, 90, 50, 65] }, ralts: { e: [13] }, kirlia: { e: [13] }, gardevoir: { e: [13] }, exploud: { c: [104, 91, 63, 91, 63, 68] }, azurill: { e: [0] }, mawile: { e: [8] }, staraptor: { c: [85, 120, 70, 50, 50, 100] }, roserade: { c: [60, 70, 55, 125, 105, 90] }, mimejr: { e: [13] }, togekiss: { e: [0, 2] }, stoutland: { c: [85, 100, 90, 45, 90, 80] }, unfezant: { c: [80, 105, 80, 65, 55, 93] }, gigalith: { c: [85, 135, 130, 60, 70, 25] }, seismitoad: { c: [105, 85, 75, 85, 75, 74] }, leavanny: { c: [75, 103, 80, 70, 70, 92] }, scolipede: { c: [60, 90, 89, 55, 69, 112] }, cottonee: { e: [11] }, whimsicott: { e: [11] }, krookodile: { c: [95, 117, 70, 65, 70, 92] } }, typechart: { 7: { 0: 0, 1: 0, 2: 2, 3: 1, 4: 2, 5: 2, 6: 1, 7: 4, 8: 2, 9: 2, 10: 2, 11: 2, 12: 2, 13: 2, 14: 2, 15: 2, 16: 4 }, 8: { 0: 1, 1: 4, 2: 1, 3: 0, 4: 4, 5: 1, 6: 1, 7: 1, 8: 1, 9: 4, 10: 2, 11: 1, 12: 2, 13: 1, 14: 1, 15: 1, 16: 1 }, 11: { 0: 2, 1: 2, 2: 4, 3: 4, 4: 1, 5: 2, 6: 4, 7: 2, 8: 2, 9: 4, 10: 1, 11: 1, 12: 1, 13: 2, 14: 4, 15: 2, 16: 2 }, 12: { 0: 2, 1: 2, 2: 1, 3: 2, 4: 4, 5: 2, 6: 2, 7: 2, 8: 1, 9: 2, 10: 2, 11: 2, 12: 1, 13: 2, 14: 2, 15: 2, 16: 2 }, 17: {} } }, 6: { name: "ORAS", abilities: { aerilate: { g: 2 }, pixilate: { g: 17 }, refrigerate: { g: 14 } }, items: {}, moves: { allyswitch: { g: 1 }, bestow: {}, brickbreak: {}, covet: {}, darkvoid: { h: 80 }, defog: {}, destinybond: {}, detect: {}, diamondstorm: { l: { a: 50, f: [0, 0, 1, 0, 0, 0] } }, encore: {}, endure: {}, feint: {}, fellstinger: { c: 30 }, flyingpress: { c: 80 }, heavyslam: {}, hyperspacefury: {}, hyperspacehole: {}, kingsshield: {}, knockoff: {}, leechlife: { c: 20 }, lightscreen: {}, minimize: {}, mistyterrain: {}, mysticalfire: { c: 65 }, paraboliccharge: { c: 50 }, phantomforce: {}, powder: {}, protect: {}, quickguard: {}, reflect: {}, reflecttype: {}, rockblast: {}, shadowforce: {}, sheercold: { n: 1 }, spikyshield: {}, suckerpunch: { c: 80 }, swagger: { h: 90 }, switcheroo: {}, tackle: { c: 50 }, thief: {}, thousandarrows: {}, thousandwaves: {}, thunderwave: { h: 100 }, trick: {}, watershuriken: { e: 1 }, wideguard: {} }, pokedex: { arbok: { c: [60, 85, 69, 65, 79, 80] }, dugtrio: { c: [35, 80, 50, 50, 70, 120] }, alakazammega: { c: [55, 50, 65, 175, 95, 150] }, farfetchd: { c: [52, 65, 55, 58, 62, 60] }, dodrio: { c: [60, 110, 70, 60, 60, 100] }, electrode: { c: [60, 50, 70, 80, 80, 140] }, exeggutor: { c: [95, 95, 85, 125, 65, 55] }, noctowl: { c: [100, 50, 50, 76, 96, 70] }, ariados: { c: [70, 90, 70, 60, 60, 40] }, qwilfish: { c: [65, 95, 75, 55, 55, 85] }, magcargo: { c: [50, 50, 120, 80, 80, 30] }, corsola: { c: [55, 55, 85, 65, 85, 35] }, mantine: { c: [65, 40, 70, 80, 140, 70] }, swellow: { c: [60, 85, 60, 50, 50, 125] }, pelipper: { c: [60, 50, 100, 85, 70, 65] }, masquerain: { c: [70, 60, 62, 80, 82, 60] }, delcatty: { c: [70, 65, 65, 55, 55, 70] }, volbeat: { c: [65, 73, 55, 47, 75, 85] }, illumise: { c: [65, 47, 55, 73, 75, 85] }, lunatone: { c: [70, 55, 65, 95, 85, 70] }, solrock: { c: [70, 95, 85, 55, 65, 70] }, chimecho: { c: [65, 50, 70, 95, 80, 65] }, woobat: { c: [55, 45, 43, 55, 43, 72] }, crustle: { c: [70, 95, 125, 65, 75, 45] }, beartic: { c: [95, 110, 80, 70, 80, 50] }, cryogonal: { c: [70, 50, 30, 95, 135, 105] } }, typechart: { 16: { 0: 2, 1: 4, 2: 2, 3: 2, 4: 2, 5: 2, 6: 4, 7: 1, 8: 2, 9: 2, 10: 2, 11: 2, 12: 2, 13: 0, 14: 2, 15: 2, 16: 1, 17: 4 } } }, 7: { name: "SM", abilities: { adaptability: { a: 4, b: "Adaptability" }, aftermath: { a: 4, b: "Aftermath" }, aerilate: { a: 6, b: "Aerilate", g: 2 }, airlock: { a: 3, b: "Air Lock" }, analytic: { a: 5, b: "Analytic" }, angerpoint: { a: 4, b: "Anger Point" }, anticipation: { a: 4, b: "Anticipation" }, arenatrap: { a: 3, b: "Arena Trap" }, aromaveil: { a: 6, b: "Aroma Veil", c: 1 }, aurabreak: { a: 6, b: "Aura Break" }, baddreams: { a: 4, b: "Bad Dreams" }, battery: { a: 7, b: "Battery" }, battlearmor: { a: 3, b: "Battle Armor", c: 1, f: 1 }, battlebond: { a: 7, b: "Battle Bond" }, beastboost: { a: 7, b: "Beast Boost" }, berserk: { a: 7, b: "Berserk" }, bigpecks: { a: 5, b: "Big Pecks", c: 1 }, blaze: { a: 3, b: "Blaze", e: 9 }, bulletproof: { a: 6, b: "Bulletproof", c: 1 }, cheekpouch: { a: 6, b: "Cheek Pouch" }, chlorophyll: { a: 3, b: "Chlorophyll" }, clearbody: { a: 3, b: "Clear Body", c: 1 }, cloudnine: { a: 3, b: "Cloud Nine" }, colorchange: { a: 3, b: "Color Change" }, comatose: { a: 7, b: "Comatose" }, competitive: { a: 6, b: "Competitive" }, compoundeyes: { a: 3, b: "Compound Eyes" }, contrary: { a: 5, b: "Contrary", c: 1 }, corrosion: { a: 7, b: "Corrosion" }, cursedbody: { a: 5, b: "Cursed Body" }, cutecharm: { a: 3, b: "Cute Charm" }, damp: { a: 3, b: "Damp", c: 1 }, dancer: { a: 7, b: "Dancer" }, darkaura: { a: 6, b: "Dark Aura" }, dazzling: { a: 7, b: "Dazzling", c: 1 }, defeatist: { a: 5, b: "Defeatist" }, defiant: { a: 5, b: "Defiant" }, deltastream: { a: 6, b: "Delta Stream" }, desolateland: { a: 6, b: "Desolate Land" }, disguise: { a: 7, b: "Disguise", c: 1 }, download: { a: 4, b: "Download" }, drizzle: { a: 3, b: "Drizzle" }, drought: { a: 3, b: "Drought" }, dryskin: { a: 4, b: "Dry Skin", c: 1, d: 10 }, earlybird: { a: 3, b: "Early Bird" }, effectspore: { a: 3, b: "Effect Spore" }, electricsurge: { a: 7, b: "Electric Surge" }, emergencyexit: { a: 7, b: "Emergency Exit" }, fairyaura: { a: 6, b: "Fairy Aura" }, filter: { a: 4, b: "Filter", c: 1 }, flamebody: { a: 3, b: "Flame Body" }, flareboost: { a: 5, b: "Flare Boost" }, flashfire: { a: 3, b: "Flash Fire", c: 1, d: 9 }, flowergift: { a: 4, b: "Flower Gift", c: 1 }, flowerveil: { a: 6, b: "Flower Veil", c: 1 }, fluffy: { a: 7, b: "Fluffy", c: 1 }, forecast: { a: 3, b: "Forecast" }, forewarn: { a: 4, b: "Forewarn" }, friendguard: { a: 5, b: "Friend Guard", c: 1 }, frisk: { a: 4, b: "Frisk" }, fullmetalbody: { a: 7, b: "Full Metal Body" }, furcoat: { a: 6, b: "Fur Coat", c: 1 }, galewings: { a: 6, b: "Gale Wings" }, galvanize: { a: 7, b: "Galvanize", g: 12 }, gluttony: { a: 4, b: "Gluttony" }, gooey: { a: 6, b: "Gooey" }, grasspelt: { a: 6, b: "Grass Pelt" }, grassysurge: { a: 7, b: "Grassy Surge" }, guts: { a: 3, b: "Guts" }, harvest: { a: 5, b: "Harvest" }, healer: { a: 5, b: "Healer" }, heatproof: { a: 4, b: "Heatproof", c: 1 }, heavymetal: { a: 5, b: "Heavy Metal", c: 1 }, honeygather: { a: 4, b: "Honey Gather" }, hugepower: { a: 3, b: "Huge Power" }, hustle: { a: 3, b: "Hustle" }, hydration: { a: 4, b: "Hydration" }, hypercutter: { a: 3, b: "Hyper Cutter", c: 1 }, icebody: { a: 4, b: "Ice Body" }, illuminate: { a: 3, b: "Illuminate" }, illusion: { a: 5, b: "Illusion" }, immunity: { a: 3, b: "Immunity", c: 1 }, imposter: { a: 5, b: "Imposter" }, infiltrator: { a: 5, b: "Infiltrator" }, innardsout: { a: 7, b: "Innards Out" }, innerfocus: { a: 3, b: "Inner Focus", c: 1 }, insomnia: { a: 3, b: "Insomnia", c: 1 }, intimidate: { a: 3, b: "Intimidate" }, ironbarbs: { a: 5, b: "Iron Barbs" }, ironfist: { a: 4, b: "Iron Fist" }, justified: { a: 5, b: "Justified" }, keeneye: { a: 3, b: "Keen Eye", c: 1 }, klutz: { a: 4, b: "Klutz" }, leafguard: { a: 4, b: "Leaf Guard", c: 1 }, levitate: { a: 3, b: "Levitate", c: 1, d: 4 }, lightmetal: { a: 5, b: "Light Metal", c: 1 }, lightningrod: { a: 3, b: "Lightning Rod", c: 1, d: 12 }, limber: { a: 3, b: "Limber", c: 1 }, liquidooze: { a: 3, b: "Liquid Ooze" }, liquidvoice: { a: 7, b: "Liquid Voice" }, longreach: { a: 7, b: "Long Reach" }, magicbounce: { a: 5, b: "Magic Bounce", c: 1 }, magicguard: { a: 4, b: "Magic Guard" }, magician: { a: 6, b: "Magician" }, magmaarmor: { a: 3, b: "Magma Armor", c: 1 }, magnetpull: { a: 3, b: "Magnet Pull" }, marvelscale: { a: 3, b: "Marvel Scale", c: 1 }, megalauncher: { a: 6, b: "Mega Launcher" }, merciless: { a: 7, b: "Merciless" }, minus: { a: 3, b: "Minus" }, mistysurge: { a: 7, b: "Misty Surge" }, moldbreaker: { a: 4, b: "Mold Breaker", h: 1 }, moody: { a: 5, b: "Moody" }, motordrive: { a: 4, b: "Motor Drive", c: 1, d: 12 }, moxie: { a: 5, b: "Moxie" }, multiscale: { a: 5, b: "Multiscale", c: 1 }, multitype: { a: 4, b: "Multitype" }, mummy: { a: 5, b: "Mummy" }, naturalcure: { a: 3, b: "Natural Cure" }, neuroforce: { a: 7, b: "Neuroforce" }, noguard: { a: 4, b: "No Guard" }, normalize: { a: 4, b: "Normalize" }, oblivious: { a: 3, b: "Oblivious", c: 1 }, overcoat: { a: 5, b: "Overcoat", c: 1 }, overgrow: { a: 3, b: "Overgrow", e: 11 }, owntempo: { a: 3, b: "Own Tempo", c: 1 }, parentalbond: { a: 6, b: "Parental Bond" }, pickup: { a: 3, b: "Pickup" }, pickpocket: { a: 5, b: "Pickpocket" }, pixilate: { a: 6, b: "Pixilate", g: 17 }, plus: { a: 3, b: "Plus" }, poisonheal: { a: 4, b: "Poison Heal" }, poisonpoint: { a: 3, b: "Poison Point" }, poisontouch: { a: 5, b: "Poison Touch" }, powerconstruct: { a: 7, b: "Power Construct" }, powerofalchemy: { a: 7, b: "Power of Alchemy" }, prankster: { a: 5, b: "Prankster" }, pressure: { a: 3, b: "Pressure" }, primordialsea: { a: 6, b: "Primordial Sea" }, prismarmor: { a: 7, b: "Prism Armor" }, protean: { a: 6, b: "Protean" }, psychicsurge: { a: 7, b: "Psychic Surge" }, purepower: { a: 3, b: "Pure Power" }, queenlymajesty: { a: 7, b: "Queenly Majesty", c: 1 }, quickfeet: { a: 4, b: "Quick Feet" }, raindish: { a: 3, b: "Rain Dish" }, rattled: { a: 5, b: "Rattled" }, receiver: { a: 7, b: "Receiver" }, reckless: { a: 4, b: "Reckless" }, refrigerate: { a: 6, b: "Refrigerate", g: 14 }, regenerator: { a: 5, b: "Regenerator" }, rivalry: { a: 4, b: "Rivalry" }, rkssystem: { a: 7, b: "RKS System" }, rockhead: { a: 3, b: "Rock Head" }, roughskin: { a: 3, b: "Rough Skin" }, runaway: { a: 3, b: "Run Away" }, sandforce: { a: 5, b: "Sand Force" }, sandrush: { a: 5, b: "Sand Rush" }, sandstream: { a: 3, b: "Sand Stream" }, sandveil: { a: 3, b: "Sand Veil", c: 1 }, sapsipper: { a: 5, b: "Sap Sipper", c: 1, d: 11 }, schooling: { a: 7, b: "Schooling" }, scrappy: { a: 4, b: "Scrappy" }, serenegrace: { a: 3, b: "Serene Grace" }, shadowshield: { a: 7, b: "Shadow Shield" }, shadowtag: { a: 3, b: "Shadow Tag" }, shedskin: { a: 3, b: "Shed Skin" }, sheerforce: { a: 5, b: "Sheer Force" }, shellarmor: { a: 3, b: "Shell Armor", c: 1, f: 1 }, shielddust: { a: 3, b: "Shield Dust", c: 1 }, shieldsdown: { a: 7, b: "Shields Down" }, simple: { a: 4, b: "Simple", c: 1 }, skilllink: { a: 4, b: "Skill Link" }, slowstart: { a: 4, b: "Slow Start" }, slushrush: { a: 7, b: "Slush Rush" }, sniper: { a: 4, b: "Sniper" }, snowcloak: { a: 4, b: "Snow Cloak", c: 1 }, snowwarning: { a: 4, b: "Snow Warning" }, solarpower: { a: 4, b: "Solar Power" }, solidrock: { a: 4, b: "Solid Rock", c: 1 }, soulheart: { a: 7, b: "Soul-Heart" }, soundproof: { a: 3, b: "Soundproof", c: 1 }, speedboost: { a: 3, b: "Speed Boost" }, stakeout: { a: 7, b: "Stakeout" }, stall: { a: 4, b: "Stall" }, stamina: { a: 7, b: "Stamina" }, stancechange: { a: 6, b: "Stance Change" }, static: { a: 3, b: "Static" }, steadfast: { a: 4, b: "Steadfast" }, steelworker: { a: 7, b: "Steelworker" }, stench: { a: 3, b: "Stench" }, stickyhold: { a: 3, b: "Sticky Hold", c: 1 }, stormdrain: { a: 4, b: "Storm Drain", c: 1, d: 10 }, strongjaw: { a: 6, b: "Strong Jaw" }, sturdy: { a: 3, b: "Sturdy", c: 1 }, suctioncups: { a: 3, b: "Suction Cups", c: 1 }, superluck: { a: 4, b: "Super Luck" }, surgesurfer: { a: 7, b: "Surge Surfer" }, swarm: { a: 3, b: "Swarm", e: 6 }, sweetveil: { a: 6, b: "Sweet Veil", c: 1 }, swiftswim: { a: 3, b: "Swift Swim" }, symbiosis: { a: 6, b: "Symbiosis" }, synchronize: { a: 3, b: "Synchronize" }, tangledfeet: { a: 4, b: "Tangled Feet", c: 1 }, tanglinghair: { a: 7, b: "Tangling Hair" }, technician: { a: 4, b: "Technician" }, telepathy: { a: 5, b: "Telepathy", c: 1 }, teravolt: { a: 5, b: "Teravolt", h: 1 }, thickfat: { a: 3, b: "Thick Fat", c: 1 }, tintedlens: { a: 4, b: "Tinted Lens" }, torrent: { a: 3, b: "Torrent", e: 10 }, toxicboost: { a: 5, b: "Toxic Boost" }, toughclaws: { a: 6, b: "Tough Claws" }, trace: { a: 3, b: "Trace" }, triage: { a: 7, b: "Triage" }, truant: { a: 3, b: "Truant" }, turboblaze: { a: 5, b: "Turboblaze", h: 1 }, unaware: { a: 4, b: "Unaware", c: 1 }, unburden: { a: 4, b: "Unburden" }, unnerve: { a: 5, b: "Unnerve" }, victorystar: { a: 5, b: "Victory Star" }, vitalspirit: { a: 3, b: "Vital Spirit", c: 1 }, voltabsorb: { a: 3, b: "Volt Absorb", c: 1, d: 12 }, waterabsorb: { a: 3, b: "Water Absorb", c: 1, d: 10 }, waterbubble: { a: 7, b: "Water Bubble", c: 1 }, watercompaction: { a: 7, b: "Water Compaction" }, waterveil: { a: 3, b: "Water Veil", c: 1 }, weakarmor: { a: 5, b: "Weak Armor" }, whitesmoke: { a: 3, b: "White Smoke", c: 1 }, wimpout: { a: 7, b: "Wimp Out" }, wonderguard: { a: 3, b: "Wonder Guard", c: 1 }, wonderskin: { a: 5, b: "Wonder Skin", c: 1 }, zenmode: { a: 5, b: "Zen Mode" }, noability: { name: "(No Ability)" } }, items: { abomasite: { a: 6, b: "Abomasite", e: "abomasnowmega" }, absolite: { a: 6, b: "Absolite", e: "absolmega" }, absorbbulb: { a: 5, b: "Absorb Bulb", d: 30 }, adamantorb: { a: 4, b: "Adamant Orb", d: 60 }, adrenalineorb: { a: 7, b: "Adrenaline Orb", d: 30 }, aerodactylite: { a: 6, b: "Aerodactylite", e: "aerodactylmega" }, aggronite: { a: 6, b: "Aggronite", e: "aggronmega" }, aguavberry: { a: 3, b: "Aguav Berry", c: [80, 15], n: 1 }, airballoon: { a: 5, b: "Air Balloon", d: 10 }, alakazite: { a: 6, b: "Alakazite", e: "alakazammega" }, aloraichiumz: { a: 7, b: "Aloraichium Z", o: ["stokedsparksurfer", "thunderbolt"] }, altarianite: { a: 6, b: "Altarianite", e: "altariamega" }, ampharosite: { a: 6, b: "Ampharosite", e: "ampharosmega" }, apicotberry: { a: 3, b: "Apicot Berry", c: [100, 4], n: 1 }, armorfossil: { a: 4, b: "Armor Fossil", d: 100 }, aspearberry: { a: 3, b: "Aspear Berry", c: [80, 14], n: 1 }, assaultvest: { a: 6, b: "Assault Vest", d: 80 }, audinite: { a: 6, b: "Audinite", e: "audinomega" }, babiriberry: { a: 4, b: "Babiri Berry", c: [80, 8], l: 8, n: 1 }, banettite: { a: 6, b: "Banettite", e: "banettemega" }, beastball: { a: 7, b: "Beast Ball" }, beedrillite: { a: 6, b: "Beedrillite", e: "beedrillmega" }, belueberry: { a: 3, b: "Belue Berry", c: [100, 12], n: 1 }, berryjuice: { a: 2, b: "Berry Juice", d: 30 }, bigroot: { a: 4, b: "Big Root", d: 10 }, bindingband: { a: 5, b: "Binding Band", d: 30 }, blackbelt: { a: 2, b: "Black Belt", d: 30, k: 1 }, blacksludge: { a: 4, b: "Black Sludge", d: 30 }, blackglasses: { a: 2, b: "Black Glasses", d: 30, k: 16 }, blastoisinite: { a: 6, b: "Blastoisinite", e: "blastoisemega" }, blazikenite: { a: 6, b: "Blazikenite", e: "blazikenmega" }, blueorb: { a: 6, b: "Blue Orb" }, blukberry: { a: 3, b: "Bluk Berry", c: [90, 9], n: 1 }, brightpowder: { a: 2, b: "BrightPowder", d: 10 }, buggem: { a: 5, b: "Bug Gem", m: 6 }, bugmemory: { a: 7, b: "Bug Memory", i: 6, d: 50 }, buginiumz: { a: 7, b: "Buginium Z", g: 1, d: 90, o: 1 }, burndrive: { a: 5, b: "Burn Drive", d: 70 }, cameruptite: { a: 6, b: "Cameruptite", e: "cameruptmega" }, cellbattery: { a: 5, b: "Cell Battery", d: 30 }, charcoal: { a: 2, b: "Charcoal", d: 30, k: 9 }, charizarditex: { a: 6, b: "Charizardite X", e: "charizardmegax" }, charizarditey: { a: 6, b: "Charizardite Y", e: "charizardmegay" }, chartiberry: { a: 4, b: "Charti Berry", c: [80, 5], l: 5, n: 1 }, cheriberry: { a: 3, b: "Cheri Berry", c: [80, 9], n: 1 }, cherishball: { a: 4, b: "Cherish Ball" }, chestoberry: { a: 3, b: "Chesto Berry", c: [80, 10], n: 1 }, chilanberry: { a: 4, b: "Chilan Berry", c: [80, 0], l: 0, n: 1 }, chilldrive: { a: 5, b: "Chill Drive", d: 70 }, choiceband: { a: 3, b: "Choice Band", d: 10 }, choicescarf: { a: 4, b: "Choice Scarf", d: 10 }, choicespecs: { a: 4, b: "Choice Specs", d: 10 }, chopleberry: { a: 4, b: "Chople Berry", c: [80, 1], l: 1, n: 1 }, clawfossil: { a: 3, b: "Claw Fossil", d: 100 }, cobaberry: { a: 4, b: "Coba Berry", c: [80, 2], l: 2, n: 1 }, colburberry: { a: 4, b: "Colbur Berry", c: [80, 16], l: 16, n: 1 }, cornnberry: { a: 3, b: "Cornn Berry", c: [90, 6], n: 1 }, coverfossil: { a: 5, b: "Cover Fossil", d: 100 }, custapberry: { a: 4, b: "Custap Berry", c: [100, 7], n: 1 }, damprock: { a: 4, b: "Damp Rock", d: 60 }, darkgem: { a: 5, b: "Dark Gem", m: 16 }, darkmemory: { a: 7, b: "Dark Memory", i: 16, d: 50 }, darkiniumz: { a: 7, b: "Darkinium Z", g: 1, d: 90, o: 1 }, decidiumz: { a: 7, b: "Decidium Z", o: ["sinisterarrowraid", "spiritshackle"] }, deepseascale: { a: 3, b: "Deep Sea Scale", d: 30 }, deepseatooth: { a: 3, b: "Deep Sea Tooth", d: 90 }, destinyknot: { a: 4, b: "Destiny Knot", d: 10 }, diancite: { a: 6, b: "Diancite", e: "dianciemega" }, diveball: { a: 3, b: "Dive Ball" }, domefossil: { a: 3, b: "Dome Fossil", d: 100 }, dousedrive: { a: 5, b: "Douse Drive", d: 70 }, dracoplate: { a: 4, b: "Draco Plate", g: 1, d: 90, k: 15 }, dragonfang: { a: 2, b: "Dragon Fang", d: 70, k: 15 }, dragongem: { a: 5, b: "Dragon Gem", m: 15 }, dragonmemory: { a: 7, b: "Dragon Memory", i: 15, d: 50 }, dragoniumz: { a: 7, b: "Dragonium Z", g: 1, d: 90, o: 1 }, dreadplate: { a: 4, b: "Dread Plate", g: 1, d: 90, k: 16 }, dreamball: { a: 5, b: "Dream Ball" }, durinberry: { a: 3, b: "Durin Berry", c: [100, 10], n: 1 }, duskball: { a: 4, b: "Dusk Ball" }, earthplate: { a: 4, b: "Earth Plate", g: 1, d: 90, k: 4 }, eeviumz: { a: 7, b: "Eevium Z", o: ["extremeevoboost", "lastresort"] }, ejectbutton: { a: 5, b: "Eject Button", d: 30 }, electirizer: { a: 4, b: "Electirizer", d: 80 }, electricgem: { a: 5, b: "Electric Gem", m: 12 }, electricmemory: { a: 7, b: "Electric Memory", i: 12, d: 50 }, electricseed: { a: 7, b: "Electric Seed", d: 10 }, electriumz: { a: 7, b: "Electrium Z", g: 1, d: 90, o: 1 }, energypowder: { a: 2, b: "Energy Powder", d: 30 }, enigmaberry: { a: 3, b: "Enigma Berry", c: [100, 6], n: 1 }, eviolite: { a: 5, b: "Eviolite", d: 40 }, expertbelt: { a: 4, b: "Expert Belt", d: 10 }, fairiumz: { a: 7, b: "Fairium Z", g: 1, d: 90, o: 1 }, fairygem: { a: 6, b: "Fairy Gem", m: 17 }, fairymemory: { a: 7, b: "Fairy Memory", i: 17, d: 50 }, fastball: { a: 2, b: "Fast Ball" }, fightinggem: { a: 5, b: "Fighting Gem", m: 1 }, fightingmemory: { a: 7, b: "Fighting Memory", i: 1, d: 50 }, fightiniumz: { a: 7, b: "Fightinium Z", g: 1, d: 90, o: 1 }, figyberry: { a: 3, b: "Figy Berry", c: [80, 6], n: 1 }, firegem: { a: 5, b: "Fire Gem", m: 9 }, firememory: { a: 7, b: "Fire Memory", i: 9, d: 50 }, firiumz: { a: 7, b: "Firium Z", g: 1, d: 90, o: 1 }, fistplate: { a: 4, b: "Fist Plate", g: 1, d: 90, k: 1 }, flameorb: { a: 4, b: "Flame Orb", d: 30 }, flameplate: { a: 4, b: "Flame Plate", g: 1, d: 90, k: 9 }, floatstone: { a: 5, b: "Float Stone", d: 30 }, flyinggem: { a: 5, b: "Flying Gem", m: 2 }, flyingmemory: { a: 7, b: "Flying Memory", i: 2, d: 50 }, flyiniumz: { a: 7, b: "Flyinium Z", g: 1, d: 90, o: 1 }, focusband: { a: 2, b: "Focus Band", d: 10 }, focussash: { a: 4, b: "Focus Sash", d: 10 }, friendball: { a: 2, b: "Friend Ball" }, fullincense: { a: 4, b: "Full Incense", d: 10 }, galladite: { a: 6, b: "Galladite", e: "gallademega" }, ganlonberry: { a: 3, b: "Ganlon Berry", c: [100, 14], n: 1 }, garchompite: { a: 6, b: "Garchompite", e: "garchompmega" }, gardevoirite: { a: 6, b: "Gardevoirite", e: "gardevoirmega" }, gengarite: { a: 6, b: "Gengarite", e: "gengarmega" }, ghostgem: { a: 5, b: "Ghost Gem", m: 7 }, ghostmemory: { a: 7, b: "Ghost Memory", i: 7, d: 50 }, ghostiumz: { a: 7, b: "Ghostium Z", g: 1, d: 90, o: 1 }, glalitite: { a: 6, b: "Glalitite", e: "glaliemega" }, grassgem: { a: 5, b: "Grass Gem", m: 11 }, grassmemory: { a: 7, b: "Grass Memory", i: 11, d: 50 }, grassiumz: { a: 7, b: "Grassium Z", g: 1, d: 90, o: 1 }, grassyseed: { a: 7, b: "Grassy Seed", d: 10 }, greatball: { a: 1, b: "Great Ball" }, grepaberry: { a: 3, b: "Grepa Berry", c: [90, 2], n: 1 }, gripclaw: { a: 4, b: "Grip Claw", d: 90 }, griseousorb: { a: 4, b: "Griseous Orb", d: 60 }, groundgem: { a: 5, b: "Ground Gem", m: 4 }, groundmemory: { a: 7, b: "Ground Memory", i: 4, d: 50 }, groundiumz: { a: 7, b: "Groundium Z", g: 1, d: 90, o: 1 }, gyaradosite: { a: 6, b: "Gyaradosite", e: "gyaradosmega" }, habanberry: { a: 4, b: "Haban Berry", c: [80, 15], l: 15, n: 1 }, hardstone: { a: 2, b: "Hard Stone", d: 100, k: 5 }, healball: { a: 4, b: "Heal Ball" }, heatrock: { a: 4, b: "Heat Rock", d: 60 }, heavyball: { a: 2, b: "Heavy Ball" }, helixfossil: { a: 3, b: "Helix Fossil", d: 100 }, heracronite: { a: 6, b: "Heracronite", e: "heracrossmega" }, hondewberry: { a: 3, b: "Hondew Berry", c: [90, 4], n: 1 }, houndoominite: { a: 6, b: "Houndoominite", e: "houndoommega" }, iapapaberry: { a: 3, b: "Iapapa Berry", c: [80, 16], n: 1 }, icegem: { a: 5, b: "Ice Gem", m: 14 }, icememory: { a: 7, b: "Ice Memory", i: 14, d: 50 }, icicleplate: { a: 4, b: "Icicle Plate", g: 1, d: 90, k: 14 }, iciumz: { a: 7, b: "Icium Z", g: 1, d: 90, o: 1 }, icyrock: { a: 4, b: "Icy Rock", d: 40 }, inciniumz: { a: 7, b: "Incinium Z", o: ["maliciousmoonsault", "darkestlariat"] }, insectplate: { a: 4, b: "Insect Plate", g: 1, d: 90, k: 6 }, ironball: { a: 4, b: "Iron Ball", d: 130, j: 1 }, ironplate: { a: 4, b: "Iron Plate", g: 1, d: 90, k: 8 }, jabocaberry: { a: 4, b: "Jaboca Berry", c: [100, 15], n: 1 }, kasibberry: { a: 4, b: "Kasib Berry", c: [80, 7], l: 7, n: 1 }, kebiaberry: { a: 4, b: "Kebia Berry", c: [80, 3], l: 3, n: 1 }, keeberry: { a: 6, b: "Kee Berry", c: [100, 17], n: 1 }, kelpsyberry: { a: 3, b: "Kelpsy Berry", c: [90, 1], n: 1 }, kangaskhanite: { a: 6, b: "Kangaskhanite", e: "kangaskhanmega" }, kingsrock: { a: 2, b: "King's Rock", d: 30 }, kommoniumz: { a: 7, b: "Kommonium Z", o: ["clangoroussoulblaze", "clangingscales"] }, laggingtail: { a: 4, b: "Lagging Tail", d: 10 }, lansatberry: { a: 3, b: "Lansat Berry", c: [100, 2], n: 1 }, latiasite: { a: 6, b: "Latiasite", e: "latiasmega" }, latiosite: { a: 6, b: "Latiosite", e: "latiosmega" }, laxincense: { a: 3, b: "Lax Incense", d: 10 }, leftovers: { a: 2, b: "Leftovers", d: 10 }, leppaberry: { a: 3, b: "Leppa Berry", c: [80, 1], n: 1 }, levelball: { a: 2, b: "Level Ball" }, liechiberry: { a: 3, b: "Liechi Berry", c: [100, 11], n: 1 }, lifeorb: { a: 4, b: "Life Orb", d: 30 }, lightball: { a: 2, b: "Light Ball", d: 30 }, lightclay: { a: 4, b: "Light Clay", d: 30 }, lopunnite: { a: 6, b: "Lopunnite", e: "lopunnymega" }, loveball: { a: 2, b: "Love Ball" }, lucarionite: { a: 6, b: "Lucarionite", e: "lucariomega" }, luckypunch: { a: 2, b: "Lucky Punch", d: 40 }, lumberry: { a: 3, b: "Lum Berry", c: [80, 2], n: 1 }, luminousmoss: { a: 6, b: "Luminous Moss", d: 30 }, lunaliumz: { a: 7, b: "Lunalium Z", o: ["menacingmoonrazemaelstrom", "moongeistbeam"] }, lureball: { a: 2, b: "Lure Ball" }, lustrousorb: { a: 4, b: "Lustrous Orb", d: 60 }, luxuryball: { a: 3, b: "Luxury Ball" }, lycaniumz: { a: 7, b: "Lycanium Z", o: ["splinteredstormshards", "stoneedge"] }, machobrace: { a: 3, b: "Macho Brace", d: 60, j: 1 }, magnet: { a: 2, b: "Magnet", d: 30, k: 12 }, magoberry: { a: 3, b: "Mago Berry", c: [80, 7], n: 1 }, magostberry: { a: 3, b: "Magost Berry", c: [90, 5], n: 1 }, mail: { a: 2, b: "Mail" }, manectite: { a: 6, b: "Manectite", e: "manectricmega" }, marangaberry: { a: 6, b: "Maranga Berry", c: [100, 16], n: 1 }, marshadiumz: { a: 7, b: "Marshadium Z", o: ["soulstealing7starstrike", "spectralthief"] }, masterball: { a: 1, b: "Master Ball" }, mawilite: { a: 6, b: "Mawilite", e: "mawilemega" }, meadowplate: { a: 4, b: "Meadow Plate", g: 1, d: 90, k: 11 }, medichamite: { a: 6, b: "Medichamite", e: "medichammega" }, mentalherb: { a: 3, b: "Mental Herb", d: 10 }, metagrossite: { a: 6, b: "Metagrossite", e: "metagrossmega" }, metalcoat: { a: 2, b: "Metal Coat", d: 30, k: 8 }, metalpowder: { a: 2, b: "Metal Powder", d: 10 }, metronome: { a: 4, b: "Metronome", d: 30 }, mewniumz: { a: 7, b: "Mewnium Z", o: ["genesissupernova", "psychic"] }, mewtwonitex: { a: 6, b: "Mewtwonite X", e: "mewtwomegax" }, mewtwonitey: { a: 6, b: "Mewtwonite Y", e: "mewtwomegay" }, micleberry: { a: 4, b: "Micle Berry", c: [100, 5], n: 1 }, mimikiumz: { a: 7, b: "Mimikium Z", o: ["letssnuggleforever", "playrough"] }, mindplate: { a: 4, b: "Mind Plate", g: 1, d: 90, k: 13 }, miracleseed: { a: 2, b: "Miracle Seed", d: 30, k: 11 }, mistyseed: { a: 7, b: "Misty Seed", d: 10 }, moonball: { a: 2, b: "Moon Ball" }, muscleband: { a: 4, b: "Muscle Band", d: 10 }, mysticwater: { a: 2, b: "Mystic Water", d: 30, k: 10 }, nanabberry: { a: 3, b: "Nanab Berry", c: [90, 10], n: 1 }, nestball: { a: 3, b: "Nest Ball" }, netball: { a: 3, b: "Net Ball" }, nevermeltice: { a: 2, b: "Never-Melt Ice", d: 30, k: 14 }, nomelberry: { a: 3, b: "Nomel Berry", c: [90, 15], n: 1 }, normalgem: { a: 5, b: "Normal Gem", m: 0 }, normaliumz: { a: 7, b: "Normalium Z", o: 1 }, occaberry: { a: 4, b: "Occa Berry", c: [80, 9], l: 9, n: 1 }, oddincense: { a: 4, b: "Odd Incense", d: 10, k: 13 }, oldamber: { a: 3, b: "Old Amber", d: 100 }, oranberry: { a: 3, b: "Oran Berry", c: [80, 3], n: 1 }, pamtreberry: { a: 3, b: "Pamtre Berry", c: [90, 8], n: 1 }, parkball: { a: 4, b: "Park Ball" }, passhoberry: { a: 4, b: "Passho Berry", c: [80, 10], l: 10, n: 1 }, payapaberry: { a: 4, b: "Payapa Berry", c: [80, 13], l: 13, n: 1 }, pechaberry: { a: 3, b: "Pecha Berry", c: [80, 12], n: 1 }, persimberry: { a: 3, b: "Persim Berry", c: [80, 4], n: 1 }, petayaberry: { a: 3, b: "Petaya Berry", c: [100, 3], n: 1 }, pidgeotite: { a: 6, b: "Pidgeotite", e: "pidgeotmega" }, pikaniumz: { a: 7, b: "Pikanium Z", o: ["catastropika", "volttackle"] }, pikashuniumz: { a: 7, b: "Pikashunium Z", o: ["10000000voltthunderbolt", "thunderbolt"] }, pinapberry: { a: 3, b: "Pinap Berry", c: [90, 11], n: 1 }, pinsirite: { a: 6, b: "Pinsirite", e: "pinsirmega" }, pixieplate: { a: 6, b: "Pixie Plate", g: 1, d: 90, k: 17 }, plumefossil: { a: 5, b: "Plume Fossil", d: 100 }, poisonbarb: { a: 2, b: "Poison Barb", d: 70, k: 3 }, poisongem: { a: 5, b: "Poison Gem", m: 3 }, poisonmemory: { a: 7, b: "Poison Memory", i: 3, d: 50 }, poisoniumz: { a: 7, b: "Poisonium Z", g: 1, d: 90, o: 1 }, pokeball: { a: 1, b: "Poke Ball" }, pomegberry: { a: 3, b: "Pomeg Berry", c: [90, 14], n: 1 }, poweranklet: { a: 4, b: "Power Anklet", d: 70, j: 1 }, powerband: { a: 4, b: "Power Band", d: 70, j: 1 }, powerbelt: { a: 4, b: "Power Belt", d: 70, j: 1 }, powerbracer: { a: 4, b: "Power Bracer", d: 70, j: 1 }, powerherb: { a: 4, b: "Power Herb", d: 10 }, powerlens: { a: 4, b: "Power Lens", d: 70, j: 1 }, powerweight: { a: 4, b: "Power Weight", d: 70, j: 1 }, premierball: { a: 3, b: "Premier Ball" }, primariumz: { a: 7, b: "Primarium Z", o: ["oceanicoperetta", "sparklingaria"] }, protectivepads: { a: 7, b: "Protective Pads", d: 30 }, psychicgem: { a: 5, b: "Psychic Gem", m: 13 }, psychicmemory: { a: 7, b: "Psychic Memory", i: 13, d: 50 }, psychicseed: { a: 7, b: "Psychic Seed", d: 10 }, psychiumz: { a: 7, b: "Psychium Z", g: 1, d: 90, o: 1 }, qualotberry: { a: 3, b: "Qualot Berry", c: [90, 3], n: 1 }, quickball: { a: 4, b: "Quick Ball" }, quickclaw: { a: 2, b: "Quick Claw", d: 80 }, quickpowder: { a: 4, b: "Quick Powder", d: 10 }, rabutaberry: { a: 3, b: "Rabuta Berry", c: [90, 7], n: 1 }, rarebone: { a: 4, b: "Rare Bone", d: 100 }, rawstberry: { a: 3, b: "Rawst Berry", c: [80, 11], n: 1 }, razorclaw: { a: 4, b: "Razor Claw", d: 80 }, razorfang: { a: 4, b: "Razor Fang", d: 30 }, razzberry: { a: 3, b: "Razz Berry", c: [80, 8], n: 1 }, redcard: { a: 5, b: "Red Card", d: 10 }, redorb: { a: 6, b: "Red Orb" }, repeatball: { a: 3, b: "Repeat Ball" }, rindoberry: { a: 4, b: "Rindo Berry", c: [80, 11], l: 11, n: 1 }, ringtarget: { a: 5, b: "Ring Target", d: 10 }, rockgem: { a: 5, b: "Rock Gem", m: 5 }, rockincense: { a: 4, b: "Rock Incense", d: 10, k: 5 }, rockmemory: { a: 7, b: "Rock Memory", i: 5, d: 50 }, rockiumz: { a: 7, b: "Rockium Z", g: 1, d: 90, o: 1 }, rockyhelmet: { a: 5, b: "Rocky Helmet", d: 60 }, rootfossil: { a: 3, b: "Root Fossil", d: 100 }, roseincense: { a: 4, b: "Rose Incense", d: 10, k: 11 }, roseliberry: { a: 6, b: "Roseli Berry", c: [80, 17], l: 17, n: 1 }, rowapberry: { a: 4, b: "Rowap Berry", c: [100, 16], n: 1 }, sablenite: { a: 6, b: "Sablenite", e: "sableyemega" }, safariball: { a: 1, b: "Safari Ball" }, safetygoggles: { a: 6, b: "Safety Goggles", d: 80 }, salacberry: { a: 3, b: "Salac Berry", c: [100, 1], n: 1 }, salamencite: { a: 6, b: "Salamencite", e: "salamencemega" }, sceptilite: { a: 6, b: "Sceptilite", e: "sceptilemega" }, scizorite: { a: 6, b: "Scizorite", e: "scizormega" }, scopelens: { a: 2, b: "Scope Lens", d: 30 }, seaincense: { a: 3, b: "Sea Incense", d: 10, k: 10 }, sharpbeak: { a: 2, b: "Sharp Beak", d: 50, k: 2 }, sharpedonite: { a: 6, b: "Sharpedonite", e: "sharpedomega" }, shedshell: { a: 4, b: "Shed Shell", d: 10 }, shellbell: { a: 3, b: "Shell Bell", d: 30 }, shockdrive: { a: 5, b: "Shock Drive", d: 70 }, shucaberry: { a: 4, b: "Shuca Berry", c: [80, 4], l: 4, n: 1 }, silkscarf: { a: 3, b: "Silk Scarf", d: 10, k: 0 }, silverpowder: { a: 2, b: "SilverPowder", d: 10, k: 6 }, sitrusberry: { a: 3, b: "Sitrus Berry", c: [80, 13], n: 1 }, skullfossil: { a: 4, b: "Skull Fossil", d: 100 }, skyplate: { a: 4, b: "Sky Plate", g: 1, d: 90, k: 2 }, slowbronite: { a: 6, b: "Slowbronite", e: "slowbromega" }, smoothrock: { a: 4, b: "Smooth Rock", d: 10 }, snorliumz: { a: 7, b: "Snorlium Z", o: ["pulverizingpancake", "gigaimpact"] }, snowball: { a: 6, b: "Snowball", d: 30 }, softsand: { a: 2, b: "Soft Sand", d: 10, k: 4 }, solganiumz: { a: 7, b: "Solganium Z", o: ["searingsunrazesmash", "sunsteelstrike"] }, souldew: { a: 3, b: "Soul Dew", d: 30 }, spelltag: { a: 2, b: "Spell Tag", d: 30, k: 7 }, spelonberry: { a: 3, b: "Spelon Berry", c: [90, 16], n: 1 }, splashplate: { a: 4, b: "Splash Plate", g: 1, d: 90, k: 10 }, spookyplate: { a: 4, b: "Spooky Plate", g: 1, d: 90, k: 7 }, sportball: { a: 2, b: "Sport Ball" }, starfberry: { a: 3, b: "Starf Berry", c: [100, 13], n: 1 }, steelixite: { a: 6, b: "Steelixite", e: "steelixmega" }, steelgem: { a: 5, b: "Steel Gem", m: 8 }, steelmemory: { a: 7, b: "Steel Memory", i: 8, d: 50 }, steeliumz: { a: 7, b: "Steelium Z", g: 1, d: 90, o: 1 }, stick: { a: 2, b: "Stick", d: 60 }, stickybarb: { a: 4, b: "Sticky Barb", d: 80 }, stoneplate: { a: 4, b: "Stone Plate", g: 1, d: 90, k: 5 }, swampertite: { a: 6, b: "Swampertite", e: "swampertmega" }, tamatoberry: { a: 3, b: "Tamato Berry", c: [90, 13], n: 1 }, tangaberry: { a: 4, b: "Tanga Berry", c: [80, 6], l: 6, n: 1 }, tapuniumz: { a: 7, b: "Tapunium Z", o: ["guardianofalola", "naturesmadness"] }, terrainextender: { a: 7, b: "Terrain Extender", d: 60 }, thickclub: { a: 2, b: "Thick Club", d: 90 }, timerball: { a: 3, b: "Timer Ball" }, toxicorb: { a: 4, b: "Toxic Orb", d: 30 }, toxicplate: { a: 4, b: "Toxic Plate", g: 1, d: 90, k: 3 }, twistedspoon: { a: 2, b: "Twisted Spoon", d: 30, k: 13 }, tyranitarite: { a: 6, b: "Tyranitarite", e: "tyranitarmega" }, ultraball: { a: 1, b: "Ultra Ball" }, ultranecroziumz: { a: 7, b: "Ultranecrozium Z", o: ["lightthatburnsthesky", "photongeyser"] }, venusaurite: { a: 6, b: "Venusaurite", e: "venusaurmega" }, wacanberry: { a: 4, b: "Wacan Berry", c: [80, 12], l: 12, n: 1 }, watergem: { a: 5, b: "Water Gem", m: 10 }, watermemory: { a: 7, b: "Water Memory", i: 10, d: 50 }, wateriumz: { a: 7, b: "Waterium Z", g: 1, d: 90, o: 1 }, watmelberry: { a: 3, b: "Watmel Berry", c: [100, 9], n: 1 }, waveincense: { a: 4, b: "Wave Incense", d: 10, k: 10 }, weaknesspolicy: { a: 6, b: "Weakness Policy", d: 80 }, wepearberry: { a: 3, b: "Wepear Berry", c: [90, 12], n: 1 }, whiteherb: { a: 3, b: "White Herb", d: 10 }, widelens: { a: 4, b: "Wide Lens", d: 10 }, wikiberry: { a: 3, b: "Wiki Berry", c: [80, 5], n: 1 }, wiseglasses: { a: 4, b: "Wise Glasses", d: 10 }, yacheberry: { a: 4, b: "Yache Berry", c: [80, 14], l: 14, n: 1 }, zapplate: { a: 4, b: "Zap Plate", g: 1, d: 90, k: 12 }, zoomlens: { a: 4, b: "Zoom Lens", d: 10 }, berserkgene: { a: 2, b: "Berserk Gene" }, berry: { a: 2, b: "Berry", c: [80, 3], n: 1 }, bitterberry: { a: 2, b: "Bitter Berry", c: [80, 4], n: 1 }, burntberry: { a: 2, b: "Burnt Berry", c: [80, 14], n: 1 }, dragonscale: { a: 2, b: "Dragon Scale", k: 15 }, goldberry: { a: 2, b: "Gold Berry", c: [80, 13], n: 1 }, iceberry: { a: 2, b: "Ice Berry", c: [80, 11], n: 1 }, mintberry: { a: 2, b: "Mint Berry", c: [80, 10], n: 1 }, miracleberry: { a: 2, b: "Miracle Berry", c: [80, 2], n: 1 }, mysteryberry: { a: 2, b: "Mystery Berry", c: [80, 1], n: 1 }, pinkbow: { a: 2, b: "Pink Bow", k: 0 }, polkadotbow: { a: 2, b: "Polkadot Bow", k: 0 }, przcureberry: { a: 2, b: "PRZ Cure Berry", c: [80, 9], n: 1 }, psncureberry: { a: 2, b: "PSN Cure Berry", c: [80, 12], n: 1 }, noitem: { name: "(No Item)", d: 0 } }, moves: { "10000000voltthunderbolt": { a: 7, b: "10,000,000 Volt Thunderbolt", c: 195, d: 12, e: 2 }, absorb: { a: 1, b: "Absorb", c: 20, d: 11, e: 2, h: 100, k: 100 }, accelerock: { a: 7, b: "Accelerock", c: 40, d: 5, e: 1, g: 1, h: 100, k: 100, D: 1 }, acid: { a: 1, b: "Acid", c: 40, d: 3, e: 2, h: 100, j: 1, k: 100, l: { a: 10, e: [0, 0, 0, 0, -1, 0] } }, acidarmor: { a: 1, b: "Acid Armor", c: 0, d: 3, e: 0 }, aciddownpour: { a: 7, b: "Acid Downpour", c: 1, d: 3, e: 1 }, acidspray: { a: 5, b: "Acid Spray", c: 40, d: 3, e: 2, h: 100, k: 100, l: { a: 100, e: [0, 0, 0, 0, -2, 0] }, B: 1 }, acrobatics: { a: 5, b: "Acrobatics", c: 55, d: 2, e: 1, h: 100, k: 100, D: 1 }, acupressure: { a: 4, b: "Acupressure", c: 0, d: 0, e: 0 }, aerialace: { a: 3, b: "Aerial Ace", c: 60, d: 2, e: 1, k: 120, D: 1 }, aeroblast: { a: 2, b: "Aeroblast", c: 100, d: 2, e: 2, h: 95, k: 180 }, afteryou: { a: 5, b: "After You", c: 0, d: 0, e: 0 }, agility: { a: 1, b: "Agility", c: 0, d: 13, e: 0 }, aircutter: { a: 3, b: "Air Cutter", c: 60, d: 2, e: 2, h: 95, j: 1, k: 120 }, airslash: { a: 4, b: "Air Slash", c: 75, d: 2, e: 2, h: 95, k: 140, l: { a: 30, c: 1 } }, alloutpummeling: { a: 7, b: "All-Out Pummeling", c: 1, d: 1, e: 1 }, allyswitch: { a: 5, b: "Ally Switch", c: 0, d: 13, e: 0, g: 2 }, amnesia: { a: 1, b: "Amnesia", c: 0, d: 13, e: 0 }, anchorshot: { a: 7, b: "Anchor Shot", c: 80, d: 8, e: 1, h: 100, k: 160, l: { a: 100 }, D: 1 }, ancientpower: { a: 2, b: "Ancient Power", c: 60, d: 5, e: 2, h: 100, k: 120, l: { a: 10, f: [0, 1, 1, 1, 1, 1] } }, aquajet: { a: 4, b: "Aqua Jet", c: 40, d: 10, e: 1, g: 1, h: 100, k: 100, D: 1 }, aquaring: { a: 4, b: "Aqua Ring", c: 0, d: 10, e: 0 }, aquatail: { a: 4, b: "Aqua Tail", c: 90, d: 10, e: 1, h: 90, k: 175, D: 1 }, armthrust: { a: 3, b: "Arm Thrust", c: 15, d: 1, e: 1, h: 100, i: [2, 5], k: 100, D: 1 }, aromatherapy: { a: 3, b: "Aromatherapy", c: 0, d: 11, e: 0 }, aromaticmist: { a: 6, b: "Aromatic Mist", c: 0, d: 17, e: 0 }, assist: { a: 3, b: "Assist", c: 0, d: 0, e: 0 }, assurance: { a: 4, b: "Assurance", c: 60, d: 16, e: 1, h: 100, k: 120, D: 1 }, astonish: { a: 3, b: "Astonish", c: 30, d: 7, e: 1, h: 100, k: 100, l: { a: 30, c: 1 }, D: 1 }, attackorder: { a: 4, b: "Attack Order", c: 90, d: 6, e: 1, h: 100, k: 175 }, attract: { a: 2, b: "Attract", c: 0, d: 0, e: 0, h: 100 }, aurasphere: { a: 4, b: "Aura Sphere", c: 80, d: 1, e: 2, k: 160, B: 1, F: 1 }, aurorabeam: { a: 1, b: "Aurora Beam", c: 65, d: 14, e: 2, h: 100, k: 120, l: { a: 10, e: [0, -1, 0, 0, 0, 0] } }, auroraveil: { a: 7, b: "Aurora Veil", c: 0, d: 14, e: 0 }, autotomize: { a: 5, b: "Autotomize", c: 0, d: 8, e: 0 }, avalanche: { a: 4, b: "Avalanche", c: 60, d: 14, e: 1, g: -4, h: 100, k: 120, D: 1 }, babydolleyes: { a: 6, b: "Baby-Doll Eyes", c: 0, d: 17, e: 0, g: 1, h: 100 }, banefulbunker: { a: 7, b: "Baneful Bunker", c: 0, d: 3, e: 0, g: 4 }, barrage: { a: 1, b: "Barrage", c: 15, d: 0, e: 1, h: 85, i: [2, 5], k: 100, B: 1 }, barrier: { a: 1, b: "Barrier", c: 0, d: 13, e: 0 }, batonpass: { a: 2, b: "Baton Pass", c: 0, d: 0, e: 0 }, beakblast: { a: 7, b: "Beak Blast", c: 100, d: 2, e: 1, g: -3, h: 100, k: 180, B: 1 }, beatup: { a: 2, b: "Beat Up", c: 0, d: 16, e: 1, h: 100, k: 100 }, belch: { a: 6, b: "Belch", c: 120, d: 3, e: 2, h: 90, k: 190 }, bellydrum: { a: 2, b: "Belly Drum", c: 0, d: 0, e: 0 }, bestow: { a: 5, b: "Bestow", c: 0, d: 0, e: 0 }, bide: { a: 1, b: "Bide", c: 0, d: 0, e: 1, g: 1, k: 100, D: 1 }, bind: { a: 1, b: "Bind", c: 15, d: 0, e: 1, h: 85, k: 100, D: 1 }, bite: { a: 1, b: "Bite", c: 60, d: 16, e: 1, h: 100, k: 120, l: { a: 30, c: 1 }, A: 1, D: 1 }, blackholeeclipse: { a: 7, b: "Black Hole Eclipse", c: 1, d: 16, e: 1 }, blastburn: { a: 3, b: "Blast Burn", c: 150, d: 9, e: 2, h: 90, k: 200, H: 1 }, blazekick: { a: 3, b: "Blaze Kick", c: 85, d: 9, e: 1, h: 90, k: 160, l: { a: 10, b: 3 }, D: 1 }, blizzard: { a: 1, b: "Blizzard", c: 110, d: 14, e: 2, h: 70, j: 1, k: 185, l: { a: 10, b: 6 } }, block: { a: 3, b: "Block", c: 0, d: 0, e: 0 }, bloomdoom: { a: 7, b: "Bloom Doom", c: 1, d: 11, e: 1 }, blueflare: { a: 5, b: "Blue Flare", c: 130, d: 9, e: 2, h: 85, k: 195, l: { a: 20, b: 3 } }, bodyslam: { a: 1, b: "Body Slam", c: 85, d: 0, e: 1, h: 100, k: 160, l: { a: 30, b: 4 }, D: 1 }, boltstrike: { a: 5, b: "Bolt Strike", c: 130, d: 12, e: 1, h: 85, k: 195, l: { a: 20, b: 4 }, D: 1 }, boneclub: { a: 1, b: "Bone Club", c: 65, d: 4, e: 1, h: 85, k: 120, l: { a: 10, c: 1 } }, bonerush: { a: 2, b: "Bone Rush", c: 25, d: 4, e: 1, h: 90, i: [2, 5], k: 140 }, bonemerang: { a: 1, b: "Bonemerang", c: 50, d: 4, e: 1, h: 90, i: [2, 2], k: 100 }, boomburst: { a: 6, b: "Boomburst", c: 140, d: 0, e: 2, h: 100, j: 1, k: 200, I: 1 }, bounce: { a: 3, b: "Bounce", c: 85, d: 2, e: 1, h: 85, k: 160, l: { a: 30, b: 4 }, C: 1, D: 1 }, bravebird: { a: 4, b: "Brave Bird", c: 120, d: 2, e: 1, h: 100, k: 190, m: [33, 100], D: 1 }, breakneckblitz: { a: 7, b: "Breakneck Blitz", c: 1, d: 0, e: 1 }, brickbreak: { a: 3, b: "Brick Break", c: 75, d: 1, e: 1, h: 100, k: 140, D: 1 }, brine: { a: 4, b: "Brine", c: 65, d: 10, e: 2, h: 100, k: 120 }, brutalswing: { a: 7, b: "Brutal Swing", c: 60, d: 16, e: 1, h: 100, j: 1, k: 120, D: 1 }, bubble: { a: 1, b: "Bubble", c: 40, d: 10, e: 2, h: 100, j: 1, k: 100, l: { a: 10, e: [0, 0, 0, 0, 0, -1] } }, bubblebeam: { a: 1, b: "Bubble Beam", c: 65, d: 10, e: 2, h: 100, k: 120, l: { a: 10, e: [0, 0, 0, 0, 0, -1] } }, bugbite: { a: 4, b: "Bug Bite", c: 60, d: 6, e: 1, h: 100, k: 120, D: 1 }, bugbuzz: { a: 4, b: "Bug Buzz", c: 90, d: 6, e: 2, h: 100, k: 175, l: { a: 10, e: [0, 0, 0, 0, -1, 0] }, I: 1 }, bulkup: { a: 3, b: "Bulk Up", c: 0, d: 1, e: 0 }, bulldoze: { a: 5, b: "Bulldoze", c: 60, d: 4, e: 1, h: 100, j: 1, k: 120, l: { a: 100, e: [0, 0, 0, 0, 0, -1] } }, bulletpunch: { a: 4, b: "Bullet Punch", c: 40, d: 8, e: 1, g: 1, h: 100, k: 100, D: 1, G: 1 }, bulletseed: { a: 3, b: "Bullet Seed", c: 25, d: 11, e: 1, h: 100, i: [2, 5], k: 140, B: 1 }, burnup: { a: 7, b: "Burn Up", c: 130, d: 9, e: 2, h: 100, k: 195 }, calmmind: { a: 3, b: "Calm Mind", c: 0, d: 13, e: 0 }, camouflage: { a: 3, b: "Camouflage", c: 0, d: 0, e: 0 }, captivate: { a: 4, b: "Captivate", c: 0, d: 0, e: 0, h: 100, j: 1 }, catastropika: { a: 7, b: "Catastropika", c: 210, d: 12, e: 1, D: 1 }, celebrate: { a: 6, b: "Celebrate", c: 0, d: 0, e: 0 }, charge: { a: 3, b: "Charge", c: 0, d: 12, e: 0 }, chargebeam: { a: 4, b: "Charge Beam", c: 50, d: 12, e: 2, h: 90, k: 100, l: { a: 70, f: [0, 0, 0, 1, 0, 0] } }, charm: { a: 2, b: "Charm", c: 0, d: 17, e: 0, h: 100 }, chatter: { a: 4, b: "Chatter", c: 65, d: 2, e: 2, h: 100, k: 120, l: { a: 100, d: 1 }, I: 1 }, chipaway: { a: 5, b: "Chip Away", c: 70, d: 0, e: 1, h: 100, k: 140, D: 1 }, circlethrow: { a: 5, b: "Circle Throw", c: 60, d: 1, e: 1, g: -6, h: 90, k: 120, D: 1 }, clamp: { a: 1, b: "Clamp", c: 35, d: 10, e: 1, h: 85, k: 100, D: 1 }, clangingscales: { a: 7, b: "Clanging Scales", c: 110, d: 15, e: 2, h: 100, j: 1, k: 185, I: 1 }, clangoroussoulblaze: { a: 7, b: "Clangorous Soulblaze", c: 185, d: 15, e: 2, j: 1, I: 1 }, clearsmog: { a: 5, b: "Clear Smog", c: 50, d: 3, e: 2, k: 100 }, closecombat: { a: 4, b: "Close Combat", c: 120, d: 1, e: 1, h: 100, k: 190, D: 1 }, coil: { a: 5, b: "Coil", c: 0, d: 3, e: 0 }, cometpunch: { a: 1, b: "Comet Punch", c: 18, d: 0, e: 1, h: 85, i: [2, 5], k: 100, D: 1, G: 1 }, confide: { a: 6, b: "Confide", c: 0, d: 0, e: 0, I: 1 }, confuseray: { a: 1, b: "Confuse Ray", c: 0, d: 7, e: 0, h: 100 }, confusion: { a: 1, b: "Confusion", c: 50, d: 13, e: 2, h: 100, k: 100, l: { a: 10, d: 1 } }, constrict: { a: 1, b: "Constrict", c: 10, d: 0, e: 1, h: 100, k: 100, l: { a: 10, e: [0, 0, 0, 0, 0, -1] }, D: 1 }, continentalcrush: { a: 7, b: "Continental Crush", c: 1, d: 5, e: 1 }, conversion: { a: 1, b: "Conversion", c: 0, d: 0, e: 0 }, conversion2: { a: 2, b: "Conversion 2", c: 0, d: 0, e: 0 }, copycat: { a: 4, b: "Copycat", c: 0, d: 0, e: 0 }, coreenforcer: { a: 7, b: "Core Enforcer", c: 100, d: 15, e: 2, h: 100, j: 1, k: 140 }, corkscrewcrash: { a: 7, b: "Corkscrew Crash", c: 1, d: 8, e: 1 }, cosmicpower: { a: 3, b: "Cosmic Power", c: 0, d: 13, e: 0 }, cottonguard: { a: 5, b: "Cotton Guard", c: 0, d: 11, e: 0 }, cottonspore: { a: 2, b: "Cotton Spore", c: 0, d: 11, e: 0, h: 100, j: 1, E: 1 }, counter: { a: 1, b: "Counter", c: 0, d: 1, e: 1, g: -5, h: 100, k: 100, D: 1 }, covet: { a: 3, b: "Covet", c: 60, d: 0, e: 1, h: 100, k: 120, D: 1 }, crabhammer: { a: 1, b: "Crabhammer", c: 100, d: 10, e: 1, h: 90, k: 180, D: 1 }, craftyshield: { a: 6, b: "Crafty Shield", c: 0, d: 17, e: 0, g: 3 }, crosschop: { a: 2, b: "Cross Chop", c: 100, d: 1, e: 1, h: 80, k: 180, D: 1 }, crosspoison: { a: 4, b: "Cross Poison", c: 70, d: 3, e: 1, h: 100, k: 140, l: { a: 10, b: 1 }, D: 1 }, crunch: { a: 2, b: "Crunch", c: 80, d: 16, e: 1, h: 100, k: 160, l: { a: 20, e: [0, 0, -1, 0, 0, 0] }, A: 1, D: 1 }, crushclaw: { a: 3, b: "Crush Claw", c: 75, d: 0, e: 1, h: 95, k: 140, l: { a: 50, e: [0, 0, -1, 0, 0, 0] }, D: 1 }, crushgrip: { a: 4, b: "Crush Grip", c: 0, d: 0, e: 1, h: 100, k: 190, D: 1 }, curse: { a: 2, b: "Curse", c: 0, d: 7, e: 0 }, cut: { a: 1, b: "Cut", c: 50, d: 0, e: 1, h: 95, k: 100, D: 1 }, darkpulse: { a: 4, b: "Dark Pulse", c: 80, d: 16, e: 2, h: 100, k: 160, l: { a: 20, c: 1 }, F: 1 }, darkvoid: { a: 4, b: "Dark Void", c: 0, d: 16, e: 0, h: 50, j: 1 }, darkestlariat: { a: 7, b: "Darkest Lariat", c: 85, d: 16, e: 1, h: 100, k: 160, D: 1 }, dazzlinggleam: { a: 6, b: "Dazzling Gleam", c: 80, d: 17, e: 2, h: 100, j: 1, k: 160 }, defendorder: { a: 4, b: "Defend Order", c: 0, d: 6, e: 0 }, defensecurl: { a: 1, b: "Defense Curl", c: 0, d: 0, e: 0 }, defog: { a: 4, b: "Defog", c: 0, d: 2, e: 0 }, destinybond: { a: 2, b: "Destiny Bond", c: 0, d: 7, e: 0 }, detect: { a: 2, b: "Detect", c: 0, d: 1, e: 0, g: 4 }, devastatingdrake: { a: 7, b: "Devastating Drake", c: 1, d: 15, e: 1 }, diamondstorm: { a: 6, b: "Diamond Storm", c: 100, d: 5, e: 1, h: 95, j: 1, k: 180, l: { a: 50, f: [0, 0, 2, 0, 0, 0] } }, dig: { a: 1, b: "Dig", c: 80, d: 4, e: 1, h: 100, k: 160, C: 1, D: 1 }, disable: { a: 1, b: "Disable", c: 0, d: 0, e: 0, h: 100 }, disarmingvoice: { a: 6, b: "Disarming Voice", c: 40, d: 17, e: 2, j: 1, k: 100, I: 1 }, discharge: { a: 4, b: "Discharge", c: 80, d: 12, e: 2, h: 100, j: 1, k: 160, l: { a: 30, b: 4 } }, dive: { a: 3, b: "Dive", c: 80, d: 10, e: 1, h: 100, k: 160, C: 1, D: 1 }, dizzypunch: { a: 1, b: "Dizzy Punch", c: 70, d: 0, e: 1, h: 100, k: 140, l: { a: 20, d: 1 }, D: 1, G: 1 }, doomdesire: { a: 3, b: "Doom Desire", c: 140, d: 8, e: 2, h: 100, k: 200 }, doubleedge: { a: 1, b: "Double-Edge", c: 120, d: 0, e: 1, h: 100, k: 190, m: [33, 100], D: 1 }, doublehit: { a: 4, b: "Double Hit", c: 35, d: 0, e: 1, h: 90, i: [2, 2], k: 140, D: 1 }, doublekick: { a: 1, b: "Double Kick", c: 30, d: 1, e: 1, h: 100, i: [2, 2], k: 100, D: 1 }, doubleslap: { a: 1, b: "Double Slap", c: 15, d: 0, e: 1, h: 85, i: [2, 5], k: 100, D: 1 }, doubleteam: { a: 1, b: "Double Team", c: 0, d: 0, e: 0 }, dracometeor: { a: 4, b: "Draco Meteor", c: 130, d: 15, e: 2, h: 90, k: 195 }, dragonascent: { a: 6, b: "Dragon Ascent", c: 120, d: 2, e: 1, h: 100, k: 190, D: 1 }, dragonbreath: { a: 2, b: "Dragon Breath", c: 60, d: 15, e: 2, h: 100, k: 120, l: { a: 30, b: 4 } }, dragonclaw: { a: 3, b: "Dragon Claw", c: 80, d: 15, e: 1, h: 100, k: 160, D: 1 }, dragondance: { a: 3, b: "Dragon Dance", c: 0, d: 15, e: 0 }, dragonhammer: { a: 7, b: "Dragon Hammer", c: 90, d: 15, e: 1, h: 100, k: 175, D: 1 }, dragonpulse: { a: 4, b: "Dragon Pulse", c: 85, d: 15, e: 2, h: 100, k: 160, F: 1 }, dragonrage: { a: 1, b: "Dragon Rage", c: 0, d: 15, e: 2, h: 100, k: 100 }, dragonrush: { a: 4, b: "Dragon Rush", c: 100, d: 15, e: 1, h: 75, k: 180, l: { a: 20, c: 1 }, D: 1 }, dragontail: { a: 5, b: "Dragon Tail", c: 60, d: 15, e: 1, g: -6, h: 90, k: 120, D: 1 }, drainingkiss: { a: 6, b: "Draining Kiss", c: 50, d: 17, e: 2, h: 100, k: 100, D: 1 }, drainpunch: { a: 4, b: "Drain Punch", c: 75, d: 1, e: 1, h: 100, k: 140, D: 1, G: 1 }, dreameater: { a: 1, b: "Dream Eater", c: 100, d: 13, e: 2, h: 100, k: 180 }, drillpeck: { a: 1, b: "Drill Peck", c: 80, d: 2, e: 1, h: 100, k: 160, D: 1 }, drillrun: { a: 5, b: "Drill Run", c: 80, d: 4, e: 1, h: 95, k: 160, D: 1 }, dualchop: { a: 5, b: "Dual Chop", c: 40, d: 15, e: 1, h: 90, i: [2, 2], k: 100, D: 1 }, dynamicpunch: { a: 2, b: "Dynamic Punch", c: 100, d: 1, e: 1, h: 50, k: 180, l: { a: 100, d: 1 }, D: 1, G: 1 }, earthpower: { a: 4, b: "Earth Power", c: 90, d: 4, e: 2, h: 100, k: 175, l: { a: 10, e: [0, 0, 0, 0, -1, 0] } }, earthquake: { a: 1, b: "Earthquake", c: 100, d: 4, e: 1, h: 100, j: 1, k: 180 }, echoedvoice: { a: 5, b: "Echoed Voice", c: 40, d: 0, e: 2, h: 100, k: 100, I: 1 }, eerieimpulse: { a: 6, b: "Eerie Impulse", c: 0, d: 12, e: 0, h: 100 }, eggbomb: { a: 1, b: "Egg Bomb", c: 100, d: 0, e: 1, h: 75, k: 180, B: 1 }, electricterrain: { a: 6, b: "Electric Terrain", c: 0, d: 12, e: 0 }, electrify: { a: 6, b: "Electrify", c: 0, d: 12, e: 0 }, electroball: { a: 5, b: "Electro Ball", c: 0, d: 12, e: 2, h: 100, k: 160, B: 1 }, electroweb: { a: 5, b: "Electroweb", c: 55, d: 12, e: 2, h: 95, j: 1, k: 100, l: { a: 100, e: [0, 0, 0, 0, 0, -1] } }, embargo: { a: 4, b: "Embargo", c: 0, d: 16, e: 0, h: 100 }, ember: { a: 1, b: "Ember", c: 40, d: 9, e: 2, h: 100, k: 100, l: { a: 10, b: 3 } }, encore: { a: 2, b: "Encore", c: 0, d: 0, e: 0, h: 100 }, endeavor: { a: 3, b: "Endeavor", c: 0, d: 0, e: 1, h: 100, k: 160, D: 1 }, endure: { a: 2, b: "Endure", c: 0, d: 0, e: 0, g: 4 }, energyball: { a: 4, b: "Energy Ball", c: 90, d: 11, e: 2, h: 100, k: 175, l: { a: 10, e: [0, 0, 0, 0, -1, 0] }, B: 1 }, entrainment: { a: 5, b: "Entrainment", c: 0, d: 0, e: 0, h: 100 }, eruption: { a: 3, b: "Eruption", c: 150, d: 9, e: 2, h: 100, j: 1, k: 200 }, explosion: { a: 1, b: "Explosion", c: 250, d: 0, e: 1, h: 100, j: 1, k: 200 }, extrasensory: { a: 3, b: "Extrasensory", c: 80, d: 13, e: 2, h: 100, k: 160, l: { a: 10, c: 1 } }, extremeevoboost: { a: 7, b: "Extreme Evoboost", c: 0, d: 0, e: 0 }, extremespeed: { a: 2, b: "Extreme Speed", c: 80, d: 0, e: 1, g: 2, h: 100, k: 160, D: 1 }, facade: { a: 3, b: "Facade", c: 70, d: 0, e: 1, h: 100, k: 140, D: 1 }, feintattack: { a: 2, b: "Feint Attack", c: 60, d: 16, e: 1, k: 120, D: 1 }, fairylock: { a: 6, b: "Fairy Lock", c: 0, d: 17, e: 0 }, fairywind: { a: 6, b: "Fairy Wind", c: 40, d: 17, e: 2, h: 100, k: 100 }, fakeout: { a: 3, b: "Fake Out", c: 40, d: 0, e: 1, g: 3, h: 100, k: 100, l: { a: 100, c: 1 }, D: 1 }, faketears: { a: 3, b: "Fake Tears", c: 0, d: 16, e: 0, h: 100 }, falseswipe: { a: 2, b: "False Swipe", c: 40, d: 0, e: 1, h: 100, k: 100, D: 1 }, featherdance: { a: 3, b: "Feather Dance", c: 0, d: 2, e: 0, h: 100 }, feint: { a: 4, b: "Feint", c: 30, d: 0, e: 1, g: 2, h: 100, k: 100 }, fellstinger: { a: 6, b: "Fell Stinger", c: 50, d: 6, e: 1, h: 100, k: 100, D: 1 }, fierydance: { a: 5, b: "Fiery Dance", c: 80, d: 9, e: 2, h: 100, k: 160, l: { a: 50, f: [0, 0, 0, 1, 0, 0] } }, finalgambit: { a: 5, b: "Final Gambit", c: 0, d: 1, e: 2, h: 100, k: 180 }, fireblast: { a: 1, b: "Fire Blast", c: 110, d: 9, e: 2, h: 85, k: 185, l: { a: 10, b: 3 } }, firefang: { a: 4, b: "Fire Fang", c: 65, d: 9, e: 1, h: 95, k: 120, A: 1, D: 1 }, firelash: { a: 7, b: "Fire Lash", c: 80, d: 9, e: 1, h: 100, k: 160, l: { a: 100, e: [0, 0, -1, 0, 0, 0] }, D: 1 }, firepledge: { a: 5, b: "Fire Pledge", c: 80, d: 9, e: 2, h: 100, k: 160 }, firepunch: { a: 1, b: "Fire Punch", c: 75, d: 9, e: 1, h: 100, k: 140, l: { a: 10, b: 3 }, D: 1, G: 1 }, firespin: { a: 1, b: "Fire Spin", c: 35, d: 9, e: 2, h: 85, k: 100 }, firstimpression: { a: 7, b: "First Impression", c: 90, d: 6, e: 1, g: 2, h: 100, k: 175, D: 1 }, fissure: { a: 1, b: "Fissure", c: 0, d: 4, e: 1, h: 30, k: 180, n: 1 }, flail: { a: 2, b: "Flail", c: 0, d: 0, e: 1, h: 100, k: 160, D: 1 }, flameburst: { a: 5, b: "Flame Burst", c: 70, d: 9, e: 2, h: 100, k: 140 }, flamecharge: { a: 5, b: "Flame Charge", c: 50, d: 9, e: 1, h: 100, k: 100, l: { a: 100, f: [0, 0, 0, 0, 0, 1] }, D: 1 }, flamewheel: { a: 2, b: "Flame Wheel", c: 60, d: 9, e: 1, h: 100, k: 120, l: { a: 10, b: 3 }, D: 1 }, flamethrower: { a: 1, b: "Flamethrower", c: 90, d: 9, e: 2, h: 100, k: 175, l: { a: 10, b: 3 } }, flareblitz: { a: 4, b: "Flare Blitz", c: 120, d: 9, e: 1, h: 100, k: 190, l: { a: 10, b: 3 }, m: [33, 100], D: 1 }, flash: { a: 1, b: "Flash", c: 0, d: 0, e: 0, h: 100 }, flashcannon: { a: 4, b: "Flash Cannon", c: 80, d: 8, e: 2, h: 100, k: 160, l: { a: 10, e: [0, 0, 0, 0, -1, 0] } }, flatter: { a: 3, b: "Flatter", c: 0, d: 16, e: 0, h: 100 }, fleurcannon: { a: 7, b: "Fleur Cannon", c: 130, d: 17, e: 2, h: 90, k: 195 }, fling: { a: 4, b: "Fling", c: 0, d: 16, e: 1, h: 100, k: 100 }, floralhealing: { a: 7, b: "Floral Healing", c: 0, d: 17, e: 0 }, flowershield: { a: 6, b: "Flower Shield", c: 0, d: 17, e: 0 }, fly: { a: 1, b: "Fly", c: 90, d: 2, e: 1, h: 95, k: 175, C: 1, D: 1 }, flyingpress: { a: 6, b: "Flying Press", c: 100, d: 1, e: 1, h: 95, k: 170, D: 1 }, focusblast: { a: 4, b: "Focus Blast", c: 120, d: 1, e: 2, h: 70, k: 190, l: { a: 10, e: [0, 0, 0, 0, -1, 0] }, B: 1 }, focusenergy: { a: 1, b: "Focus Energy", c: 0, d: 0, e: 0 }, focuspunch: { a: 3, b: "Focus Punch", c: 150, d: 1, e: 1, g: -3, h: 100, k: 200, D: 1, G: 1 }, followme: { a: 3, b: "Follow Me", c: 0, d: 0, e: 0, g: 2 }, forcepalm: { a: 4, b: "Force Palm", c: 60, d: 1, e: 1, h: 100, k: 120, l: { a: 30, b: 4 }, D: 1 }, foresight: { a: 2, b: "Foresight", c: 0, d: 0, e: 0 }, forestscurse: { a: 6, b: "Forest's Curse", c: 0, d: 11, e: 0, h: 100 }, foulplay: { a: 5, b: "Foul Play", c: 95, d: 16, e: 1, h: 100, k: 175, D: 1 }, freezedry: { a: 6, b: "Freeze-Dry", c: 70, d: 14, e: 2, h: 100, k: 140, l: { a: 10, b: 6 } }, freezeshock: { a: 5, b: "Freeze Shock", c: 140, d: 14, e: 1, h: 90, k: 200, l: { a: 30, b: 4 }, C: 1 }, frenzyplant: { a: 3, b: "Frenzy Plant", c: 150, d: 11, e: 2, h: 90, k: 200, H: 1 }, frostbreath: { a: 5, b: "Frost Breath", c: 60, d: 14, e: 2, h: 90, k: 120 }, frustration: { a: 2, b: "Frustration", c: 0, d: 0, e: 1, h: 100, k: 160, D: 1 }, furyattack: { a: 1, b: "Fury Attack", c: 15, d: 0, e: 1, h: 85, i: [2, 5], k: 100, D: 1 }, furycutter: { a: 2, b: "Fury Cutter", c: 40, d: 6, e: 1, h: 95, k: 100, D: 1 }, furyswipes: { a: 1, b: "Fury Swipes", c: 18, d: 0, e: 1, h: 80, i: [2, 5], k: 100, D: 1 }, fusionbolt: { a: 5, b: "Fusion Bolt", c: 100, d: 12, e: 1, h: 100, k: 180 }, fusionflare: { a: 5, b: "Fusion Flare", c: 100, d: 9, e: 2, h: 100, k: 180 }, futuresight: { a: 2, b: "Future Sight", c: 120, d: 13, e: 2, h: 100, k: 190 }, gastroacid: { a: 4, b: "Gastro Acid", c: 0, d: 3, e: 0, h: 100 }, geargrind: { a: 5, b: "Gear Grind", c: 50, d: 8, e: 1, h: 85, i: [2, 2], k: 180, D: 1 }, gearup: { a: 7, b: "Gear Up", c: 0, d: 8, e: 0 }, genesissupernova: { a: 7, b: "Genesis Supernova", c: 185, d: 13, e: 2, l: { a: 100 } }, geomancy: { a: 6, b: "Geomancy", c: 0, d: 17, e: 0, C: 1 }, gigadrain: { a: 2, b: "Giga Drain", c: 75, d: 11, e: 2, h: 100, k: 140 }, gigaimpact: { a: 4, b: "Giga Impact", c: 150, d: 0, e: 1, h: 90, k: 200, D: 1, H: 1 }, gigavolthavoc: { a: 7, b: "Gigavolt Havoc", c: 1, d: 12, e: 1 }, glaciate: { a: 5, b: "Glaciate", c: 65, d: 14, e: 2, h: 95, j: 1, k: 120, l: { a: 100, e: [0, 0, 0, 0, 0, -1] } }, glare: { a: 1, b: "Glare", c: 0, d: 0, e: 0, h: 100 }, grassknot: { a: 4, b: "Grass Knot", c: 0, d: 11, e: 2, h: 100, k: 160, D: 1 }, grasspledge: { a: 5, b: "Grass Pledge", c: 80, d: 11, e: 2, h: 100, k: 160 }, grasswhistle: { a: 3, b: "Grass Whistle", c: 0, d: 11, e: 0, h: 55, I: 1 }, grassyterrain: { a: 6, b: "Grassy Terrain", c: 0, d: 11, e: 0 }, gravity: { a: 4, b: "Gravity", c: 0, d: 13, e: 0 }, growl: { a: 1, b: "Growl", c: 0, d: 0, e: 0, h: 100, j: 1, I: 1 }, growth: { a: 1, b: "Growth", c: 0, d: 0, e: 0 }, grudge: { a: 3, b: "Grudge", c: 0, d: 7, e: 0 }, guardsplit: { a: 5, b: "Guard Split", c: 0, d: 13, e: 0 }, guardswap: { a: 4, b: "Guard Swap", c: 0, d: 13, e: 0 }, guardianofalola: { a: 7, b: "Guardian of Alola", c: 0, d: 17, e: 2 }, guillotine: { a: 1, b: "Guillotine", c: 0, d: 0, e: 1, h: 30, k: 180, n: 1, D: 1 }, gunkshot: { a: 4, b: "Gunk Shot", c: 120, d: 3, e: 1, h: 80, k: 190, l: { a: 30, b: 1 } }, gust: { a: 1, b: "Gust", c: 40, d: 2, e: 2, h: 100, k: 100 }, gyroball: { a: 4, b: "Gyro Ball", c: 0, d: 8, e: 1, h: 100, k: 160, B: 1, D: 1 }, hail: { a: 3, b: "Hail", c: 0, d: 14, e: 0 }, hammerarm: { a: 4, b: "Hammer Arm", c: 100, d: 1, e: 1, h: 90, k: 180, D: 1, G: 1 }, happyhour: { a: 6, b: "Happy Hour", c: 0, d: 0, e: 0 }, harden: { a: 1, b: "Harden", c: 0, d: 0, e: 0 }, haze: { a: 1, b: "Haze", c: 0, d: 14, e: 0 }, headcharge: { a: 5, b: "Head Charge", c: 120, d: 0, e: 1, h: 100, k: 190, m: [1, 4], D: 1 }, headsmash: { a: 4, b: "Head Smash", c: 150, d: 5, e: 1, h: 80, k: 200, m: [1, 2], D: 1 }, headbutt: { a: 1, b: "Headbutt", c: 70, d: 0, e: 1, h: 100, k: 140, l: { a: 30, c: 1 }, D: 1 }, healbell: { a: 2, b: "Heal Bell", c: 0, d: 0, e: 0, I: 1 }, healblock: { a: 4, b: "Heal Block", c: 0, d: 13, e: 0, h: 100, j: 1 }, healorder: { a: 4, b: "Heal Order", c: 0, d: 6, e: 0 }, healpulse: { a: 5, b: "Heal Pulse", c: 0, d: 13, e: 0, F: 1 }, healingwish: { a: 4, b: "Healing Wish", c: 0, d: 13, e: 0 }, heartstamp: { a: 5, b: "Heart Stamp", c: 60, d: 13, e: 1, h: 100, k: 120, l: { a: 30, c: 1 }, D: 1 }, heartswap: { a: 4, b: "Heart Swap", c: 0, d: 13, e: 0 }, heatcrash: { a: 5, b: "Heat Crash", c: 0, d: 9, e: 1, h: 100, k: 160, D: 1 }, heatwave: { a: 3, b: "Heat Wave", c: 95, d: 9, e: 2, h: 90, j: 1, k: 175, l: { a: 10, b: 3 } }, heavyslam: { a: 5, b: "Heavy Slam", c: 0, d: 8, e: 1, h: 100, k: 160, D: 1 }, helpinghand: { a: 3, b: "Helping Hand", c: 0, d: 0, e: 0, g: 5 }, hex: { a: 5, b: "Hex", c: 65, d: 7, e: 2, h: 100, k: 160 }, hiddenpower: { a: 2, b: "Hidden Power", c: 60, d: 0, e: 2, h: 100, k: 120 }, hiddenpowerbug: { a: 2, b: "Hidden Power Bug", c: 60, d: 6, e: 2, h: 100 }, hiddenpowerdark: { a: 2, b: "Hidden Power Dark", c: 60, d: 16, e: 2, h: 100 }, hiddenpowerdragon: { a: 2, b: "Hidden Power Dragon", c: 60, d: 15, e: 2, h: 100 }, hiddenpowerelectric: { a: 2, b: "Hidden Power Electric", c: 60, d: 12, e: 2, h: 100 }, hiddenpowerfighting: { a: 2, b: "Hidden Power Fighting", c: 60, d: 1, e: 2, h: 100 }, hiddenpowerfire: { a: 2, b: "Hidden Power Fire", c: 60, d: 9, e: 2, h: 100 }, hiddenpowerflying: { a: 2, b: "Hidden Power Flying", c: 60, d: 2, e: 2, h: 100 }, hiddenpowerghost: { a: 2, b: "Hidden Power Ghost", c: 60, d: 7, e: 2, h: 100 }, hiddenpowergrass: { a: 2, b: "Hidden Power Grass", c: 60, d: 11, e: 2, h: 100 }, hiddenpowerground: { a: 2, b: "Hidden Power Ground", c: 60, d: 4, e: 2, h: 100 }, hiddenpowerice: { a: 2, b: "Hidden Power Ice", c: 60, d: 14, e: 2, h: 100 }, hiddenpowerpoison: { a: 2, b: "Hidden Power Poison", c: 60, d: 3, e: 2, h: 100 }, hiddenpowerpsychic: { a: 2, b: "Hidden Power Psychic", c: 60, d: 13, e: 2, h: 100 }, hiddenpowerrock: { a: 2, b: "Hidden Power Rock", c: 60, d: 5, e: 2, h: 100 }, hiddenpowersteel: { a: 2, b: "Hidden Power Steel", c: 60, d: 8, e: 2, h: 100 }, hiddenpowerwater: { a: 2, b: "Hidden Power Water", c: 60, d: 10, e: 2, h: 100 }, highhorsepower: { a: 7, b: "High Horsepower", c: 95, d: 4, e: 1, h: 95, k: 175, D: 1 }, highjumpkick: { a: 1, b: "High Jump Kick", c: 130, d: 1, e: 1, h: 90, k: 195, D: 1 }, holdback: { a: 6, b: "Hold Back", c: 40, d: 0, e: 1, h: 100, k: 100, D: 1 }, holdhands: { a: 6, b: "Hold Hands", c: 0, d: 0, e: 0 }, honeclaws: { a: 5, b: "Hone Claws", c: 0, d: 16, e: 0 }, hornattack: { a: 1, b: "Horn Attack", c: 65, d: 0, e: 1, h: 100, k: 120, D: 1 }, horndrill: { a: 1, b: "Horn Drill", c: 0, d: 0, e: 1, h: 30, k: 180, n: 1, D: 1 }, hornleech: { a: 5, b: "Horn Leech", c: 75, d: 11, e: 1, h: 100, k: 140, D: 1 }, howl: { a: 3, b: "Howl", c: 0, d: 0, e: 0 }, hurricane: { a: 5, b: "Hurricane", c: 110, d: 2, e: 2, h: 70, k: 185, l: { a: 30, d: 1 } }, hydrocannon: { a: 3, b: "Hydro Cannon", c: 150, d: 10, e: 2, h: 90, k: 200, H: 1 }, hydropump: { a: 1, b: "Hydro Pump", c: 110, d: 10, e: 2, h: 80, k: 185 }, hydrovortex: { a: 7, b: "Hydro Vortex", c: 1, d: 10, e: 1 }, hyperbeam: { a: 1, b: "Hyper Beam", c: 150, d: 0, e: 2, h: 90, k: 200, H: 1 }, hyperfang: { a: 1, b: "Hyper Fang", c: 80, d: 0, e: 1, h: 90, k: 160, l: { a: 10, c: 1 }, A: 1, D: 1 }, hyperspacefury: { a: 6, b: "Hyperspace Fury", c: 100, d: 16, e: 1, k: 180 }, hyperspacehole: { a: 6, b: "Hyperspace Hole", c: 80, d: 13, e: 2, k: 160 }, hypervoice: { a: 3, b: "Hyper Voice", c: 90, d: 0, e: 2, h: 100, j: 1, k: 175, I: 1 }, hypnosis: { a: 1, b: "Hypnosis", c: 0, d: 13, e: 0, h: 60 }, iceball: { a: 3, b: "Ice Ball", c: 30, d: 14, e: 1, h: 90, k: 100, B: 1, D: 1 }, icebeam: { a: 1, b: "Ice Beam", c: 90, d: 14, e: 2, h: 100, k: 175, l: { a: 10, b: 6 } }, iceburn: { a: 5, b: "Ice Burn", c: 140, d: 14, e: 2, h: 90, k: 200, l: { a: 30, b: 3 }, C: 1 }, icefang: { a: 4, b: "Ice Fang", c: 65, d: 14, e: 1, h: 95, k: 120, A: 1, D: 1 }, icehammer: { a: 7, b: "Ice Hammer", c: 100, d: 14, e: 1, h: 90, k: 180, D: 1, G: 1 }, icepunch: { a: 1, b: "Ice Punch", c: 75, d: 14, e: 1, h: 100, k: 140, l: { a: 10, b: 6 }, D: 1, G: 1 }, iceshard: { a: 4, b: "Ice Shard", c: 40, d: 14, e: 1, g: 1, h: 100, k: 100 }, iciclecrash: { a: 5, b: "Icicle Crash", c: 85, d: 14, e: 1, h: 90, k: 160, l: { a: 30, c: 1 } }, iciclespear: { a: 3, b: "Icicle Spear", c: 25, d: 14, e: 1, h: 100, i: [2, 5], k: 140 }, icywind: { a: 2, b: "Icy Wind", c: 55, d: 14, e: 2, h: 95, j: 1, k: 100, l: { a: 100, e: [0, 0, 0, 0, 0, -1] } }, imprison: { a: 3, b: "Imprison", c: 0, d: 13, e: 0 }, incinerate: { a: 5, b: "Incinerate", c: 60, d: 9, e: 2, h: 100, j: 1, k: 120 }, inferno: { a: 5, b: "Inferno", c: 100, d: 9, e: 2, h: 50, k: 180, l: { a: 100, b: 3 } }, infernooverdrive: { a: 7, b: "Inferno Overdrive", c: 1, d: 9, e: 1 }, infestation: { a: 6, b: "Infestation", c: 20, d: 6, e: 2, h: 100, k: 100, D: 1 }, ingrain: { a: 3, b: "Ingrain", c: 0, d: 11, e: 0 }, instruct: { a: 7, b: "Instruct", c: 0, d: 13, e: 0 }, iondeluge: { a: 6, b: "Ion Deluge", c: 0, d: 12, e: 0, g: 1 }, irondefense: { a: 3, b: "Iron Defense", c: 0, d: 8, e: 0 }, ironhead: { a: 4, b: "Iron Head", c: 80, d: 8, e: 1, h: 100, k: 160, l: { a: 30, c: 1 }, D: 1 }, irontail: { a: 2, b: "Iron Tail", c: 100, d: 8, e: 1, h: 75, k: 180, l: { a: 30, e: [0, 0, -1, 0, 0, 0] }, D: 1 }, judgment: { a: 4, b: "Judgment", c: 100, d: 0, e: 2, h: 100, k: 180 }, jumpkick: { a: 1, b: "Jump Kick", c: 100, d: 1, e: 1, h: 95, k: 180, D: 1 }, karatechop: { a: 1, b: "Karate Chop", c: 50, d: 1, e: 1, h: 100, k: 100, D: 1 }, kinesis: { a: 1, b: "Kinesis", c: 0, d: 13, e: 0, h: 80 }, kingsshield: { a: 6, b: "King's Shield", c: 0, d: 8, e: 0, g: 4 }, knockoff: { a: 3, b: "Knock Off", c: 65, d: 16, e: 1, h: 100, k: 120, D: 1 }, landswrath: { a: 6, b: "Land's Wrath", c: 90, d: 4, e: 1, h: 100, j: 1, k: 185 }, laserfocus: { a: 7, b: "Laser Focus", c: 0, d: 0, e: 0 }, lastresort: { a: 4, b: "Last Resort", c: 140, d: 0, e: 1, h: 100, k: 200, D: 1 }, lavaplume: { a: 4, b: "Lava Plume", c: 80, d: 9, e: 2, h: 100, j: 1, k: 160, l: { a: 30, b: 3 } }, leafblade: { a: 3, b: "Leaf Blade", c: 90, d: 11, e: 1, h: 100, k: 175, D: 1 }, leafstorm: { a: 4, b: "Leaf Storm", c: 130, d: 11, e: 2, h: 90, k: 195 }, leaftornado: { a: 5, b: "Leaf Tornado", c: 65, d: 11, e: 2, h: 90, k: 120, l: { a: 50, e: [0, 0, 0, 0, 0, 0] } }, leafage: { a: 7, b: "Leafage", c: 40, d: 11, e: 1, h: 100, k: 100 }, leechlife: { a: 1, b: "Leech Life", c: 80, d: 6, e: 1, h: 100, k: 160, D: 1 }, leechseed: { a: 1, b: "Leech Seed", c: 0, d: 11, e: 0, h: 90 }, leer: { a: 1, b: "Leer", c: 0, d: 0, e: 0, h: 100, j: 1 }, letssnuggleforever: { a: 7, b: "Let's Snuggle Forever", c: 190, d: 17, e: 1, D: 1 }, lick: { a: 1, b: "Lick", c: 30, d: 7, e: 1, h: 100, k: 100, l: { a: 30, b: 4 }, D: 1 }, lightofruin: { a: 6, b: "Light of Ruin", c: 140, d: 17, e: 2, h: 90, k: 200, m: [1, 2] }, lightscreen: { a: 1, b: "Light Screen", c: 0, d: 13, e: 0 }, lightthatburnsthesky: { a: 7, b: "Light That Burns the Sky", c: 200, d: 13, e: 2, f: 1 }, liquidation: { a: 7, b: "Liquidation", c: 85, d: 10, e: 1, h: 100, k: 160, l: { a: 20, e: [0, 0, -1, 0, 0, 0] }, D: 1 }, lockon: { a: 2, b: "Lock-On", c: 0, d: 0, e: 0 }, lovelykiss: { a: 1, b: "Lovely Kiss", c: 0, d: 0, e: 0, h: 75 }, lowkick: { a: 1, b: "Low Kick", c: 0, d: 1, e: 1, h: 100, k: 160, D: 1 }, lowsweep: { a: 5, b: "Low Sweep", c: 65, d: 1, e: 1, h: 100, k: 120, l: { a: 100, e: [0, 0, 0, 0, 0, -1] }, D: 1 }, luckychant: { a: 4, b: "Lucky Chant", c: 0, d: 0, e: 0 }, lunardance: { a: 4, b: "Lunar Dance", c: 0, d: 13, e: 0 }, lunge: { a: 7, b: "Lunge", c: 80, d: 6, e: 1, h: 100, k: 160, l: { a: 100, e: [0, -1, 0, 0, 0, 0] }, D: 1 }, lusterpurge: { a: 3, b: "Luster Purge", c: 70, d: 13, e: 2, h: 100, k: 140, l: { a: 50, e: [0, 0, 0, 0, -1, 0] } }, machpunch: { a: 2, b: "Mach Punch", c: 40, d: 1, e: 1, g: 1, h: 100, k: 100, D: 1, G: 1 }, magiccoat: { a: 3, b: "Magic Coat", c: 0, d: 13, e: 0, g: 4 }, magicroom: { a: 5, b: "Magic Room", c: 0, d: 13, e: 0 }, magicalleaf: { a: 3, b: "Magical Leaf", c: 60, d: 11, e: 2, k: 120 }, magmastorm: { a: 4, b: "Magma Storm", c: 100, d: 9, e: 2, h: 75, k: 180 }, magnetbomb: { a: 4, b: "Magnet Bomb", c: 60, d: 8, e: 1, k: 120, B: 1 }, magneticflux: { a: 6, b: "Magnetic Flux", c: 0, d: 12, e: 0 }, magnetrise: { a: 4, b: "Magnet Rise", c: 0, d: 12, e: 0 }, magnitude: { a: 2, b: "Magnitude", c: 0, d: 4, e: 1, h: 100, j: 1, k: 140 }, maliciousmoonsault: { a: 7, b: "Malicious Moonsault", c: 180, d: 16, e: 1, D: 1 }, matblock: { a: 6, b: "Mat Block", c: 0, d: 1, e: 0 }, mefirst: { a: 4, b: "Me First", c: 0, d: 0, e: 0 }, meanlook: { a: 2, b: "Mean Look", c: 0, d: 0, e: 0 }, meditate: { a: 1, b: "Meditate", c: 0, d: 13, e: 0 }, megadrain: { a: 1, b: "Mega Drain", c: 40, d: 11, e: 2, h: 100, k: 120 }, megakick: { a: 1, b: "Mega Kick", c: 120, d: 0, e: 1, h: 75, k: 190, D: 1 }, megapunch: { a: 1, b: "Mega Punch", c: 80, d: 0, e: 1, h: 85, k: 160, D: 1, G: 1 }, megahorn: { a: 2, b: "Megahorn", c: 120, d: 6, e: 1, h: 85, k: 190, D: 1 }, memento: { a: 3, b: "Memento", c: 0, d: 16, e: 0, h: 100 }, menacingmoonrazemaelstrom: { a: 7, b: "Menacing Moonraze Maelstrom", c: 200, d: 7, e: 2, f: 1 }, metalburst: { a: 4, b: "Metal Burst", c: 0, d: 8, e: 1, h: 100, k: 100 }, metalclaw: { a: 2, b: "Metal Claw", c: 50, d: 8, e: 1, h: 95, k: 100, l: { a: 10, f: [0, 1, 0, 0, 0, 0] }, D: 1 }, metalsound: { a: 3, b: "Metal Sound", c: 0, d: 8, e: 0, h: 85, I: 1 }, meteormash: { a: 3, b: "Meteor Mash", c: 90, d: 8, e: 1, h: 90, k: 175, l: { a: 20, f: [0, 1, 0, 0, 0, 0] }, D: 1, G: 1 }, metronome: { a: 1, b: "Metronome", c: 0, d: 0, e: 0 }, milkdrink: { a: 2, b: "Milk Drink", c: 0, d: 0, e: 0 }, mimic: { a: 1, b: "Mimic", c: 0, d: 0, e: 0 }, mindblown: { a: 7, b: "Mind Blown", c: 150, d: 9, e: 2, h: 100, j: 1, k: 200 }, mindreader: { a: 2, b: "Mind Reader", c: 0, d: 0, e: 0 }, minimize: { a: 1, b: "Minimize", c: 0, d: 0, e: 0 }, miracleeye: { a: 4, b: "Miracle Eye", c: 0, d: 13, e: 0 }, mirrorcoat: { a: 2, b: "Mirror Coat", c: 0, d: 13, e: 2, g: -5, h: 100, k: 100 }, mirrormove: { a: 1, b: "Mirror Move", c: 0, d: 2, e: 0 }, mirrorshot: { a: 4, b: "Mirror Shot", c: 65, d: 8, e: 2, h: 85, k: 120, l: { a: 30, e: [0, 0, 0, 0, 0, 0] } }, mist: { a: 1, b: "Mist", c: 0, d: 14, e: 0 }, mistball: { a: 3, b: "Mist Ball", c: 70, d: 13, e: 2, h: 100, k: 140, l: { a: 50, e: [0, 0, 0, -1, 0, 0] }, B: 1 }, mistyterrain: { a: 6, b: "Misty Terrain", c: 0, d: 17, e: 0 }, moonblast: { a: 6, b: "Moonblast", c: 95, d: 17, e: 2, h: 100, k: 175, l: { a: 30, e: [0, 0, 0, -1, 0, 0] } }, moongeistbeam: { a: 7, b: "Moongeist Beam", c: 100, d: 7, e: 2, f: 1, h: 100, k: 180 }, moonlight: { a: 2, b: "Moonlight", c: 0, d: 17, e: 0 }, morningsun: { a: 2, b: "Morning Sun", c: 0, d: 0, e: 0 }, mudslap: { a: 2, b: "Mud-Slap", c: 20, d: 4, e: 2, h: 100, k: 100, l: { a: 100, e: [0, 0, 0, 0, 0, 0] } }, mudbomb: { a: 4, b: "Mud Bomb", c: 65, d: 4, e: 2, h: 85, k: 120, l: { a: 30, e: [0, 0, 0, 0, 0, 0] }, B: 1 }, mudshot: { a: 3, b: "Mud Shot", c: 55, d: 4, e: 2, h: 95, k: 100, l: { a: 100, e: [0, 0, 0, 0, 0, -1] } }, mudsport: { a: 3, b: "Mud Sport", c: 0, d: 4, e: 0 }, muddywater: { a: 3, b: "Muddy Water", c: 90, d: 10, e: 2, h: 85, j: 1, k: 175, l: { a: 30, e: [0, 0, 0, 0, 0, 0] } }, multiattack: { a: 7, b: "Multi-Attack", c: 90, d: 0, e: 1, h: 100, k: 185, D: 1 }, mysticalfire: { a: 6, b: "Mystical Fire", c: 75, d: 9, e: 2, h: 100, k: 140, l: { a: 100, e: [0, 0, 0, -1, 0, 0] } }, nastyplot: { a: 4, b: "Nasty Plot", c: 0, d: 16, e: 0 }, naturalgift: { a: 4, b: "Natural Gift", c: 0, d: 0, e: 1, h: 100, k: 160 }, naturepower: { a: 3, b: "Nature Power", c: 0, d: 0, e: 0 }, naturesmadness: { a: 7, b: "Nature's Madness", c: 0, d: 17, e: 2, h: 90, k: 100 }, needlearm: { a: 3, b: "Needle Arm", c: 60, d: 11, e: 1, h: 100, k: 120, l: { a: 30, c: 1 }, D: 1 }, neverendingnightmare: { a: 7, b: "Never-Ending Nightmare", c: 1, d: 7, e: 1 }, nightdaze: { a: 5, b: "Night Daze", c: 85, d: 16, e: 2, h: 95, k: 160, l: { a: 40, e: [0, 0, 0, 0, 0, 0] } }, nightshade: { a: 1, b: "Night Shade", c: 0, d: 7, e: 2, h: 100, k: 100 }, nightslash: { a: 4, b: "Night Slash", c: 70, d: 16, e: 1, h: 100, k: 140, D: 1 }, nightmare: { a: 2, b: "Nightmare", c: 0, d: 7, e: 0, h: 100 }, nobleroar: { a: 6, b: "Noble Roar", c: 0, d: 0, e: 0, h: 100, I: 1 }, nuzzle: { a: 6, b: "Nuzzle", c: 20, d: 12, e: 1, h: 100, k: 100, l: { a: 100, b: 4 }, D: 1 }, oblivionwing: { a: 6, b: "Oblivion Wing", c: 80, d: 2, e: 2, h: 100, k: 160 }, oceanicoperetta: { a: 7, b: "Oceanic Operetta", c: 195, d: 10, e: 2 }, octazooka: { a: 2, b: "Octazooka", c: 65, d: 10, e: 2, h: 85, k: 120, l: { a: 50, e: [0, 0, 0, 0, 0, 0] }, B: 1 }, odorsleuth: { a: 3, b: "Odor Sleuth", c: 0, d: 0, e: 0 }, ominouswind: { a: 4, b: "Ominous Wind", c: 60, d: 7, e: 2, h: 100, k: 120, l: { a: 10, f: [0, 1, 1, 1, 1, 1] } }, originpulse: { a: 6, b: "Origin Pulse", c: 110, d: 10, e: 2, h: 85, j: 1, k: 185, F: 1 }, outrage: { a: 2, b: "Outrage", c: 120, d: 15, e: 1, h: 100, k: 190, D: 1 }, overheat: { a: 3, b: "Overheat", c: 130, d: 9, e: 2, h: 90, k: 195 }, painsplit: { a: 2, b: "Pain Split", c: 0, d: 0, e: 0 }, paraboliccharge: { a: 6, b: "Parabolic Charge", c: 65, d: 12, e: 2, h: 100, j: 1, k: 120 }, partingshot: { a: 6, b: "Parting Shot", c: 0, d: 16, e: 0, h: 100, I: 1 }, payday: { a: 1, b: "Pay Day", c: 40, d: 0, e: 1, h: 100, k: 100 }, payback: { a: 4, b: "Payback", c: 50, d: 16, e: 1, h: 100, k: 100, D: 1 }, peck: { a: 1, b: "Peck", c: 35, d: 2, e: 1, h: 100, k: 100, D: 1 }, perishsong: { a: 2, b: "Perish Song", c: 0, d: 0, e: 0, I: 1 }, petalblizzard: { a: 6, b: "Petal Blizzard", c: 90, d: 11, e: 1, h: 100, j: 1, k: 175 }, petaldance: { a: 1, b: "Petal Dance", c: 120, d: 11, e: 2, h: 100, k: 190, D: 1 }, phantomforce: { a: 6, b: "Phantom Force", c: 90, d: 7, e: 1, h: 100, k: 175, C: 1, D: 1 }, photongeyser: { a: 7, b: "Photon Geyser", c: 100, d: 13, e: 2, h: 100, k: 180 }, pinmissile: { a: 1, b: "Pin Missile", c: 25, d: 6, e: 1, h: 95, i: [2, 5], k: 140 }, plasmafists: { a: 7, b: "Plasma Fists", c: 100, d: 12, e: 1, h: 100, k: 180, D: 1, G: 1 }, playnice: { a: 6, b: "Play Nice", c: 0, d: 0, e: 0 }, playrough: { a: 6, b: "Play Rough", c: 90, d: 17, e: 1, h: 90, k: 175, l: { a: 10, e: [0, -1, 0, 0, 0, 0] }, D: 1 }, pluck: { a: 4, b: "Pluck", c: 60, d: 2, e: 1, h: 100, k: 120, D: 1 }, poisonfang: { a: 3, b: "Poison Fang", c: 50, d: 3, e: 1, h: 100, k: 100, l: { a: 50, b: 2 }, A: 1, D: 1 }, poisongas: { a: 1, b: "Poison Gas", c: 0, d: 3, e: 0, h: 90, j: 1 }, poisonjab: { a: 4, b: "Poison Jab", c: 80, d: 3, e: 1, h: 100, k: 160, l: { a: 30, b: 1 }, D: 1 }, poisonpowder: { a: 1, b: "Poison Powder", c: 0, d: 3, e: 0, h: 75, E: 1 }, poisonsting: { a: 1, b: "Poison Sting", c: 15, d: 3, e: 1, h: 100, k: 100, l: { a: 30, b: 1 } }, poisontail: { a: 3, b: "Poison Tail", c: 50, d: 3, e: 1, h: 100, k: 100, l: { a: 10, b: 1 }, D: 1 }, pollenpuff: { a: 7, b: "Pollen Puff", c: 90, d: 6, e: 2, h: 100, k: 175, B: 1 }, pound: { a: 1, b: "Pound", c: 40, d: 0, e: 1, h: 100, k: 100, D: 1 }, powder: { a: 6, b: "Powder", c: 0, d: 6, e: 0, g: 1, h: 100, E: 1 }, powdersnow: { a: 2, b: "Powder Snow", c: 40, d: 14, e: 2, h: 100, j: 1, k: 100, l: { a: 10, b: 6 } }, powergem: { a: 4, b: "Power Gem", c: 80, d: 5, e: 2, h: 100, k: 160 }, powersplit: { a: 5, b: "Power Split", c: 0, d: 13, e: 0 }, powerswap: { a: 4, b: "Power Swap", c: 0, d: 13, e: 0 }, powertrick: { a: 4, b: "Power Trick", c: 0, d: 13, e: 0 }, powertrip: { a: 7, b: "Power Trip", c: 20, d: 16, e: 1, h: 100, k: 160, D: 1 }, poweruppunch: { a: 6, b: "Power-Up Punch", c: 40, d: 1, e: 1, h: 100, k: 100, l: { a: 100, f: [0, 1, 0, 0, 0, 0] }, D: 1, G: 1 }, powerwhip: { a: 4, b: "Power Whip", c: 120, d: 11, e: 1, h: 85, k: 190, D: 1 }, precipiceblades: { a: 6, b: "Precipice Blades", c: 120, d: 4, e: 1, h: 85, j: 1, k: 190 }, present: { a: 2, b: "Present", c: 0, d: 0, e: 1, h: 90, k: 100 }, prismaticlaser: { a: 7, b: "Prismatic Laser", c: 160, d: 13, e: 2, h: 100, k: 200, H: 1 }, protect: { a: 2, b: "Protect", c: 0, d: 0, e: 0, g: 4 }, psybeam: { a: 1, b: "Psybeam", c: 65, d: 13, e: 2, h: 100, k: 120, l: { a: 10, d: 1 } }, psychup: { a: 2, b: "Psych Up", c: 0, d: 0, e: 0 }, psychic: { a: 1, b: "Psychic", c: 90, d: 13, e: 2, h: 100, k: 175, l: { a: 10, e: [0, 0, 0, 0, -1, 0] } }, psychicfangs: { a: 7, b: "Psychic Fangs", c: 85, d: 13, e: 1, h: 100, k: 160, A: 1, D: 1 }, psychicterrain: { a: 7, b: "Psychic Terrain", c: 0, d: 13, e: 0 }, psychoboost: { a: 3, b: "Psycho Boost", c: 140, d: 13, e: 2, h: 90, k: 200 }, psychocut: { a: 4, b: "Psycho Cut", c: 70, d: 13, e: 1, h: 100, k: 140 }, psychoshift: { a: 4, b: "Psycho Shift", c: 0, d: 13, e: 0, h: 100 }, psyshock: { a: 5, b: "Psyshock", c: 80, d: 13, e: 2, h: 100, k: 160 }, psystrike: { a: 5, b: "Psystrike", c: 100, d: 13, e: 2, h: 100, k: 180 }, psywave: { a: 1, b: "Psywave", c: 0, d: 13, e: 2, h: 100, k: 100 }, pulverizingpancake: { a: 7, b: "Pulverizing Pancake", c: 210, d: 0, e: 1, D: 1 }, punishment: { a: 4, b: "Punishment", c: 0, d: 16, e: 1, h: 100, k: 160, D: 1 }, purify: { a: 7, b: "Purify", c: 0, d: 3, e: 0 }, pursuit: { a: 2, b: "Pursuit", c: 40, d: 16, e: 1, h: 100, k: 100, D: 1 }, quash: { a: 5, b: "Quash", c: 0, d: 16, e: 0, h: 100 }, quickattack: { a: 1, b: "Quick Attack", c: 40, d: 0, e: 1, g: 1, h: 100, k: 100, D: 1 }, quickguard: { a: 5, b: "Quick Guard", c: 0, d: 1, e: 0, g: 3 }, quiverdance: { a: 5, b: "Quiver Dance", c: 0, d: 6, e: 0 }, rage: { a: 1, b: "Rage", c: 20, d: 0, e: 1, h: 100, k: 100, D: 1 }, ragepowder: { a: 5, b: "Rage Powder", c: 0, d: 6, e: 0, g: 2, E: 1 }, raindance: { a: 2, b: "Rain Dance", c: 0, d: 10, e: 0 }, rapidspin: { a: 2, b: "Rapid Spin", c: 20, d: 0, e: 1, h: 100, k: 100, D: 1 }, razorleaf: { a: 1, b: "Razor Leaf", c: 55, d: 11, e: 1, h: 95, j: 1, k: 100 }, razorshell: { a: 5, b: "Razor Shell", c: 75, d: 10, e: 1, h: 95, k: 140, l: { a: 50, e: [0, 0, -1, 0, 0, 0] }, D: 1 }, razorwind: { a: 1, b: "Razor Wind", c: 80, d: 0, e: 2, h: 100, j: 1, k: 160, C: 1 }, recover: { a: 1, b: "Recover", c: 0, d: 0, e: 0 }, recycle: { a: 3, b: "Recycle", c: 0, d: 0, e: 0 }, reflect: { a: 1, b: "Reflect", c: 0, d: 13, e: 0 }, reflecttype: { a: 5, b: "Reflect Type", c: 0, d: 0, e: 0 }, refresh: { a: 3, b: "Refresh", c: 0, d: 0, e: 0 }, relicsong: { a: 5, b: "Relic Song", c: 75, d: 0, e: 2, h: 100, j: 1, k: 140, l: { a: 10, b: 5 }, I: 1 }, rest: { a: 1, b: "Rest", c: 0, d: 13, e: 0 }, retaliate: { a: 5, b: "Retaliate", c: 70, d: 0, e: 1, h: 100, k: 140, D: 1 }, return: { a: 2, b: "Return", c: 0, d: 0, e: 1, h: 100, k: 160, D: 1 }, revelationdance: { a: 7, b: "Revelation Dance", c: 90, d: 0, e: 2, h: 100, k: 175 }, revenge: { a: 3, b: "Revenge", c: 60, d: 1, e: 1, g: -4, h: 100, k: 120, D: 1 }, reversal: { a: 2, b: "Reversal", c: 0, d: 1, e: 1, h: 100, k: 160, D: 1 }, roar: { a: 1, b: "Roar", c: 0, d: 0, e: 0, g: -6, I: 1 }, roaroftime: { a: 4, b: "Roar of Time", c: 150, d: 15, e: 2, h: 90, k: 200, H: 1 }, rockblast: { a: 3, b: "Rock Blast", c: 25, d: 5, e: 1, h: 90, i: [2, 5], k: 140, B: 1 }, rockclimb: { a: 4, b: "Rock Climb", c: 90, d: 0, e: 1, h: 85, k: 175, l: { a: 20, d: 1 }, D: 1 }, rockpolish: { a: 4, b: "Rock Polish", c: 0, d: 5, e: 0 }, rockslide: { a: 1, b: "Rock Slide", c: 75, d: 5, e: 1, h: 90, j: 1, k: 140, l: { a: 30, c: 1 } }, rocksmash: { a: 2, b: "Rock Smash", c: 40, d: 1, e: 1, h: 100, k: 100, l: { a: 50, e: [0, 0, -1, 0, 0, 0] }, D: 1 }, rockthrow: { a: 1, b: "Rock Throw", c: 50, d: 5, e: 1, h: 90, k: 100 }, rocktomb: { a: 3, b: "Rock Tomb", c: 60, d: 5, e: 1, h: 95, k: 120, l: { a: 100, e: [0, 0, 0, 0, 0, -1] } }, rockwrecker: { a: 4, b: "Rock Wrecker", c: 150, d: 5, e: 1, h: 90, k: 200, B: 1, H: 1 }, roleplay: { a: 3, b: "Role Play", c: 0, d: 13, e: 0 }, rollingkick: { a: 1, b: "Rolling Kick", c: 60, d: 1, e: 1, h: 85, k: 120, l: { a: 30, c: 1 }, D: 1 }, rollout: { a: 2, b: "Rollout", c: 30, d: 5, e: 1, h: 90, k: 100, D: 1 }, roost: { a: 4, b: "Roost", c: 0, d: 2, e: 0 }, rototiller: { a: 6, b: "Rototiller", c: 0, d: 4, e: 0 }, round: { a: 5, b: "Round", c: 60, d: 0, e: 2, h: 100, k: 120, I: 1 }, sacredfire: { a: 2, b: "Sacred Fire", c: 100, d: 9, e: 1, h: 95, k: 180, l: { a: 50, b: 3 } }, sacredsword: { a: 5, b: "Sacred Sword", c: 90, d: 1, e: 1, h: 100, k: 175, D: 1 }, safeguard: { a: 2, b: "Safeguard", c: 0, d: 0, e: 0 }, sandattack: { a: 1, b: "Sand Attack", c: 0, d: 4, e: 0, h: 100 }, sandtomb: { a: 3, b: "Sand Tomb", c: 35, d: 4, e: 1, h: 85, k: 100 }, sandstorm: { a: 2, b: "Sandstorm", c: 0, d: 5, e: 0 }, savagespinout: { a: 7, b: "Savage Spin-Out", c: 1, d: 6, e: 1 }, scald: { a: 5, b: "Scald", c: 80, d: 10, e: 2, h: 100, k: 160, l: { a: 30, b: 3 } }, scaryface: { a: 2, b: "Scary Face", c: 0, d: 0, e: 0, h: 100 }, scratch: { a: 1, b: "Scratch", c: 40, d: 0, e: 1, h: 100, k: 100, D: 1 }, screech: { a: 1, b: "Screech", c: 0, d: 0, e: 0, h: 85, I: 1 }, searingshot: { a: 5, b: "Searing Shot", c: 100, d: 9, e: 2, h: 100, j: 1, k: 180, l: { a: 30, b: 3 }, B: 1 }, searingsunrazesmash: { a: 7, b: "Searing Sunraze Smash", c: 200, d: 8, e: 1, f: 1, D: 1 }, secretpower: { a: 3, b: "Secret Power", c: 70, d: 0, e: 1, h: 100, k: 140, l: { a: 30, b: 4 } }, secretsword: { a: 5, b: "Secret Sword", c: 85, d: 1, e: 2, h: 100, k: 160 }, seedbomb: { a: 4, b: "Seed Bomb", c: 80, d: 11, e: 1, h: 100, k: 160, B: 1 }, seedflare: { a: 4, b: "Seed Flare", c: 120, d: 11, e: 2, h: 85, k: 190, l: { a: 40, e: [0, 0, 0, 0, -2, 0] } }, seismictoss: { a: 1, b: "Seismic Toss", c: 0, d: 1, e: 1, h: 100, k: 100, D: 1 }, selfdestruct: { a: 1, b: "Self-Destruct", c: 200, d: 0, e: 1, h: 100, j: 1, k: 200 }, shadowball: { a: 2, b: "Shadow Ball", c: 80, d: 7, e: 2, h: 100, k: 160, l: { a: 20, e: [0, 0, 0, 0, -1, 0] }, B: 1 }, shadowbone: { a: 7, b: "Shadow Bone", c: 85, d: 7, e: 1, h: 100, k: 160, l: { a: 20, e: [0, 0, -1, 0, 0, 0] } }, shadowclaw: { a: 4, b: "Shadow Claw", c: 70, d: 7, e: 1, h: 100, k: 140, D: 1 }, shadowforce: { a: 4, b: "Shadow Force", c: 120, d: 7, e: 1, h: 100, k: 190, C: 1, D: 1 }, shadowpunch: { a: 3, b: "Shadow Punch", c: 60, d: 7, e: 1, k: 120, D: 1, G: 1 }, shadowsneak: { a: 4, b: "Shadow Sneak", c: 40, d: 7, e: 1, g: 1, h: 100, k: 100, D: 1 }, sharpen: { a: 1, b: "Sharpen", c: 0, d: 0, e: 0 }, shatteredpsyche: { a: 7, b: "Shattered Psyche", c: 1, d: 13, e: 1 }, sheercold: { a: 3, b: "Sheer Cold", c: 0, d: 14, e: 2, h: 30, k: 180, n: 1 }, shellsmash: { a: 5, b: "Shell Smash", c: 0, d: 0, e: 0 }, shelltrap: { a: 7, b: "Shell Trap", c: 150, d: 9, e: 2, g: -3, h: 100, j: 1, k: 200 }, shiftgear: { a: 5, b: "Shift Gear", c: 0, d: 8, e: 0 }, shockwave: { a: 3, b: "Shock Wave", c: 60, d: 12, e: 2, k: 120 }, shoreup: { a: 7, b: "Shore Up", c: 0, d: 4, e: 0 }, signalbeam: { a: 3, b: "Signal Beam", c: 75, d: 6, e: 2, h: 100, k: 140, l: { a: 10, d: 1 } }, silverwind: { a: 3, b: "Silver Wind", c: 60, d: 6, e: 2, h: 100, k: 120, l: { a: 10, f: [0, 1, 1, 1, 1, 1] } }, simplebeam: { a: 5, b: "Simple Beam", c: 0, d: 0, e: 0, h: 100 }, sing: { a: 1, b: "Sing", c: 0, d: 0, e: 0, h: 55, I: 1 }, sinisterarrowraid: { a: 7, b: "Sinister Arrow Raid", c: 180, d: 7, e: 1 }, sketch: { a: 2, b: "Sketch", c: 0, d: 0, e: 0 }, skillswap: { a: 3, b: "Skill Swap", c: 0, d: 13, e: 0 }, skullbash: { a: 1, b: "Skull Bash", c: 130, d: 0, e: 1, h: 100, k: 195, C: 1, D: 1 }, skyattack: { a: 1, b: "Sky Attack", c: 140, d: 2, e: 1, h: 90, k: 200, l: { a: 30, c: 1 }, C: 1 }, skydrop: { a: 5, b: "Sky Drop", c: 60, d: 2, e: 1, h: 100, k: 120, C: 1, D: 1 }, skyuppercut: { a: 3, b: "Sky Uppercut", c: 85, d: 1, e: 1, h: 90, k: 160, D: 1, G: 1 }, slackoff: { a: 3, b: "Slack Off", c: 0, d: 0, e: 0 }, slam: { a: 1, b: "Slam", c: 80, d: 0, e: 1, h: 75, k: 160, D: 1 }, slash: { a: 1, b: "Slash", c: 70, d: 0, e: 1, h: 100, k: 140, D: 1 }, sleeppowder: { a: 1, b: "Sleep Powder", c: 0, d: 11, e: 0, h: 75, E: 1 }, sleeptalk: { a: 2, b: "Sleep Talk", c: 0, d: 0, e: 0 }, sludge: { a: 1, b: "Sludge", c: 65, d: 3, e: 2, h: 100, k: 120, l: { a: 30, b: 1 } }, sludgebomb: { a: 2, b: "Sludge Bomb", c: 90, d: 3, e: 2, h: 100, k: 175, l: { a: 30, b: 1 }, B: 1 }, sludgewave: { a: 5, b: "Sludge Wave", c: 95, d: 3, e: 2, h: 100, j: 1, k: 175, l: { a: 10, b: 1 } }, smackdown: { a: 5, b: "Smack Down", c: 50, d: 5, e: 1, h: 100, k: 100 }, smartstrike: { a: 7, b: "Smart Strike", c: 70, d: 8, e: 1, k: 140, D: 1 }, smellingsalts: { a: 3, b: "Smelling Salts", c: 70, d: 0, e: 1, h: 100, k: 140, D: 1 }, smog: { a: 1, b: "Smog", c: 30, d: 3, e: 2, h: 70, k: 100, l: { a: 40, b: 1 } }, smokescreen: { a: 1, b: "Smokescreen", c: 0, d: 0, e: 0, h: 100 }, snarl: { a: 5, b: "Snarl", c: 55, d: 16, e: 2, h: 95, j: 1, k: 100, l: { a: 100, e: [0, 0, 0, -1, 0, 0] }, I: 1 }, snatch: { a: 3, b: "Snatch", c: 0, d: 16, e: 0, g: 4 }, snore: { a: 2, b: "Snore", c: 50, d: 0, e: 2, h: 100, k: 100, l: { a: 30, c: 1 }, I: 1 }, spectralthief: { a: 7, b: "Spectral Thief", c: 90, d: 7, e: 1, h: 100, k: 175, D: 1 }, speedswap: { a: 7, b: "Speed Swap", c: 0, d: 13, e: 0 }, spikyshield: { a: 6, b: "Spiky Shield", c: 0, d: 11, e: 0, g: 4 }, spiritshackle: { a: 7, b: "Spirit Shackle", c: 80, d: 7, e: 1, h: 100, k: 160, l: { a: 100 } }, soak: { a: 5, b: "Soak", c: 0, d: 10, e: 0, h: 100 }, softboiled: { a: 1, b: "Soft-Boiled", c: 0, d: 0, e: 0 }, solarbeam: { a: 1, b: "Solar Beam", c: 120, d: 11, e: 2, h: 100, k: 190, C: 1 }, solarblade: { a: 7, b: "Solar Blade", c: 125, d: 11, e: 1, h: 100, k: 190, C: 1, D: 1 }, sonicboom: { a: 1, b: "Sonic Boom", c: 0, d: 0, e: 2, h: 90, k: 100 }, soulstealing7starstrike: { a: 7, b: "Soul-Stealing 7-Star Strike", c: 195, d: 7, e: 1, D: 1 }, spacialrend: { a: 4, b: "Spacial Rend", c: 100, d: 15, e: 2, h: 95, k: 180 }, spark: { a: 2, b: "Spark", c: 65, d: 12, e: 1, h: 100, k: 120, l: { a: 30, b: 4 }, D: 1 }, sparklingaria: { a: 7, b: "Sparkling Aria", c: 90, d: 10, e: 2, h: 100, j: 1, k: 175, l: { a: 100 }, I: 1 }, spiderweb: { a: 2, b: "Spider Web", c: 0, d: 6, e: 0 }, spikecannon: { a: 1, b: "Spike Cannon", c: 20, d: 0, e: 1, h: 100, i: [2, 5], k: 100 }, spikes: { a: 2, b: "Spikes", c: 0, d: 4, e: 0 }, spitup: { a: 3, b: "Spit Up", c: 0, d: 0, e: 2, h: 100, k: 100 }, spite: { a: 2, b: "Spite", c: 0, d: 7, e: 0, h: 100 }, splash: { a: 1, b: "Splash", c: 0, d: 0, e: 0 }, splinteredstormshards: { a: 7, b: "Splintered Stormshards", c: 190, d: 5, e: 1 }, spore: { a: 1, b: "Spore", c: 0, d: 11, e: 0, h: 100, E: 1 }, spotlight: { a: 7, b: "Spotlight", c: 0, d: 0, e: 0, g: 3 }, stealthrock: { a: 4, b: "Stealth Rock", c: 0, d: 5, e: 0 }, steameruption: { a: 6, b: "Steam Eruption", c: 110, d: 10, e: 2, h: 95, k: 185, l: { a: 30, b: 3 } }, steelwing: { a: 2, b: "Steel Wing", c: 70, d: 8, e: 1, h: 90, k: 140, l: { a: 10, f: [0, 0, 1, 0, 0, 0] }, D: 1 }, stickyweb: { a: 6, b: "Sticky Web", c: 0, d: 6, e: 0 }, stockpile: { a: 3, b: "Stockpile", c: 0, d: 0, e: 0 }, stokedsparksurfer: { a: 7, b: "Stoked Sparksurfer", c: 175, d: 12, e: 2, l: { a: 100, b: 4 } }, stomp: { a: 1, b: "Stomp", c: 65, d: 0, e: 1, h: 100, k: 120, l: { a: 30, c: 1 }, D: 1 }, stompingtantrum: { a: 7, b: "Stomping Tantrum", c: 75, d: 4, e: 1, h: 100, k: 140, D: 1 }, stoneedge: { a: 4, b: "Stone Edge", c: 100, d: 5, e: 1, h: 80, k: 180 }, storedpower: { a: 5, b: "Stored Power", c: 20, d: 13, e: 2, h: 100, k: 160 }, stormthrow: { a: 5, b: "Storm Throw", c: 60, d: 1, e: 1, h: 100, k: 120, D: 1 }, steamroller: { a: 5, b: "Steamroller", c: 65, d: 6, e: 1, h: 100, k: 120, l: { a: 30, c: 1 }, D: 1 }, strength: { a: 1, b: "Strength", c: 80, d: 0, e: 1, h: 100, k: 160, D: 1 }, strengthsap: { a: 7, b: "Strength Sap", c: 0, d: 11, e: 0, h: 100 }, stringshot: { a: 1, b: "String Shot", c: 0, d: 6, e: 0, h: 95, j: 1 }, struggle: { a: 1, b: "Struggle", c: 50, d: 18, e: 1, k: 1, D: 1 }, strugglebug: { a: 5, b: "Struggle Bug", c: 50, d: 6, e: 2, h: 100, j: 1, k: 100, l: { a: 100, e: [0, 0, 0, -1, 0, 0] } }, stunspore: { a: 1, b: "Stun Spore", c: 0, d: 11, e: 0, h: 75, E: 1 }, submission: { a: 1, b: "Submission", c: 80, d: 1, e: 1, h: 80, k: 160, m: [1, 4], D: 1 }, substitute: { a: 1, b: "Substitute", c: 0, d: 0, e: 0 }, subzeroslammer: { a: 7, b: "Subzero Slammer", c: 1, d: 14, e: 1 }, suckerpunch: { a: 4, b: "Sucker Punch", c: 70, d: 16, e: 1, g: 1, h: 100, k: 140, D: 1 }, sunnyday: { a: 2, b: "Sunny Day", c: 0, d: 9, e: 0 }, sunsteelstrike: { a: 7, b: "Sunsteel Strike", c: 100, d: 8, e: 1, f: 1, h: 100, k: 180, D: 1 }, superfang: { a: 1, b: "Super Fang", c: 0, d: 0, e: 1, h: 90, k: 100, D: 1 }, superpower: { a: 3, b: "Superpower", c: 120, d: 1, e: 1, h: 100, k: 190, D: 1 }, supersonic: { a: 1, b: "Supersonic", c: 0, d: 0, e: 0, h: 55, I: 1 }, supersonicskystrike: { a: 7, b: "Supersonic Skystrike", c: 1, d: 2, e: 1 }, surf: { a: 1, b: "Surf", c: 90, d: 10, e: 2, h: 100, j: 1, k: 175 }, swagger: { a: 2, b: "Swagger", c: 0, d: 0, e: 0, h: 85 }, swallow: { a: 3, b: "Swallow", c: 0, d: 0, e: 0 }, sweetkiss: { a: 2, b: "Sweet Kiss", c: 0, d: 17, e: 0, h: 75 }, sweetscent: { a: 2, b: "Sweet Scent", c: 0, d: 0, e: 0, h: 100, j: 1 }, swift: { a: 1, b: "Swift", c: 60, d: 0, e: 2, j: 1, k: 120 }, switcheroo: { a: 4, b: "Switcheroo", c: 0, d: 16, e: 0, h: 100 }, swordsdance: { a: 1, b: "Swords Dance", c: 0, d: 0, e: 0 }, synchronoise: { a: 5, b: "Synchronoise", c: 120, d: 13, e: 2, h: 100, j: 1, k: 190 }, synthesis: { a: 2, b: "Synthesis", c: 0, d: 11, e: 0 }, tackle: { a: 1, b: "Tackle", c: 40, d: 0, e: 1, h: 100, k: 100, D: 1 }, tailglow: { a: 3, b: "Tail Glow", c: 0, d: 6, e: 0 }, tailslap: { a: 5, b: "Tail Slap", c: 25, d: 0, e: 1, h: 85, i: [2, 5], k: 140, D: 1 }, tailwhip: { a: 1, b: "Tail Whip", c: 0, d: 0, e: 0, h: 100, j: 1 }, tailwind: { a: 4, b: "Tailwind", c: 0, d: 2, e: 0 }, takedown: { a: 1, b: "Take Down", c: 90, d: 0, e: 1, h: 85, k: 175, m: [1, 4], D: 1 }, taunt: { a: 3, b: "Taunt", c: 0, d: 16, e: 0, h: 100 }, tearfullook: { a: 7, b: "Tearful Look", c: 0, d: 0, e: 0 }, technoblast: { a: 5, b: "Techno Blast", c: 120, d: 0, e: 2, h: 100, k: 190 }, tectonicrage: { a: 7, b: "Tectonic Rage", c: 1, d: 4, e: 1 }, teeterdance: { a: 3, b: "Teeter Dance", c: 0, d: 0, e: 0, h: 100, j: 1 }, telekinesis: { a: 5, b: "Telekinesis", c: 0, d: 13, e: 0 }, teleport: { a: 1, b: "Teleport", c: 0, d: 13, e: 0 }, thief: { a: 2, b: "Thief", c: 60, d: 16, e: 1, h: 100, k: 120, D: 1 }, thousandarrows: { a: 6, b: "Thousand Arrows", c: 90, d: 4, e: 1, h: 100, j: 1, k: 180 }, thousandwaves: { a: 6, b: "Thousand Waves", c: 90, d: 4, e: 1, h: 100, j: 1, k: 175 }, thrash: { a: 1, b: "Thrash", c: 120, d: 0, e: 1, h: 100, k: 190, D: 1 }, throatchop: { a: 7, b: "Throat Chop", c: 80, d: 16, e: 1, h: 100, k: 160, l: { a: 100 }, D: 1 }, thunder: { a: 1, b: "Thunder", c: 110, d: 12, e: 2, h: 70, k: 185, l: { a: 30, b: 4 } }, thunderfang: { a: 4, b: "Thunder Fang", c: 65, d: 12, e: 1, h: 95, k: 120, A: 1, D: 1 }, thunderpunch: { a: 1, b: "Thunder Punch", c: 75, d: 12, e: 1, h: 100, k: 140, l: { a: 10, b: 4 }, D: 1, G: 1 }, thundershock: { a: 1, b: "Thunder Shock", c: 40, d: 12, e: 2, h: 100, k: 100, l: { a: 10, b: 4 } }, thunderwave: { a: 1, b: "Thunder Wave", c: 0, d: 12, e: 0, h: 90 }, thunderbolt: { a: 1, b: "Thunderbolt", c: 90, d: 12, e: 2, h: 100, k: 175, l: { a: 10, b: 4 } }, tickle: { a: 3, b: "Tickle", c: 0, d: 0, e: 0, h: 100 }, topsyturvy: { a: 6, b: "Topsy-Turvy", c: 0, d: 16, e: 0 }, torment: { a: 3, b: "Torment", c: 0, d: 16, e: 0, h: 100 }, toxic: { a: 1, b: "Toxic", c: 0, d: 3, e: 0, h: 90 }, toxicspikes: { a: 4, b: "Toxic Spikes", c: 0, d: 3, e: 0 }, toxicthread: { a: 7, b: "Toxic Thread", c: 0, d: 3, e: 0, h: 100 }, transform: { a: 1, b: "Transform", c: 0, d: 0, e: 0 }, triattack: { a: 1, b: "Tri Attack", c: 80, d: 0, e: 2, h: 100, k: 160, l: { a: 20 } }, trick: { a: 3, b: "Trick", c: 0, d: 13, e: 0, h: 100 }, trickortreat: { a: 6, b: "Trick-or-Treat", c: 0, d: 7, e: 0, h: 100 }, trickroom: { a: 4, b: "Trick Room", c: 0, d: 13, e: 0, g: -7 }, triplekick: { a: 2, b: "Triple Kick", c: 10, d: 1, e: 1, h: 90, i: [3, 3], k: 120, D: 1 }, tropkick: { a: 7, b: "Trop Kick", c: 70, d: 11, e: 1, h: 100, k: 140, l: { a: 100, e: [0, -1, 0, 0, 0, 0] }, D: 1 }, trumpcard: { a: 4, b: "Trump Card", c: 0, d: 0, e: 2, k: 160, D: 1 }, twineedle: { a: 1, b: "Twineedle", c: 25, d: 6, e: 1, h: 100, i: [2, 2], k: 100, l: { a: 20, b: 1 } }, twinkletackle: { a: 7, b: "Twinkle Tackle", c: 1, d: 17, e: 1 }, twister: { a: 2, b: "Twister", c: 40, d: 15, e: 2, h: 100, j: 1, k: 100, l: { a: 20, c: 1 } }, uturn: { a: 4, b: "U-turn", c: 70, d: 6, e: 1, h: 100, k: 140, D: 1 }, uproar: { a: 3, b: "Uproar", c: 90, d: 0, e: 2, h: 100, k: 175, I: 1 }, vcreate: { a: 5, b: "V-create", c: 180, d: 9, e: 1, h: 95, k: 220, D: 1 }, vacuumwave: { a: 4, b: "Vacuum Wave", c: 40, d: 1, e: 2, g: 1, h: 100, k: 100 }, venomdrench: { a: 6, b: "Venom Drench", c: 0, d: 3, e: 0, h: 100, j: 1 }, venoshock: { a: 5, b: "Venoshock", c: 65, d: 3, e: 2, h: 100, k: 120 }, vicegrip: { a: 1, b: "Vice Grip", c: 55, d: 0, e: 1, h: 100, k: 100, D: 1 }, vinewhip: { a: 1, b: "Vine Whip", c: 45, d: 11, e: 1, h: 100, k: 100, D: 1 }, vitalthrow: { a: 2, b: "Vital Throw", c: 70, d: 1, e: 1, g: -1, k: 140, D: 1 }, voltswitch: { a: 5, b: "Volt Switch", c: 70, d: 12, e: 2, h: 100, k: 140 }, volttackle: { a: 3, b: "Volt Tackle", c: 120, d: 12, e: 1, h: 100, k: 190, l: { a: 10, b: 4 }, m: [33, 100], D: 1 }, wakeupslap: { a: 4, b: "Wake-Up Slap", c: 70, d: 1, e: 1, h: 100, k: 140, D: 1 }, watergun: { a: 1, b: "Water Gun", c: 40, d: 10, e: 2, h: 100, k: 100 }, waterpledge: { a: 5, b: "Water Pledge", c: 80, d: 10, e: 2, h: 100, k: 160 }, waterpulse: { a: 3, b: "Water Pulse", c: 60, d: 10, e: 2, h: 100, k: 120, l: { a: 20, d: 1 }, F: 1 }, watersport: { a: 3, b: "Water Sport", c: 0, d: 10, e: 0 }, waterspout: { a: 3, b: "Water Spout", c: 150, d: 10, e: 2, h: 100, j: 1, k: 200 }, waterfall: { a: 1, b: "Waterfall", c: 80, d: 10, e: 1, h: 100, k: 160, l: { a: 20, c: 1 }, D: 1 }, watershuriken: { a: 6, b: "Water Shuriken", c: 15, d: 10, e: 2, g: 1, h: 100, i: [2, 5], k: 100 }, weatherball: { a: 3, b: "Weather Ball", c: 50, d: 0, e: 2, h: 100, k: 160, B: 1 }, whirlpool: { a: 2, b: "Whirlpool", c: 35, d: 10, e: 2, h: 85, k: 100 }, whirlwind: { a: 1, b: "Whirlwind", c: 0, d: 0, e: 0, g: -6 }, wideguard: { a: 5, b: "Wide Guard", c: 0, d: 5, e: 0, g: 3 }, wildcharge: { a: 5, b: "Wild Charge", c: 90, d: 12, e: 1, h: 100, k: 175, m: [1, 4], D: 1 }, willowisp: { a: 3, b: "Will-O-Wisp", c: 0, d: 9, e: 0, h: 85 }, wingattack: { a: 1, b: "Wing Attack", c: 60, d: 2, e: 1, h: 100, k: 120, D: 1 }, wish: { a: 3, b: "Wish", c: 0, d: 0, e: 0 }, withdraw: { a: 1, b: "Withdraw", c: 0, d: 10, e: 0 }, wonderroom: { a: 5, b: "Wonder Room", c: 0, d: 13, e: 0 }, woodhammer: { a: 4, b: "Wood Hammer", c: 120, d: 11, e: 1, h: 100, k: 190, m: [33, 100], D: 1 }, workup: { a: 5, b: "Work Up", c: 0, d: 0, e: 0 }, worryseed: { a: 4, b: "Worry Seed", c: 0, d: 11, e: 0, h: 100 }, wrap: { a: 1, b: "Wrap", c: 15, d: 0, e: 1, h: 90, k: 100, D: 1 }, wringout: { a: 4, b: "Wring Out", c: 0, d: 0, e: 2, h: 100, k: 190, D: 1 }, xscissor: { a: 4, b: "X-Scissor", c: 80, d: 6, e: 1, h: 100, k: 160, D: 1 }, yawn: { a: 3, b: "Yawn", c: 0, d: 0, e: 0 }, zapcannon: { a: 2, b: "Zap Cannon", c: 120, d: 12, e: 2, h: 50, k: 190, l: { a: 100, b: 4 }, B: 1 }, zenheadbutt: { a: 4, b: "Zen Headbutt", c: 80, d: 13, e: 1, h: 90, k: 160, l: { a: 20, c: 1 }, D: 1 }, zingzap: { a: 7, b: "Zing Zap", c: 80, d: 12, e: 1, h: 100, k: 160, l: { a: 30, c: 1 }, D: 1 }, nomove: { name: "(No Move)", i: [0, 0] } }, pokedex: { bulbasaur: { a: 1, b: "Bulbasaur", c: [45, 49, 49, 65, 65, 45], d: 69, e: [11, 3], f: ["ivysaur"] }, ivysaur: { a: 1, b: "Ivysaur", c: [60, 62, 63, 80, 80, 60], d: 130, e: [11, 3], f: ["venusaur"], g: "bulbasaur" }, venusaur: { a: 1, b: "Venusaur", c: [80, 82, 83, 100, 100, 80], d: 1e3, e: [11, 3], g: "ivysaur" }, venusaurmega: { a: 6, b: "Venusaur-Mega", c: [80, 100, 123, 122, 120, 80], d: 1555, e: [11, 3], h: "Mega", i: "venusaur", j: "venusaurite" }, charmander: { a: 1, b: "Charmander", c: [39, 52, 43, 60, 50, 65], d: 85, e: [9], f: ["charmeleon"] }, charmeleon: { a: 1, b: "Charmeleon", c: [58, 64, 58, 80, 65, 80], d: 190, e: [9], f: ["charizard"], g: "charmander" }, charizard: { a: 1, b: "Charizard", c: [78, 84, 78, 109, 85, 100], d: 905, e: [9, 2], g: "charmeleon" }, charizardmegax: { a: 6, b: "Charizard-Mega-X", c: [78, 130, 111, 130, 85, 100], d: 1105, e: [9, 15], h: "Mega-X", i: "charizard", j: "charizarditex" }, charizardmegay: { a: 6, b: "Charizard-Mega-Y", c: [78, 104, 78, 159, 115, 100], d: 1005, e: [9, 2], h: "Mega-Y", i: "charizard", j: "charizarditey" }, squirtle: { a: 1, b: "Squirtle", c: [44, 48, 65, 50, 64, 43], d: 90, e: [10], f: ["wartortle"] }, wartortle: { a: 1, b: "Wartortle", c: [59, 63, 80, 65, 80, 58], d: 225, e: [10], f: ["blastoise"], g: "squirtle" }, blastoise: { a: 1, b: "Blastoise", c: [79, 83, 100, 85, 105, 78], d: 855, e: [10], g: "wartortle" }, blastoisemega: { a: 6, b: "Blastoise-Mega", c: [79, 103, 120, 135, 115, 78], d: 1011, e: [10], h: "Mega", i: "blastoise", j: "blastoisinite" }, caterpie: { a: 1, b: "Caterpie", c: [45, 30, 35, 20, 20, 45], d: 29, e: [6], f: ["metapod"] }, metapod: { a: 1, b: "Metapod", c: [50, 20, 55, 25, 25, 30], d: 99, e: [6], f: ["butterfree"], g: "caterpie" }, butterfree: { a: 1, b: "Butterfree", c: [60, 45, 50, 90, 80, 70], d: 320, e: [6, 2], g: "metapod" }, weedle: { a: 1, b: "Weedle", c: [40, 35, 30, 20, 20, 50], d: 32, e: [6, 3], f: ["kakuna"] }, kakuna: { a: 1, b: "Kakuna", c: [45, 25, 50, 25, 25, 35], d: 100, e: [6, 3], f: ["beedrill"], g: "weedle" }, beedrill: { a: 1, b: "Beedrill", c: [65, 90, 40, 45, 80, 75], d: 295, e: [6, 3], g: "kakuna" }, beedrillmega: { a: 6, b: "Beedrill-Mega", c: [65, 150, 40, 15, 80, 145], d: 405, e: [6, 3], h: "Mega", i: "beedrill", j: "beedrillite" }, pidgey: { a: 1, b: "Pidgey", c: [40, 45, 40, 35, 35, 56], d: 18, e: [0, 2], f: ["pidgeotto"] }, pidgeotto: { a: 1, b: "Pidgeotto", c: [63, 60, 55, 50, 50, 71], d: 300, e: [0, 2], f: ["pidgeot"], g: "pidgey" }, pidgeot: { a: 1, b: "Pidgeot", c: [83, 80, 75, 70, 70, 101], d: 395, e: [0, 2], g: "pidgeotto" }, pidgeotmega: { a: 6, b: "Pidgeot-Mega", c: [83, 80, 80, 135, 80, 121], d: 505, e: [0, 2], h: "Mega", i: "pidgeot", j: "pidgeotite" }, rattata: { a: 1, b: "Rattata", c: [30, 56, 35, 25, 35, 72], d: 35, e: [0], f: ["raticate"] }, rattataalola: { a: 7, b: "Rattata-Alola", c: [30, 56, 35, 25, 35, 72], d: 38, e: [16, 0], f: ["raticatealola"], h: "Alola", i: "rattata" }, raticate: { a: 1, b: "Raticate", c: [55, 81, 60, 50, 70, 97], d: 185, e: [0], g: "rattata" }, raticatealola: { a: 7, b: "Raticate-Alola", c: [75, 71, 70, 40, 80, 77], d: 255, e: [16, 0], g: "rattataalola", h: "Alola", i: "raticate" }, spearow: { a: 1, b: "Spearow", c: [40, 60, 30, 31, 31, 70], d: 20, e: [0, 2], f: ["fearow"] }, fearow: { a: 1, b: "Fearow", c: [65, 90, 65, 61, 61, 100], d: 380, e: [0, 2], g: "spearow" }, ekans: { a: 1, b: "Ekans", c: [35, 60, 44, 40, 54, 55], d: 69, e: [3], f: ["arbok"] }, arbok: { a: 1, b: "Arbok", c: [60, 95, 69, 65, 79, 80], d: 650, e: [3], g: "ekans" }, pikachu: { a: 1, b: "Pikachu", c: [35, 55, 40, 50, 50, 90], d: 60, e: [12], f: ["raichu", "raichualola"], g: "pichu" }, pikachucosplay: { a: 1, b: "Pikachu-Cosplay", c: [35, 55, 40, 50, 50, 90], d: 60, e: [12], h: "Cosplay", i: "pikachu" }, pikachurockstar: { a: 1, b: "Pikachu-Rock-Star", c: [35, 55, 40, 50, 50, 90], d: 60, e: [12], h: "Rock-Star", i: "pikachu" }, pikachubelle: { a: 1, b: "Pikachu-Belle", c: [35, 55, 40, 50, 50, 90], d: 60, e: [12], h: "Belle", i: "pikachu" }, pikachupopstar: { a: 1, b: "Pikachu-Pop-Star", c: [35, 55, 40, 50, 50, 90], d: 60, e: [12], h: "Pop-Star", i: "pikachu" }, pikachuphd: { a: 1, b: "Pikachu-PhD", c: [35, 55, 40, 50, 50, 90], d: 60, e: [12], h: "PhD", i: "pikachu" }, pikachulibre: { a: 1, b: "Pikachu-Libre", c: [35, 55, 40, 50, 50, 90], d: 60, e: [12], h: "Libre", i: "pikachu" }, pikachuoriginal: { a: 1, b: "Pikachu-Original", c: [35, 55, 40, 50, 50, 90], d: 60, e: [12], h: "Original", i: "pikachu" }, pikachuhoenn: { a: 1, b: "Pikachu-Hoenn", c: [35, 55, 40, 50, 50, 90], d: 60, e: [12], h: "Hoenn", i: "pikachu" }, pikachusinnoh: { a: 1, b: "Pikachu-Sinnoh", c: [35, 55, 40, 50, 50, 90], d: 60, e: [12], h: "Sinnoh", i: "pikachu" }, pikachuunova: { a: 1, b: "Pikachu-Unova", c: [35, 55, 40, 50, 50, 90], d: 60, e: [12], h: "Unova", i: "pikachu" }, pikachukalos: { a: 1, b: "Pikachu-Kalos", c: [35, 55, 40, 50, 50, 90], d: 60, e: [12], h: "Kalos", i: "pikachu" }, pikachualola: { a: 7, b: "Pikachu-Alola", c: [35, 55, 40, 50, 50, 90], d: 60, e: [12], h: "Alola", i: "pikachu" }, pikachupartner: { a: 1, b: "Pikachu-Partner", c: [35, 55, 40, 50, 50, 90], d: 60, e: [12], h: "Partner", i: "pikachu" }, raichu: { a: 1, b: "Raichu", c: [60, 90, 55, 90, 80, 110], d: 300, e: [12], g: "pikachu" }, raichualola: { a: 7, b: "Raichu-Alola", c: [60, 85, 50, 95, 85, 110], d: 210, e: [12, 13], g: "pikachu", h: "Alola", i: "raichu" }, sandshrew: { a: 1, b: "Sandshrew", c: [50, 75, 85, 20, 30, 40], d: 120, e: [4], f: ["sandslash"] }, sandshrewalola: { a: 7, b: "Sandshrew-Alola", c: [50, 75, 90, 10, 35, 40], d: 400, e: [14, 8], f: ["sandslashalola"], h: "Alola", i: "sandshrew" }, sandslash: { a: 1, b: "Sandslash", c: [75, 100, 110, 45, 55, 65], d: 295, e: [4], g: "sandshrew" }, sandslashalola: { a: 7, b: "Sandslash-Alola", c: [75, 100, 120, 25, 65, 65], d: 550, e: [14, 8], g: "sandshrewalola", h: "Alola", i: "sandslash" }, nidoranf: { a: 1, b: "Nidoran-F", c: [55, 47, 52, 40, 40, 41], d: 70, e: [3], f: ["nidorina"] }, nidorina: { a: 1, b: "Nidorina", c: [70, 62, 67, 55, 55, 56], d: 200, e: [3], f: ["nidoqueen"], g: "nidoranf" }, nidoqueen: { a: 1, b: "Nidoqueen", c: [90, 92, 87, 75, 85, 76], d: 600, e: [3, 4], g: "nidorina" }, nidoranm: { a: 1, b: "Nidoran-M", c: [46, 57, 40, 40, 40, 50], d: 90, e: [3], f: ["nidorino"] }, nidorino: { a: 1, b: "Nidorino", c: [61, 72, 57, 55, 55, 65], d: 195, e: [3], f: ["nidoking"], g: "nidoranm" }, nidoking: { a: 1, b: "Nidoking", c: [81, 102, 77, 85, 75, 85], d: 620, e: [3, 4], g: "nidorino" }, clefairy: { a: 1, b: "Clefairy", c: [70, 45, 48, 60, 65, 35], d: 75, e: [17], f: ["clefable"], g: "cleffa" }, clefable: { a: 1, b: "Clefable", c: [95, 70, 73, 95, 90, 60], d: 400, e: [17], g: "clefairy" }, vulpix: { a: 1, b: "Vulpix", c: [38, 41, 40, 50, 65, 65], d: 99, e: [9], f: ["ninetales"] }, vulpixalola: { a: 7, b: "Vulpix-Alola", c: [38, 41, 40, 50, 65, 65], d: 99, e: [14], f: ["ninetalesalola"], h: "Alola", i: "vulpix" }, ninetales: { a: 1, b: "Ninetales", c: [73, 76, 75, 81, 100, 100], d: 199, e: [9], g: "vulpix" }, ninetalesalola: { a: 7, b: "Ninetales-Alola", c: [73, 67, 75, 81, 100, 109], d: 199, e: [14, 17], g: "vulpixalola", h: "Alola", i: "ninetales" }, jigglypuff: { a: 1, b: "Jigglypuff", c: [115, 45, 20, 45, 25, 20], d: 55, e: [0, 17], f: ["wigglytuff"], g: "igglybuff" }, wigglytuff: { a: 1, b: "Wigglytuff", c: [140, 70, 45, 85, 50, 45], d: 120, e: [0, 17], g: "jigglypuff" }, zubat: { a: 1, b: "Zubat", c: [40, 45, 35, 30, 40, 55], d: 75, e: [3, 2], f: ["golbat"] }, golbat: { a: 1, b: "Golbat", c: [75, 80, 70, 65, 75, 90], d: 550, e: [3, 2], f: ["crobat"], g: "zubat" }, oddish: { a: 1, b: "Oddish", c: [45, 50, 55, 75, 65, 30], d: 54, e: [11, 3], f: ["gloom"] }, gloom: { a: 1, b: "Gloom", c: [60, 65, 70, 85, 75, 40], d: 86, e: [11, 3], f: ["vileplume", "bellossom"], g: "oddish" }, vileplume: { a: 1, b: "Vileplume", c: [75, 80, 85, 110, 90, 50], d: 186, e: [11, 3], g: "gloom" }, paras: { a: 1, b: "Paras", c: [35, 70, 55, 45, 55, 25], d: 54, e: [6, 11], f: ["parasect"] }, parasect: { a: 1, b: "Parasect", c: [60, 95, 80, 60, 80, 30], d: 295, e: [6, 11], g: "paras" }, venonat: { a: 1, b: "Venonat", c: [60, 55, 50, 40, 55, 45], d: 300, e: [6, 3], f: ["venomoth"] }, venomoth: { a: 1, b: "Venomoth", c: [70, 65, 60, 90, 75, 90], d: 125, e: [6, 3], g: "venonat" }, diglett: { a: 1, b: "Diglett", c: [10, 55, 25, 35, 45, 95], d: 8, e: [4], f: ["dugtrio"] }, diglettalola: { a: 7, b: "Diglett-Alola", c: [10, 55, 30, 35, 45, 90], d: 10, e: [4, 8], f: ["dugtrioalola"], h: "Alola", i: "diglett" }, dugtrio: { a: 1, b: "Dugtrio", c: [35, 100, 50, 50, 70, 120], d: 333, e: [4], g: "diglett" }, dugtrioalola: { a: 7, b: "Dugtrio-Alola", c: [35, 100, 60, 50, 70, 110], d: 666, e: [4, 8], g: "diglettalola", h: "Alola", i: "dugtrio" }, meowth: { a: 1, b: "Meowth", c: [40, 45, 35, 40, 40, 90], d: 42, e: [0], f: ["persian"] }, meowthalola: { a: 7, b: "Meowth-Alola", c: [40, 35, 35, 50, 40, 90], d: 42, e: [16], f: ["persianalola"], h: "Alola", i: "meowth" }, persian: { a: 1, b: "Persian", c: [65, 70, 60, 65, 65, 115], d: 320, e: [0], g: "meowth" }, persianalola: { a: 7, b: "Persian-Alola", c: [65, 60, 60, 75, 65, 115], d: 330, e: [16], g: "meowthalola", h: "Alola", i: "persian" }, psyduck: { a: 1, b: "Psyduck", c: [50, 52, 48, 65, 50, 55], d: 196, e: [10], f: ["golduck"] }, golduck: { a: 1, b: "Golduck", c: [80, 82, 78, 95, 80, 85], d: 766, e: [10], g: "psyduck" }, mankey: { a: 1, b: "Mankey", c: [40, 80, 35, 35, 45, 70], d: 280, e: [1], f: ["primeape"] }, primeape: { a: 1, b: "Primeape", c: [65, 105, 60, 60, 70, 95], d: 320, e: [1], g: "mankey" }, growlithe: { a: 1, b: "Growlithe", c: [55, 70, 45, 70, 50, 60], d: 190, e: [9], f: ["arcanine"] }, arcanine: { a: 1, b: "Arcanine", c: [90, 110, 80, 100, 80, 95], d: 1550, e: [9], g: "growlithe" }, poliwag: { a: 1, b: "Poliwag", c: [40, 50, 40, 40, 40, 90], d: 124, e: [10], f: ["poliwhirl"] }, poliwhirl: { a: 1, b: "Poliwhirl", c: [65, 65, 65, 50, 50, 90], d: 200, e: [10], f: ["poliwrath", "politoed"], g: "poliwag" }, poliwrath: { a: 1, b: "Poliwrath", c: [90, 95, 95, 70, 90, 70], d: 540, e: [10, 1], g: "poliwhirl" }, abra: { a: 1, b: "Abra", c: [25, 20, 15, 105, 55, 90], d: 195, e: [13], f: ["kadabra"] }, kadabra: { a: 1, b: "Kadabra", c: [40, 35, 30, 120, 70, 105], d: 565, e: [13], f: ["alakazam"], g: "abra" }, alakazam: { a: 1, b: "Alakazam", c: [55, 50, 45, 135, 95, 120], d: 480, e: [13], g: "kadabra" }, alakazammega: { a: 6, b: "Alakazam-Mega", c: [55, 50, 65, 175, 105, 150], d: 480, e: [13], h: "Mega", i: "alakazam", j: "alakazite" }, machop: { a: 1, b: "Machop", c: [70, 80, 50, 35, 35, 35], d: 195, e: [1], f: ["machoke"] }, machoke: { a: 1, b: "Machoke", c: [80, 100, 70, 50, 60, 45], d: 705, e: [1], f: ["machamp"], g: "machop" }, machamp: { a: 1, b: "Machamp", c: [90, 130, 80, 65, 85, 55], d: 1300, e: [1], g: "machoke" }, bellsprout: { a: 1, b: "Bellsprout", c: [50, 75, 35, 70, 30, 40], d: 40, e: [11, 3], f: ["weepinbell"] }, weepinbell: { a: 1, b: "Weepinbell", c: [65, 90, 50, 85, 45, 55], d: 64, e: [11, 3], f: ["victreebel"], g: "bellsprout" }, victreebel: { a: 1, b: "Victreebel", c: [80, 105, 65, 100, 70, 70], d: 155, e: [11, 3], g: "weepinbell" }, tentacool: { a: 1, b: "Tentacool", c: [40, 40, 35, 50, 100, 70], d: 455, e: [10, 3], f: ["tentacruel"] }, tentacruel: { a: 1, b: "Tentacruel", c: [80, 70, 65, 80, 120, 100], d: 550, e: [10, 3], g: "tentacool" }, geodude: { a: 1, b: "Geodude", c: [40, 80, 100, 30, 30, 20], d: 200, e: [5, 4], f: ["graveler"] }, geodudealola: { a: 7, b: "Geodude-Alola", c: [40, 80, 100, 30, 30, 20], d: 203, e: [5, 12], f: ["graveleralola"], h: "Alola", i: "geodude" }, graveler: { a: 1, b: "Graveler", c: [55, 95, 115, 45, 45, 35], d: 1050, e: [5, 4], f: ["golem"], g: "geodude" }, graveleralola: { a: 7, b: "Graveler-Alola", c: [55, 95, 115, 45, 45, 35], d: 1100, e: [5, 12], f: ["golemalola"], g: "geodudealola", h: "Alola", i: "graveler" }, golem: { a: 1, b: "Golem", c: [80, 120, 130, 55, 65, 45], d: 3e3, e: [5, 4], g: "graveler" }, golemalola: { a: 7, b: "Golem-Alola", c: [80, 120, 130, 55, 65, 45], d: 3160, e: [5, 12], g: "graveleralola", h: "Alola", i: "golem" }, ponyta: { a: 1, b: "Ponyta", c: [50, 85, 55, 65, 65, 90], d: 300, e: [9], f: ["rapidash"] }, rapidash: { a: 1, b: "Rapidash", c: [65, 100, 70, 80, 80, 105], d: 950, e: [9], g: "ponyta" }, slowpoke: { a: 1, b: "Slowpoke", c: [90, 65, 65, 40, 40, 15], d: 360, e: [10, 13], f: ["slowbro", "slowking"] }, slowbro: { a: 1, b: "Slowbro", c: [95, 75, 110, 100, 80, 30], d: 785, e: [10, 13], g: "slowpoke" }, slowbromega: { a: 6, b: "Slowbro-Mega", c: [95, 75, 180, 130, 80, 30], d: 1200, e: [10, 13], h: "Mega", i: "slowbro", j: "slowbronite" }, magnemite: { a: 1, b: "Magnemite", c: [25, 35, 70, 95, 55, 45], d: 60, e: [12, 8], f: ["magneton"] }, magneton: { a: 1, b: "Magneton", c: [50, 60, 95, 120, 70, 70], d: 600, e: [12, 8], f: ["magnezone"], g: "magnemite" }, farfetchd: { a: 1, b: "Farfetch'd", c: [52, 90, 55, 58, 62, 60], d: 150, e: [0, 2] }, doduo: { a: 1, b: "Doduo", c: [35, 85, 45, 35, 35, 75], d: 392, e: [0, 2], f: ["dodrio"] }, dodrio: { a: 1, b: "Dodrio", c: [60, 110, 70, 60, 60, 110], d: 852, e: [0, 2], g: "doduo" }, seel: { a: 1, b: "Seel", c: [65, 45, 55, 45, 70, 45], d: 900, e: [10], f: ["dewgong"] }, dewgong: { a: 1, b: "Dewgong", c: [90, 70, 80, 70, 95, 70], d: 1200, e: [10, 14], g: "seel" }, grimer: { a: 1, b: "Grimer", c: [80, 80, 50, 40, 50, 25], d: 300, e: [3], f: ["muk"] }, grimeralola: { a: 7, b: "Grimer-Alola", c: [80, 80, 50, 40, 50, 25], d: 420, e: [3, 16], f: ["mukalola"], h: "Alola", i: "grimer" }, muk: { a: 1, b: "Muk", c: [105, 105, 75, 65, 100, 50], d: 300, e: [3], g: "grimer" }, mukalola: { a: 7, b: "Muk-Alola", c: [105, 105, 75, 65, 100, 50], d: 520, e: [3, 16], g: "grimeralola", h: "Alola", i: "muk" }, shellder: { a: 1, b: "Shellder", c: [30, 65, 100, 45, 25, 40], d: 40, e: [10], f: ["cloyster"] }, cloyster: { a: 1, b: "Cloyster", c: [50, 95, 180, 85, 45, 70], d: 1325, e: [10, 14], g: "shellder" }, gastly: { a: 1, b: "Gastly", c: [30, 35, 30, 100, 35, 80], d: 1, e: [7, 3], f: ["haunter"] }, haunter: { a: 1, b: "Haunter", c: [45, 50, 45, 115, 55, 95], d: 1, e: [7, 3], f: ["gengar"], g: "gastly" }, gengar: { a: 1, b: "Gengar", c: [60, 65, 60, 130, 75, 110], d: 405, e: [7, 3], g: "haunter" }, gengarmega: { a: 6, b: "Gengar-Mega", c: [60, 65, 80, 170, 95, 130], d: 405, e: [7, 3], h: "Mega", i: "gengar", j: "gengarite" }, onix: { a: 1, b: "Onix", c: [35, 45, 160, 30, 45, 70], d: 2100, e: [5, 4], f: ["steelix"] }, drowzee: { a: 1, b: "Drowzee", c: [60, 48, 45, 43, 90, 42], d: 324, e: [13], f: ["hypno"] }, hypno: { a: 1, b: "Hypno", c: [85, 73, 70, 73, 115, 67], d: 756, e: [13], g: "drowzee" }, krabby: { a: 1, b: "Krabby", c: [30, 105, 90, 25, 25, 50], d: 65, e: [10], f: ["kingler"] }, kingler: { a: 1, b: "Kingler", c: [55, 130, 115, 50, 50, 75], d: 600, e: [10], g: "krabby" }, voltorb: { a: 1, b: "Voltorb", c: [40, 30, 50, 55, 55, 100], d: 104, e: [12], f: ["electrode"] }, electrode: { a: 1, b: "Electrode", c: [60, 50, 70, 80, 80, 150], d: 666, e: [12], g: "voltorb" }, exeggcute: { a: 1, b: "Exeggcute", c: [60, 40, 80, 60, 45, 40], d: 25, e: [11, 13], f: ["exeggutor", "exeggutoralola"] }, exeggutor: { a: 1, b: "Exeggutor", c: [95, 95, 85, 125, 75, 55], d: 1200, e: [11, 13], g: "exeggcute" }, exeggutoralola: { a: 7, b: "Exeggutor-Alola", c: [95, 105, 85, 125, 75, 45], d: 4156, e: [11, 15], g: "exeggcute", h: "Alola", i: "exeggutor" }, cubone: { a: 1, b: "Cubone", c: [50, 50, 95, 40, 50, 35], d: 65, e: [4], f: ["marowak", "marowakalola"] }, marowak: { a: 1, b: "Marowak", c: [60, 80, 110, 50, 80, 45], d: 450, e: [4], g: "cubone" }, marowakalola: { a: 7, b: "Marowak-Alola", c: [60, 80, 110, 50, 80, 45], d: 340, e: [9, 7], g: "cubone", h: "Alola", i: "marowak" }, hitmonlee: { a: 1, b: "Hitmonlee", c: [50, 120, 53, 35, 110, 87], d: 498, e: [1], g: "tyrogue" }, hitmonchan: { a: 1, b: "Hitmonchan", c: [50, 105, 79, 35, 110, 76], d: 502, e: [1], g: "tyrogue" }, lickitung: { a: 1, b: "Lickitung", c: [90, 55, 75, 60, 75, 30], d: 655, e: [0], f: ["lickilicky"] }, koffing: { a: 1, b: "Koffing", c: [40, 65, 95, 60, 45, 35], d: 10, e: [3], f: ["weezing"] }, weezing: { a: 1, b: "Weezing", c: [65, 90, 120, 85, 70, 60], d: 95, e: [3], g: "koffing" }, rhyhorn: { a: 1, b: "Rhyhorn", c: [80, 85, 95, 30, 30, 25], d: 1150, e: [4, 5], f: ["rhydon"] }, rhydon: { a: 1, b: "Rhydon", c: [105, 130, 120, 45, 45, 40], d: 1200, e: [4, 5], f: ["rhyperior"], g: "rhyhorn" }, chansey: { a: 1, b: "Chansey", c: [250, 5, 5, 35, 105, 50], d: 346, e: [0], f: ["blissey"], g: "happiny" }, tangela: { a: 1, b: "Tangela", c: [65, 55, 115, 100, 40, 60], d: 350, e: [11], f: ["tangrowth"] }, kangaskhan: { a: 1, b: "Kangaskhan", c: [105, 95, 80, 40, 80, 90], d: 800, e: [0] }, kangaskhanmega: { a: 6, b: "Kangaskhan-Mega", c: [105, 125, 100, 60, 100, 100], d: 1e3, e: [0], h: "Mega", i: "kangaskhan", j: "kangaskhanite" }, horsea: { a: 1, b: "Horsea", c: [30, 40, 70, 70, 25, 60], d: 80, e: [10], f: ["seadra"] }, seadra: { a: 1, b: "Seadra", c: [55, 65, 95, 95, 45, 85], d: 250, e: [10], f: ["kingdra"], g: "horsea" }, goldeen: { a: 1, b: "Goldeen", c: [45, 67, 60, 35, 50, 63], d: 150, e: [10], f: ["seaking"] }, seaking: { a: 1, b: "Seaking", c: [80, 92, 65, 65, 80, 68], d: 390, e: [10], g: "goldeen" }, staryu: { a: 1, b: "Staryu", c: [30, 45, 55, 70, 55, 85], d: 345, e: [10], f: ["starmie"] }, starmie: { a: 1, b: "Starmie", c: [60, 75, 85, 100, 85, 115], d: 800, e: [10, 13], g: "staryu" }, mrmime: { a: 1, b: "Mr. Mime", c: [40, 45, 65, 100, 120, 90], d: 545, e: [13, 17], g: "mimejr" }, scyther: { a: 1, b: "Scyther", c: [70, 110, 80, 55, 80, 105], d: 560, e: [6, 2], f: ["scizor"] }, jynx: { a: 1, b: "Jynx", c: [65, 50, 35, 115, 95, 95], d: 406, e: [14, 13], g: "smoochum" }, electabuzz: { a: 1, b: "Electabuzz", c: [65, 83, 57, 95, 85, 105], d: 300, e: [12], f: ["electivire"], g: "elekid" }, magmar: { a: 1, b: "Magmar", c: [65, 95, 57, 100, 85, 93], d: 445, e: [9], f: ["magmortar"], g: "magby" }, pinsir: { a: 1, b: "Pinsir", c: [65, 125, 100, 55, 70, 85], d: 550, e: [6] }, pinsirmega: { a: 6, b: "Pinsir-Mega", c: [65, 155, 120, 65, 90, 105], d: 590, e: [6, 2], h: "Mega", i: "pinsir", j: "pinsirite" }, tauros: { a: 1, b: "Tauros", c: [75, 100, 95, 40, 70, 110], d: 884, e: [0] }, magikarp: { a: 1, b: "Magikarp", c: [20, 10, 55, 15, 20, 80], d: 100, e: [10], f: ["gyarados"] }, gyarados: { a: 1, b: "Gyarados", c: [95, 125, 79, 60, 100, 81], d: 2350, e: [10, 2], g: "magikarp" }, gyaradosmega: { a: 6, b: "Gyarados-Mega", c: [95, 155, 109, 70, 130, 81], d: 3050, e: [10, 16], h: "Mega", i: "gyarados", j: "gyaradosite" }, lapras: { a: 1, b: "Lapras", c: [130, 85, 80, 85, 95, 60], d: 2200, e: [10, 14] }, ditto: { a: 1, b: "Ditto", c: [48, 48, 48, 48, 48, 48], d: 40, e: [0] }, eevee: { a: 1, b: "Eevee", c: [55, 55, 50, 45, 65, 55], d: 65, e: [0], f: ["vaporeon", "jolteon", "flareon", "espeon", "umbreon", "leafeon", "glaceon", "sylveon"] }, vaporeon: { a: 1, b: "Vaporeon", c: [130, 65, 60, 110, 95, 65], d: 290, e: [10], g: "eevee" }, jolteon: { a: 1, b: "Jolteon", c: [65, 65, 60, 110, 95, 130], d: 245, e: [12], g: "eevee" }, flareon: { a: 1, b: "Flareon", c: [65, 130, 60, 95, 110, 65], d: 250, e: [9], g: "eevee" }, porygon: { a: 1, b: "Porygon", c: [65, 60, 70, 85, 75, 40], d: 365, e: [0], f: ["porygon2"] }, omanyte: { a: 1, b: "Omanyte", c: [35, 40, 100, 90, 55, 35], d: 75, e: [5, 10], f: ["omastar"] }, omastar: { a: 1, b: "Omastar", c: [70, 60, 125, 115, 70, 55], d: 350, e: [5, 10], g: "omanyte" }, kabuto: { a: 1, b: "Kabuto", c: [30, 80, 90, 55, 45, 55], d: 115, e: [5, 10], f: ["kabutops"] }, kabutops: { a: 1, b: "Kabutops", c: [60, 115, 105, 65, 70, 80], d: 405, e: [5, 10], g: "kabuto" }, aerodactyl: { a: 1, b: "Aerodactyl", c: [80, 105, 65, 60, 75, 130], d: 590, e: [5, 2] }, aerodactylmega: { a: 6, b: "Aerodactyl-Mega", c: [80, 135, 85, 70, 95, 150], d: 790, e: [5, 2], h: "Mega", i: "aerodactyl", j: "aerodactylite" }, snorlax: { a: 1, b: "Snorlax", c: [160, 110, 65, 65, 110, 30], d: 4600, e: [0], g: "munchlax" }, articuno: { a: 1, b: "Articuno", c: [90, 85, 100, 95, 125, 85], d: 554, e: [14, 2] }, zapdos: { a: 1, b: "Zapdos", c: [90, 90, 85, 125, 90, 100], d: 526, e: [12, 2] }, moltres: { a: 1, b: "Moltres", c: [90, 100, 90, 125, 85, 90], d: 600, e: [9, 2] }, dratini: { a: 1, b: "Dratini", c: [41, 64, 45, 50, 50, 50], d: 33, e: [15], f: ["dragonair"] }, dragonair: { a: 1, b: "Dragonair", c: [61, 84, 65, 70, 70, 70], d: 165, e: [15], f: ["dragonite"], g: "dratini" }, dragonite: { a: 1, b: "Dragonite", c: [91, 134, 95, 100, 100, 80], d: 2100, e: [15, 2], g: "dragonair" }, mewtwo: { a: 1, b: "Mewtwo", c: [106, 110, 90, 154, 90, 130], d: 1220, e: [13] }, mewtwomegax: { a: 6, b: "Mewtwo-Mega-X", c: [106, 190, 100, 154, 100, 130], d: 1270, e: [13, 1], h: "Mega-X", i: "mewtwo", j: "mewtwonitex" }, mewtwomegay: { a: 6, b: "Mewtwo-Mega-Y", c: [106, 150, 70, 194, 120, 140], d: 330, e: [13], h: "Mega-Y", i: "mewtwo", j: "mewtwonitey" }, mew: { a: 1, b: "Mew", c: [100, 100, 100, 100, 100, 100], d: 40, e: [13] }, chikorita: { a: 2, b: "Chikorita", c: [45, 49, 65, 49, 65, 45], d: 64, e: [11], f: ["bayleef"] }, bayleef: { a: 2, b: "Bayleef", c: [60, 62, 80, 63, 80, 60], d: 158, e: [11], f: ["meganium"], g: "chikorita" }, meganium: { a: 2, b: "Meganium", c: [80, 82, 100, 83, 100, 80], d: 1005, e: [11], g: "bayleef" }, cyndaquil: { a: 2, b: "Cyndaquil", c: [39, 52, 43, 60, 50, 65], d: 79, e: [9], f: ["quilava"] }, quilava: { a: 2, b: "Quilava", c: [58, 64, 58, 80, 65, 80], d: 190, e: [9], f: ["typhlosion"], g: "cyndaquil" }, typhlosion: { a: 2, b: "Typhlosion", c: [78, 84, 78, 109, 85, 100], d: 795, e: [9], g: "quilava" }, totodile: { a: 2, b: "Totodile", c: [50, 65, 64, 44, 48, 43], d: 95, e: [10], f: ["croconaw"] }, croconaw: { a: 2, b: "Croconaw", c: [65, 80, 80, 59, 63, 58], d: 250, e: [10], f: ["feraligatr"], g: "totodile" }, feraligatr: { a: 2, b: "Feraligatr", c: [85, 105, 100, 79, 83, 78], d: 888, e: [10], g: "croconaw" }, sentret: { a: 2, b: "Sentret", c: [35, 46, 34, 35, 45, 20], d: 60, e: [0], f: ["furret"] }, furret: { a: 2, b: "Furret", c: [85, 76, 64, 45, 55, 90], d: 325, e: [0], g: "sentret" }, hoothoot: { a: 2, b: "Hoothoot", c: [60, 30, 30, 36, 56, 50], d: 212, e: [0, 2], f: ["noctowl"] }, noctowl: { a: 2, b: "Noctowl", c: [100, 50, 50, 86, 96, 70], d: 408, e: [0, 2], g: "hoothoot" }, ledyba: { a: 2, b: "Ledyba", c: [40, 20, 30, 40, 80, 55], d: 108, e: [6, 2], f: ["ledian"] }, ledian: { a: 2, b: "Ledian", c: [55, 35, 50, 55, 110, 85], d: 356, e: [6, 2], g: "ledyba" }, spinarak: { a: 2, b: "Spinarak", c: [40, 60, 40, 40, 40, 30], d: 85, e: [6, 3], f: ["ariados"] }, ariados: { a: 2, b: "Ariados", c: [70, 90, 70, 60, 70, 40], d: 335, e: [6, 3], g: "spinarak" }, crobat: { a: 2, b: "Crobat", c: [85, 90, 80, 70, 80, 130], d: 750, e: [3, 2], g: "golbat" }, chinchou: { a: 2, b: "Chinchou", c: [75, 38, 38, 56, 56, 67], d: 120, e: [10, 12], f: ["lanturn"] }, lanturn: { a: 2, b: "Lanturn", c: [125, 58, 58, 76, 76, 67], d: 225, e: [10, 12], g: "chinchou" }, pichu: { a: 2, b: "Pichu", c: [20, 40, 15, 35, 35, 60], d: 20, e: [12], f: ["pikachu"] }, pichuspikyeared: { a: 2, b: "Pichu-Spiky-eared", c: [20, 40, 15, 35, 35, 60], d: 20, e: [12], h: "Spiky-eared", i: "pichu" }, cleffa: { a: 2, b: "Cleffa", c: [50, 25, 28, 45, 55, 15], d: 30, e: [17], f: ["clefairy"] }, igglybuff: { a: 2, b: "Igglybuff", c: [90, 30, 15, 40, 20, 15], d: 10, e: [0, 17], f: ["jigglypuff"] }, togepi: { a: 2, b: "Togepi", c: [35, 20, 65, 40, 65, 20], d: 15, e: [17], f: ["togetic"] }, togetic: { a: 2, b: "Togetic", c: [55, 40, 85, 80, 105, 40], d: 32, e: [17, 2], f: ["togekiss"], g: "togepi" }, natu: { a: 2, b: "Natu", c: [40, 50, 45, 70, 45, 70], d: 20, e: [13, 2], f: ["xatu"] }, xatu: { a: 2, b: "Xatu", c: [65, 75, 70, 95, 70, 95], d: 150, e: [13, 2], g: "natu" }, mareep: { a: 2, b: "Mareep", c: [55, 40, 40, 65, 45, 35], d: 78, e: [12], f: ["flaaffy"] }, flaaffy: { a: 2, b: "Flaaffy", c: [70, 55, 55, 80, 60, 45], d: 133, e: [12], f: ["ampharos"], g: "mareep" }, ampharos: { a: 2, b: "Ampharos", c: [90, 75, 85, 115, 90, 55], d: 615, e: [12], g: "flaaffy" }, ampharosmega: { a: 6, b: "Ampharos-Mega", c: [90, 95, 105, 165, 110, 45], d: 615, e: [12, 15], h: "Mega", i: "ampharos", j: "ampharosite" }, bellossom: { a: 2, b: "Bellossom", c: [75, 80, 95, 90, 100, 50], d: 58, e: [11], g: "gloom" }, marill: { a: 2, b: "Marill", c: [70, 20, 50, 20, 50, 40], d: 85, e: [10, 17], f: ["azumarill"], g: "azurill" }, azumarill: { a: 2, b: "Azumarill", c: [100, 50, 80, 60, 80, 50], d: 285, e: [10, 17], g: "marill" }, sudowoodo: { a: 2, b: "Sudowoodo", c: [70, 100, 115, 30, 65, 30], d: 380, e: [5], g: "bonsly" }, politoed: { a: 2, b: "Politoed", c: [90, 75, 75, 90, 100, 70], d: 339, e: [10], g: "poliwhirl" }, hoppip: { a: 2, b: "Hoppip", c: [35, 35, 40, 35, 55, 50], d: 5, e: [11, 2], f: ["skiploom"] }, skiploom: { a: 2, b: "Skiploom", c: [55, 45, 50, 45, 65, 80], d: 10, e: [11, 2], f: ["jumpluff"], g: "hoppip" }, jumpluff: { a: 2, b: "Jumpluff", c: [75, 55, 70, 55, 95, 110], d: 30, e: [11, 2], g: "skiploom" }, aipom: { a: 2, b: "Aipom", c: [55, 70, 55, 40, 55, 85], d: 115, e: [0], f: ["ambipom"] }, sunkern: { a: 2, b: "Sunkern", c: [30, 30, 30, 30, 30, 30], d: 18, e: [11], f: ["sunflora"] }, sunflora: { a: 2, b: "Sunflora", c: [75, 75, 55, 105, 85, 30], d: 85, e: [11], g: "sunkern" }, yanma: { a: 2, b: "Yanma", c: [65, 65, 45, 75, 45, 95], d: 380, e: [6, 2], f: ["yanmega"] }, wooper: { a: 2, b: "Wooper", c: [55, 45, 45, 25, 25, 15], d: 85, e: [10, 4], f: ["quagsire"] }, quagsire: { a: 2, b: "Quagsire", c: [95, 85, 85, 65, 65, 35], d: 750, e: [10, 4], g: "wooper" }, espeon: { a: 2, b: "Espeon", c: [65, 65, 60, 130, 95, 110], d: 265, e: [13], g: "eevee" }, umbreon: { a: 2, b: "Umbreon", c: [95, 65, 110, 60, 130, 65], d: 270, e: [16], g: "eevee" }, murkrow: { a: 2, b: "Murkrow", c: [60, 85, 42, 85, 42, 91], d: 21, e: [16, 2], f: ["honchkrow"] }, slowking: { a: 2, b: "Slowking", c: [95, 75, 80, 100, 110, 30], d: 795, e: [10, 13], g: "slowpoke" }, misdreavus: { a: 2, b: "Misdreavus", c: [60, 60, 60, 85, 85, 85], d: 10, e: [7], f: ["mismagius"] }, unown: { a: 2, b: "Unown", c: [48, 72, 48, 72, 48, 48], d: 50, e: [13] }, wobbuffet: { a: 2, b: "Wobbuffet", c: [190, 33, 58, 33, 58, 33], d: 285, e: [13], g: "wynaut" }, girafarig: { a: 2, b: "Girafarig", c: [70, 80, 65, 90, 65, 85], d: 415, e: [0, 13] }, pineco: { a: 2, b: "Pineco", c: [50, 65, 90, 35, 35, 15], d: 72, e: [6], f: ["forretress"] }, forretress: { a: 2, b: "Forretress", c: [75, 90, 140, 60, 60, 40], d: 1258, e: [6, 8], g: "pineco" }, dunsparce: { a: 2, b: "Dunsparce", c: [100, 70, 70, 65, 65, 45], d: 140, e: [0] }, gligar: { a: 2, b: "Gligar", c: [65, 75, 105, 35, 65, 85], d: 648, e: [4, 2], f: ["gliscor"] }, steelix: { a: 2, b: "Steelix", c: [75, 85, 200, 55, 65, 30], d: 4e3, e: [8, 4], g: "onix" }, steelixmega: { a: 6, b: "Steelix-Mega", c: [75, 125, 230, 55, 95, 30], d: 7400, e: [8, 4], h: "Mega", i: "steelix", j: "steelixite" }, snubbull: { a: 2, b: "Snubbull", c: [60, 80, 50, 40, 40, 30], d: 78, e: [17], f: ["granbull"] }, granbull: { a: 2, b: "Granbull", c: [90, 120, 75, 60, 60, 45], d: 487, e: [17], g: "snubbull" }, qwilfish: { a: 2, b: "Qwilfish", c: [65, 95, 85, 55, 55, 85], d: 39, e: [10, 3] }, scizor: { a: 2, b: "Scizor", c: [70, 130, 100, 55, 80, 65], d: 1180, e: [6, 8], g: "scyther" }, scizormega: { a: 6, b: "Scizor-Mega", c: [70, 150, 140, 65, 100, 75], d: 1250, e: [6, 8], h: "Mega", i: "scizor", j: "scizorite" }, shuckle: { a: 2, b: "Shuckle", c: [20, 10, 230, 10, 230, 5], d: 205, e: [6, 5] }, heracross: { a: 2, b: "Heracross", c: [80, 125, 75, 40, 95, 85], d: 540, e: [6, 1] }, heracrossmega: { a: 6, b: "Heracross-Mega", c: [80, 185, 115, 40, 105, 75], d: 625, e: [6, 1], h: "Mega", i: "heracross", j: "heracronite" }, sneasel: { a: 2, b: "Sneasel", c: [55, 95, 55, 35, 75, 115], d: 280, e: [16, 14], f: ["weavile"] }, teddiursa: { a: 2, b: "Teddiursa", c: [60, 80, 50, 50, 50, 40], d: 88, e: [0], f: ["ursaring"] }, ursaring: { a: 2, b: "Ursaring", c: [90, 130, 75, 75, 75, 55], d: 1258, e: [0], g: "teddiursa" }, slugma: { a: 2, b: "Slugma", c: [40, 40, 40, 70, 40, 20], d: 350, e: [9], f: ["magcargo"] }, magcargo: { a: 2, b: "Magcargo", c: [60, 50, 120, 90, 80, 30], d: 550, e: [9, 5], g: "slugma" }, swinub: { a: 2, b: "Swinub", c: [50, 50, 40, 30, 30, 50], d: 65, e: [14, 4], f: ["piloswine"] }, piloswine: { a: 2, b: "Piloswine", c: [100, 100, 80, 60, 60, 50], d: 558, e: [14, 4], f: ["mamoswine"], g: "swinub" }, corsola: { a: 2, b: "Corsola", c: [65, 55, 95, 65, 95, 35], d: 50, e: [10, 5] }, remoraid: { a: 2, b: "Remoraid", c: [35, 65, 35, 65, 35, 65], d: 120, e: [10], f: ["octillery"] }, octillery: { a: 2, b: "Octillery", c: [75, 105, 75, 105, 75, 45], d: 285, e: [10], g: "remoraid" }, delibird: { a: 2, b: "Delibird", c: [45, 55, 45, 65, 45, 75], d: 160, e: [14, 2] }, mantine: { a: 2, b: "Mantine", c: [85, 40, 70, 80, 140, 70], d: 2200, e: [10, 2], g: "mantyke" }, skarmory: { a: 2, b: "Skarmory", c: [65, 80, 140, 40, 70, 70], d: 505, e: [8, 2] }, houndour: { a: 2, b: "Houndour", c: [45, 60, 30, 80, 50, 65], d: 108, e: [16, 9], f: ["houndoom"] }, houndoom: { a: 2, b: "Houndoom", c: [75, 90, 50, 110, 80, 95], d: 350, e: [16, 9], g: "houndour" }, houndoommega: { a: 6, b: "Houndoom-Mega", c: [75, 90, 90, 140, 90, 115], d: 495, e: [16, 9], h: "Mega", i: "houndoom", j: "houndoominite" }, kingdra: { a: 2, b: "Kingdra", c: [75, 95, 95, 95, 95, 85], d: 1520, e: [10, 15], g: "seadra" }, phanpy: { a: 2, b: "Phanpy", c: [90, 60, 60, 40, 40, 40], d: 335, e: [4], f: ["donphan"] }, donphan: { a: 2, b: "Donphan", c: [90, 120, 120, 60, 60, 50], d: 1200, e: [4], g: "phanpy" }, porygon2: { a: 2, b: "Porygon2", c: [85, 80, 90, 105, 95, 60], d: 325, e: [0], f: ["porygonz"], g: "porygon" }, stantler: { a: 2, b: "Stantler", c: [73, 95, 62, 85, 65, 85], d: 712, e: [0] }, smeargle: { a: 2, b: "Smeargle", c: [55, 20, 35, 20, 45, 75], d: 580, e: [0] }, pokestarsmeargle: { a: 2, b: "Pokestar Smeargle", c: [55, 20, 35, 20, 45, 75], d: 610, e: [0] }, tyrogue: { a: 2, b: "Tyrogue", c: [35, 35, 35, 35, 35, 35], d: 210, e: [1], f: ["hitmonlee", "hitmonchan", "hitmontop"] }, hitmontop: { a: 2, b: "Hitmontop", c: [50, 95, 95, 35, 110, 70], d: 480, e: [1], g: "tyrogue" }, smoochum: { a: 2, b: "Smoochum", c: [45, 30, 15, 85, 65, 65], d: 60, e: [14, 13], f: ["jynx"] }, elekid: { a: 2, b: "Elekid", c: [45, 63, 37, 65, 55, 95], d: 235, e: [12], f: ["electabuzz"] }, magby: { a: 2, b: "Magby", c: [45, 75, 37, 70, 55, 83], d: 214, e: [9], f: ["magmar"] }, miltank: { a: 2, b: "Miltank", c: [95, 80, 105, 40, 70, 100], d: 755, e: [0] }, blissey: { a: 2, b: "Blissey", c: [255, 10, 10, 75, 135, 55], d: 468, e: [0], g: "chansey" }, raikou: { a: 2, b: "Raikou", c: [90, 85, 75, 115, 100, 115], d: 1780, e: [12] }, entei: { a: 2, b: "Entei", c: [115, 115, 85, 90, 75, 100], d: 1980, e: [9] }, suicune: { a: 2, b: "Suicune", c: [100, 75, 115, 90, 115, 85], d: 1870, e: [10] }, larvitar: { a: 2, b: "Larvitar", c: [50, 64, 50, 45, 50, 41], d: 720, e: [5, 4], f: ["pupitar"] }, pupitar: { a: 2, b: "Pupitar", c: [70, 84, 70, 65, 70, 51], d: 1520, e: [5, 4], f: ["tyranitar"], g: "larvitar" }, tyranitar: { a: 2, b: "Tyranitar", c: [100, 134, 110, 95, 100, 61], d: 2020, e: [5, 16], g: "pupitar" }, tyranitarmega: { a: 6, b: "Tyranitar-Mega", c: [100, 164, 150, 95, 120, 71], d: 2550, e: [5, 16], h: "Mega", i: "tyranitar", j: "tyranitarite" }, lugia: { a: 2, b: "Lugia", c: [106, 90, 130, 90, 154, 110], d: 2160, e: [13, 2] }, hooh: { a: 2, b: "Ho-Oh", c: [106, 130, 90, 110, 154, 90], d: 1990, e: [9, 2] }, celebi: { a: 2, b: "Celebi", c: [100, 100, 100, 100, 100, 100], d: 50, e: [13, 11] }, treecko: { a: 3, b: "Treecko", c: [40, 45, 35, 65, 55, 70], d: 50, e: [11], f: ["grovyle"] }, grovyle: { a: 3, b: "Grovyle", c: [50, 65, 45, 85, 65, 95], d: 216, e: [11], f: ["sceptile"], g: "treecko" }, sceptile: { a: 3, b: "Sceptile", c: [70, 85, 65, 105, 85, 120], d: 522, e: [11], g: "grovyle" }, sceptilemega: { a: 6, b: "Sceptile-Mega", c: [70, 110, 75, 145, 85, 145], d: 552, e: [11, 15], h: "Mega", i: "sceptile", j: "sceptilite" }, torchic: { a: 3, b: "Torchic", c: [45, 60, 40, 70, 50, 45], d: 25, e: [9], f: ["combusken"] }, combusken: { a: 3, b: "Combusken", c: [60, 85, 60, 85, 60, 55], d: 195, e: [9, 1], f: ["blaziken"], g: "torchic" }, blaziken: { a: 3, b: "Blaziken", c: [80, 120, 70, 110, 70, 80], d: 520, e: [9, 1], g: "combusken" }, blazikenmega: { a: 6, b: "Blaziken-Mega", c: [80, 160, 80, 130, 80, 100], d: 520, e: [9, 1], h: "Mega", i: "blaziken", j: "blazikenite" }, mudkip: { a: 3, b: "Mudkip", c: [50, 70, 50, 50, 50, 40], d: 76, e: [10], f: ["marshtomp"] }, marshtomp: { a: 3, b: "Marshtomp", c: [70, 85, 70, 60, 70, 50], d: 280, e: [10, 4], f: ["swampert"], g: "mudkip" }, swampert: { a: 3, b: "Swampert", c: [100, 110, 90, 85, 90, 60], d: 819, e: [10, 4], g: "marshtomp" }, swampertmega: { a: 6, b: "Swampert-Mega", c: [100, 150, 110, 95, 110, 70], d: 1020, e: [10, 4], h: "Mega", i: "swampert", j: "swampertite" }, poochyena: { a: 3, b: "Poochyena", c: [35, 55, 35, 30, 30, 35], d: 136, e: [16], f: ["mightyena"] }, mightyena: { a: 3, b: "Mightyena", c: [70, 90, 70, 60, 60, 70], d: 370, e: [16], g: "poochyena" }, zigzagoon: { a: 3, b: "Zigzagoon", c: [38, 30, 41, 30, 41, 60], d: 175, e: [0], f: ["linoone"] }, linoone: { a: 3, b: "Linoone", c: [78, 70, 61, 50, 61, 100], d: 325, e: [0], g: "zigzagoon" }, wurmple: { a: 3, b: "Wurmple", c: [45, 45, 35, 20, 30, 20], d: 36, e: [6], f: ["silcoon", "cascoon"] }, silcoon: { a: 3, b: "Silcoon", c: [50, 35, 55, 25, 25, 15], d: 100, e: [6], f: ["beautifly"], g: "wurmple" }, beautifly: { a: 3, b: "Beautifly", c: [60, 70, 50, 100, 50, 65], d: 284, e: [6, 2], g: "silcoon" }, cascoon: { a: 3, b: "Cascoon", c: [50, 35, 55, 25, 25, 15], d: 115, e: [6], f: ["dustox"], g: "wurmple" }, dustox: { a: 3, b: "Dustox", c: [60, 50, 70, 50, 90, 65], d: 316, e: [6, 3], g: "cascoon" }, lotad: { a: 3, b: "Lotad", c: [40, 30, 30, 40, 50, 30], d: 26, e: [10, 11], f: ["lombre"] }, lombre: { a: 3, b: "Lombre", c: [60, 50, 50, 60, 70, 50], d: 325, e: [10, 11], f: ["ludicolo"], g: "lotad" }, ludicolo: { a: 3, b: "Ludicolo", c: [80, 70, 70, 90, 100, 70], d: 550, e: [10, 11], g: "lombre" }, seedot: { a: 3, b: "Seedot", c: [40, 40, 50, 30, 30, 30], d: 40, e: [11], f: ["nuzleaf"] }, nuzleaf: { a: 3, b: "Nuzleaf", c: [70, 70, 40, 60, 40, 60], d: 280, e: [11, 16], f: ["shiftry"], g: "seedot" }, shiftry: { a: 3, b: "Shiftry", c: [90, 100, 60, 90, 60, 80], d: 596, e: [11, 16], g: "nuzleaf" }, taillow: { a: 3, b: "Taillow", c: [40, 55, 30, 30, 30, 85], d: 23, e: [0, 2], f: ["swellow"] }, swellow: { a: 3, b: "Swellow", c: [60, 85, 60, 75, 50, 125], d: 198, e: [0, 2], g: "taillow" }, wingull: { a: 3, b: "Wingull", c: [40, 30, 30, 55, 30, 85], d: 95, e: [10, 2], f: ["pelipper"] }, pelipper: { a: 3, b: "Pelipper", c: [60, 50, 100, 95, 70, 65], d: 280, e: [10, 2], g: "wingull" }, ralts: { a: 3, b: "Ralts", c: [28, 25, 25, 45, 35, 40], d: 66, e: [13, 17], f: ["kirlia"] }, kirlia: { a: 3, b: "Kirlia", c: [38, 35, 35, 65, 55, 50], d: 202, e: [13, 17], f: ["gardevoir", "gallade"], g: "ralts" }, gardevoir: { a: 3, b: "Gardevoir", c: [68, 65, 65, 125, 115, 80], d: 484, e: [13, 17], g: "kirlia" }, gardevoirmega: { a: 6, b: "Gardevoir-Mega", c: [68, 85, 65, 165, 135, 100], d: 484, e: [13, 17], h: "Mega", i: "gardevoir", j: "gardevoirite" }, surskit: { a: 3, b: "Surskit", c: [40, 30, 32, 50, 52, 65], d: 17, e: [6, 10], f: ["masquerain"] }, masquerain: { a: 3, b: "Masquerain", c: [70, 60, 62, 100, 82, 80], d: 36, e: [6, 2], g: "surskit" }, shroomish: { a: 3, b: "Shroomish", c: [60, 40, 60, 40, 60, 35], d: 45, e: [11], f: ["breloom"] }, breloom: { a: 3, b: "Breloom", c: [60, 130, 80, 60, 60, 70], d: 392, e: [11, 1], g: "shroomish" }, slakoth: { a: 3, b: "Slakoth", c: [60, 60, 60, 35, 35, 30], d: 240, e: [0], f: ["vigoroth"] }, vigoroth: { a: 3, b: "Vigoroth", c: [80, 80, 80, 55, 55, 90], d: 465, e: [0], f: ["slaking"], g: "slakoth" }, slaking: { a: 3, b: "Slaking", c: [150, 160, 100, 95, 65, 100], d: 1305, e: [0], g: "vigoroth" }, nincada: { a: 3, b: "Nincada", c: [31, 45, 90, 30, 30, 40], d: 55, e: [6, 4], f: ["ninjask", "shedinja"] }, ninjask: { a: 3, b: "Ninjask", c: [61, 90, 45, 50, 50, 160], d: 120, e: [6, 2], g: "nincada" }, shedinja: { a: 3, b: "Shedinja", c: [1, 90, 45, 30, 30, 40], d: 12, e: [6, 7], g: "nincada" }, whismur: { a: 3, b: "Whismur", c: [64, 51, 23, 51, 23, 28], d: 163, e: [0], f: ["loudred"] }, loudred: { a: 3, b: "Loudred", c: [84, 71, 43, 71, 43, 48], d: 405, e: [0], f: ["exploud"], g: "whismur" }, exploud: { a: 3, b: "Exploud", c: [104, 91, 63, 91, 73, 68], d: 840, e: [0], g: "loudred" }, makuhita: { a: 3, b: "Makuhita", c: [72, 60, 30, 20, 30, 25], d: 864, e: [1], f: ["hariyama"] }, hariyama: { a: 3, b: "Hariyama", c: [144, 120, 60, 40, 60, 50], d: 2538, e: [1], g: "makuhita" }, azurill: { a: 3, b: "Azurill", c: [50, 20, 40, 20, 40, 20], d: 20, e: [0, 17], f: ["marill"] }, nosepass: { a: 3, b: "Nosepass", c: [30, 45, 135, 45, 90, 30], d: 970, e: [5], f: ["probopass"] }, skitty: { a: 3, b: "Skitty", c: [50, 45, 45, 35, 35, 50], d: 110, e: [0], f: ["delcatty"] }, delcatty: { a: 3, b: "Delcatty", c: [70, 65, 65, 55, 55, 90], d: 326, e: [0], g: "skitty" }, sableye: { a: 3, b: "Sableye", c: [50, 75, 75, 65, 65, 50], d: 110, e: [16, 7] }, sableyemega: { a: 6, b: "Sableye-Mega", c: [50, 85, 125, 85, 115, 20], d: 1610, e: [16, 7], h: "Mega", i: "sableye", j: "sablenite" }, mawile: { a: 3, b: "Mawile", c: [50, 85, 85, 55, 55, 50], d: 115, e: [8, 17] }, mawilemega: { a: 6, b: "Mawile-Mega", c: [50, 105, 125, 55, 95, 50], d: 235, e: [8, 17], h: "Mega", i: "mawile", j: "mawilite" }, aron: { a: 3, b: "Aron", c: [50, 70, 100, 40, 40, 30], d: 600, e: [8, 5], f: ["lairon"] }, lairon: { a: 3, b: "Lairon", c: [60, 90, 140, 50, 50, 40], d: 1200, e: [8, 5], f: ["aggron"], g: "aron" }, aggron: { a: 3, b: "Aggron", c: [70, 110, 180, 60, 60, 50], d: 3600, e: [8, 5], g: "lairon" }, aggronmega: { a: 6, b: "Aggron-Mega", c: [70, 140, 230, 60, 80, 50], d: 3950, e: [8], h: "Mega", i: "aggron", j: "aggronite" }, meditite: { a: 3, b: "Meditite", c: [30, 40, 55, 40, 55, 60], d: 112, e: [1, 13], f: ["medicham"] }, medicham: { a: 3, b: "Medicham", c: [60, 60, 75, 60, 75, 80], d: 315, e: [1, 13], g: "meditite" }, medichammega: { a: 6, b: "Medicham-Mega", c: [60, 100, 85, 80, 85, 100], d: 315, e: [1, 13], h: "Mega", i: "medicham", j: "medichamite" }, electrike: { a: 3, b: "Electrike", c: [40, 45, 40, 65, 40, 65], d: 152, e: [12], f: ["manectric"] }, manectric: { a: 3, b: "Manectric", c: [70, 75, 60, 105, 60, 105], d: 402, e: [12], g: "electrike" }, manectricmega: { a: 6, b: "Manectric-Mega", c: [70, 75, 80, 135, 80, 135], d: 440, e: [12], h: "Mega", i: "manectric", j: "manectite" }, plusle: { a: 3, b: "Plusle", c: [60, 50, 40, 85, 75, 95], d: 42, e: [12] }, minun: { a: 3, b: "Minun", c: [60, 40, 50, 75, 85, 95], d: 42, e: [12] }, volbeat: { a: 3, b: "Volbeat", c: [65, 73, 75, 47, 85, 85], d: 177, e: [6] }, illumise: { a: 3, b: "Illumise", c: [65, 47, 75, 73, 85, 85], d: 177, e: [6] }, roselia: { a: 3, b: "Roselia", c: [50, 60, 45, 100, 80, 65], d: 20, e: [11, 3], f: ["roserade"], g: "budew" }, gulpin: { a: 3, b: "Gulpin", c: [70, 43, 53, 43, 53, 40], d: 103, e: [3], f: ["swalot"] }, swalot: { a: 3, b: "Swalot", c: [100, 73, 83, 73, 83, 55], d: 800, e: [3], g: "gulpin" }, carvanha: { a: 3, b: "Carvanha", c: [45, 90, 20, 65, 20, 65], d: 208, e: [10, 16], f: ["sharpedo"] }, sharpedo: { a: 3, b: "Sharpedo", c: [70, 120, 40, 95, 40, 95], d: 888, e: [10, 16], g: "carvanha" }, sharpedomega: { a: 6, b: "Sharpedo-Mega", c: [70, 140, 70, 110, 65, 105], d: 1303, e: [10, 16], h: "Mega", i: "sharpedo", j: "sharpedonite" }, wailmer: { a: 3, b: "Wailmer", c: [130, 70, 35, 70, 35, 60], d: 1300, e: [10], f: ["wailord"] }, wailord: { a: 3, b: "Wailord", c: [170, 90, 45, 90, 45, 60], d: 3980, e: [10], g: "wailmer" }, numel: { a: 3, b: "Numel", c: [60, 60, 40, 65, 45, 35], d: 240, e: [9, 4], f: ["camerupt"] }, camerupt: { a: 3, b: "Camerupt", c: [70, 100, 70, 105, 75, 40], d: 2200, e: [9, 4], g: "numel" }, cameruptmega: { a: 6, b: "Camerupt-Mega", c: [70, 120, 100, 145, 105, 20], d: 3205, e: [9, 4], h: "Mega", i: "camerupt", j: "cameruptite" }, torkoal: { a: 3, b: "Torkoal", c: [70, 85, 140, 85, 70, 20], d: 804, e: [9] }, spoink: { a: 3, b: "Spoink", c: [60, 25, 35, 70, 80, 60], d: 306, e: [13], f: ["grumpig"] }, grumpig: { a: 3, b: "Grumpig", c: [80, 45, 65, 90, 110, 80], d: 715, e: [13], g: "spoink" }, spinda: { a: 3, b: "Spinda", c: [60, 60, 60, 60, 60, 60], d: 50, e: [0] }, trapinch: { a: 3, b: "Trapinch", c: [45, 100, 45, 45, 45, 10], d: 150, e: [4], f: ["vibrava"] }, vibrava: { a: 3, b: "Vibrava", c: [50, 70, 50, 50, 50, 70], d: 153, e: [4, 15], f: ["flygon"], g: "trapinch" }, flygon: { a: 3, b: "Flygon", c: [80, 100, 80, 80, 80, 100], d: 820, e: [4, 15], g: "vibrava" }, cacnea: { a: 3, b: "Cacnea", c: [50, 85, 40, 85, 40, 35], d: 513, e: [11], f: ["cacturne"] }, cacturne: { a: 3, b: "Cacturne", c: [70, 115, 60, 115, 60, 55], d: 774, e: [11, 16], g: "cacnea" }, swablu: { a: 3, b: "Swablu", c: [45, 40, 60, 40, 75, 50], d: 12, e: [0, 2], f: ["altaria"] }, altaria: { a: 3, b: "Altaria", c: [75, 70, 90, 70, 105, 80], d: 206, e: [15, 2], g: "swablu" }, altariamega: { a: 6, b: "Altaria-Mega", c: [75, 110, 110, 110, 105, 80], d: 206, e: [15, 17], h: "Mega", i: "altaria", j: "altarianite" }, zangoose: { a: 3, b: "Zangoose", c: [73, 115, 60, 60, 60, 90], d: 403, e: [0] }, seviper: { a: 3, b: "Seviper", c: [73, 100, 60, 100, 60, 65], d: 525, e: [3] }, lunatone: { a: 3, b: "Lunatone", c: [90, 55, 65, 95, 85, 70], d: 1680, e: [5, 13] }, solrock: { a: 3, b: "Solrock", c: [90, 95, 85, 55, 65, 70], d: 1540, e: [5, 13] }, barboach: { a: 3, b: "Barboach", c: [50, 48, 43, 46, 41, 60], d: 19, e: [10, 4], f: ["whiscash"] }, whiscash: { a: 3, b: "Whiscash", c: [110, 78, 73, 76, 71, 60], d: 236, e: [10, 4], g: "barboach" }, corphish: { a: 3, b: "Corphish", c: [43, 80, 65, 50, 35, 35], d: 115, e: [10], f: ["crawdaunt"] }, crawdaunt: { a: 3, b: "Crawdaunt", c: [63, 120, 85, 90, 55, 55], d: 328, e: [10, 16], g: "corphish" }, baltoy: { a: 3, b: "Baltoy", c: [40, 40, 55, 40, 70, 55], d: 215, e: [4, 13], f: ["claydol"] }, claydol: { a: 3, b: "Claydol", c: [60, 70, 105, 70, 120, 75], d: 1080, e: [4, 13], g: "baltoy" }, lileep: { a: 3, b: "Lileep", c: [66, 41, 77, 61, 87, 23], d: 238, e: [5, 11], f: ["cradily"] }, cradily: { a: 3, b: "Cradily", c: [86, 81, 97, 81, 107, 43], d: 604, e: [5, 11], g: "lileep" }, anorith: { a: 3, b: "Anorith", c: [45, 95, 50, 40, 50, 75], d: 125, e: [5, 6], f: ["armaldo"] }, armaldo: { a: 3, b: "Armaldo", c: [75, 125, 100, 70, 80, 45], d: 682, e: [5, 6], g: "anorith" }, feebas: { a: 3, b: "Feebas", c: [20, 15, 20, 10, 55, 80], d: 74, e: [10], f: ["milotic"] }, milotic: { a: 3, b: "Milotic", c: [95, 60, 79, 100, 125, 81], d: 1620, e: [10], g: "feebas" }, castform: { a: 3, b: "Castform", c: [70, 70, 70, 70, 70, 70], d: 8, e: [0] }, castformsunny: { a: 3, b: "Castform-Sunny", c: [70, 70, 70, 70, 70, 70], d: 8, e: [9], h: "Sunny", i: "castform" }, castformrainy: { a: 3, b: "Castform-Rainy", c: [70, 70, 70, 70, 70, 70], d: 8, e: [10], h: "Rainy", i: "castform" }, castformsnowy: { a: 3, b: "Castform-Snowy", c: [70, 70, 70, 70, 70, 70], d: 8, e: [14], h: "Snowy", i: "castform" }, kecleon: { a: 3, b: "Kecleon", c: [60, 90, 70, 60, 120, 40], d: 220, e: [0] }, shuppet: { a: 3, b: "Shuppet", c: [44, 75, 35, 63, 33, 45], d: 23, e: [7], f: ["banette"] }, banette: { a: 3, b: "Banette", c: [64, 115, 65, 83, 63, 65], d: 125, e: [7], g: "shuppet" }, banettemega: { a: 6, b: "Banette-Mega", c: [64, 165, 75, 93, 83, 75], d: 130, e: [7], h: "Mega", i: "banette", j: "banettite" }, duskull: { a: 3, b: "Duskull", c: [20, 40, 90, 30, 90, 25], d: 150, e: [7], f: ["dusclops"] }, dusclops: { a: 3, b: "Dusclops", c: [40, 70, 130, 60, 130, 25], d: 306, e: [7], f: ["dusknoir"], g: "duskull" }, tropius: { a: 3, b: "Tropius", c: [99, 68, 83, 72, 87, 51], d: 1e3, e: [11, 2] }, chimecho: { a: 3, b: "Chimecho", c: [75, 50, 80, 95, 90, 65], d: 10, e: [13], g: "chingling" }, absol: { a: 3, b: "Absol", c: [65, 130, 60, 75, 60, 75], d: 470, e: [16] }, absolmega: { a: 6, b: "Absol-Mega", c: [65, 150, 60, 115, 60, 115], d: 490, e: [16], h: "Mega", i: "absol", j: "absolite" }, wynaut: { a: 3, b: "Wynaut", c: [95, 23, 48, 23, 48, 23], d: 140, e: [13], f: ["wobbuffet"] }, snorunt: { a: 3, b: "Snorunt", c: [50, 50, 50, 50, 50, 50], d: 168, e: [14], f: ["glalie", "froslass"] }, glalie: { a: 3, b: "Glalie", c: [80, 80, 80, 80, 80, 80], d: 2565, e: [14], g: "snorunt" }, glaliemega: { a: 6, b: "Glalie-Mega", c: [80, 120, 80, 120, 80, 100], d: 3502, e: [14], h: "Mega", i: "glalie", j: "glalitite" }, spheal: { a: 3, b: "Spheal", c: [70, 40, 50, 55, 50, 25], d: 395, e: [14, 10], f: ["sealeo"] }, sealeo: { a: 3, b: "Sealeo", c: [90, 60, 70, 75, 70, 45], d: 876, e: [14, 10], f: ["walrein"], g: "spheal" }, walrein: { a: 3, b: "Walrein", c: [110, 80, 90, 95, 90, 65], d: 1506, e: [14, 10], g: "sealeo" }, clamperl: { a: 3, b: "Clamperl", c: [35, 64, 85, 74, 55, 32], d: 525, e: [10], f: ["huntail", "gorebyss"] }, huntail: { a: 3, b: "Huntail", c: [55, 104, 105, 94, 75, 52], d: 270, e: [10], g: "clamperl" }, gorebyss: { a: 3, b: "Gorebyss", c: [55, 84, 105, 114, 75, 52], d: 226, e: [10], g: "clamperl" }, relicanth: { a: 3, b: "Relicanth", c: [100, 90, 130, 45, 65, 55], d: 234, e: [10, 5] }, luvdisc: { a: 3, b: "Luvdisc", c: [43, 30, 55, 40, 65, 97], d: 87, e: [10] }, bagon: { a: 3, b: "Bagon", c: [45, 75, 60, 40, 30, 50], d: 421, e: [15], f: ["shelgon"] }, shelgon: { a: 3, b: "Shelgon", c: [65, 95, 100, 60, 50, 50], d: 1105, e: [15], f: ["salamence"], g: "bagon" }, salamence: { a: 3, b: "Salamence", c: [95, 135, 80, 110, 80, 100], d: 1026, e: [15, 2], g: "shelgon" }, salamencemega: { a: 6, b: "Salamence-Mega", c: [95, 145, 130, 120, 90, 120], d: 1126, e: [15, 2], h: "Mega", i: "salamence", j: "salamencite" }, beldum: { a: 3, b: "Beldum", c: [40, 55, 80, 35, 60, 30], d: 952, e: [8, 13], f: ["metang"] }, metang: { a: 3, b: "Metang", c: [60, 75, 100, 55, 80, 50], d: 2025, e: [8, 13], f: ["metagross"], g: "beldum" }, metagross: { a: 3, b: "Metagross", c: [80, 135, 130, 95, 90, 70], d: 5500, e: [8, 13], g: "metang" }, metagrossmega: { a: 6, b: "Metagross-Mega", c: [80, 145, 150, 105, 110, 110], d: 9429, e: [8, 13], h: "Mega", i: "metagross", j: "metagrossite" }, regirock: { a: 3, b: "Regirock", c: [80, 100, 200, 50, 100, 50], d: 2300, e: [5] }, regice: { a: 3, b: "Regice", c: [80, 50, 100, 100, 200, 50], d: 1750, e: [14] }, registeel: { a: 3, b: "Registeel", c: [80, 75, 150, 75, 150, 50], d: 2050, e: [8] }, latias: { a: 3, b: "Latias", c: [80, 80, 90, 110, 130, 110], d: 400, e: [15, 13] }, latiasmega: { a: 6, b: "Latias-Mega", c: [80, 100, 120, 140, 150, 110], d: 520, e: [15, 13], h: "Mega", i: "latias", j: "latiasite" }, latios: { a: 3, b: "Latios", c: [80, 90, 80, 130, 110, 110], d: 600, e: [15, 13] }, latiosmega: { a: 6, b: "Latios-Mega", c: [80, 130, 100, 160, 120, 110], d: 700, e: [15, 13], h: "Mega", i: "latios", j: "latiosite" }, kyogre: { a: 3, b: "Kyogre", c: [100, 100, 90, 150, 140, 90], d: 3520, e: [10] }, kyogreprimal: { a: 6, b: "Kyogre-Primal", c: [100, 150, 90, 180, 160, 90], d: 4300, e: [10], h: "Primal", i: "kyogre", j: "blueorb" }, groudon: { a: 3, b: "Groudon", c: [100, 150, 140, 100, 90, 90], d: 9500, e: [4] }, groudonprimal: { a: 6, b: "Groudon-Primal", c: [100, 180, 160, 150, 90, 90], d: 9997, e: [4, 9], h: "Primal", i: "groudon", j: "redorb" }, rayquaza: { a: 3, b: "Rayquaza", c: [105, 150, 90, 150, 90, 95], d: 2065, e: [15, 2] }, rayquazamega: { a: 6, b: "Rayquaza-Mega", c: [105, 180, 100, 180, 100, 115], d: 3920, e: [15, 2], h: "Mega", i: "rayquaza" }, jirachi: { a: 3, b: "Jirachi", c: [100, 100, 100, 100, 100, 100], d: 11, e: [8, 13] }, deoxys: { a: 3, b: "Deoxys", c: [50, 150, 50, 150, 50, 150], d: 608, e: [13] }, deoxysattack: { a: 3, b: "Deoxys-Attack", c: [50, 180, 20, 180, 20, 150], d: 608, e: [13], h: "Attack", i: "deoxys" }, deoxysdefense: { a: 3, b: "Deoxys-Defense", c: [50, 70, 160, 70, 160, 90], d: 608, e: [13], h: "Defense", i: "deoxys" }, deoxysspeed: { a: 3, b: "Deoxys-Speed", c: [50, 95, 90, 95, 90, 180], d: 608, e: [13], h: "Speed", i: "deoxys" }, turtwig: { a: 4, b: "Turtwig", c: [55, 68, 64, 45, 55, 31], d: 102, e: [11], f: ["grotle"] }, grotle: { a: 4, b: "Grotle", c: [75, 89, 85, 55, 65, 36], d: 970, e: [11], f: ["torterra"], g: "turtwig" }, torterra: { a: 4, b: "Torterra", c: [95, 109, 105, 75, 85, 56], d: 3100, e: [11, 4], g: "grotle" }, chimchar: { a: 4, b: "Chimchar", c: [44, 58, 44, 58, 44, 61], d: 62, e: [9], f: ["monferno"] }, monferno: { a: 4, b: "Monferno", c: [64, 78, 52, 78, 52, 81], d: 220, e: [9, 1], f: ["infernape"], g: "chimchar" }, infernape: { a: 4, b: "Infernape", c: [76, 104, 71, 104, 71, 108], d: 550, e: [9, 1], g: "monferno" }, piplup: { a: 4, b: "Piplup", c: [53, 51, 53, 61, 56, 40], d: 52, e: [10], f: ["prinplup"] }, prinplup: { a: 4, b: "Prinplup", c: [64, 66, 68, 81, 76, 50], d: 230, e: [10], f: ["empoleon"], g: "piplup" }, empoleon: { a: 4, b: "Empoleon", c: [84, 86, 88, 111, 101, 60], d: 845, e: [10, 8], g: "prinplup" }, starly: { a: 4, b: "Starly", c: [40, 55, 30, 30, 30, 60], d: 20, e: [0, 2], f: ["staravia"] }, staravia: { a: 4, b: "Staravia", c: [55, 75, 50, 40, 40, 80], d: 155, e: [0, 2], f: ["staraptor"], g: "starly" }, staraptor: { a: 4, b: "Staraptor", c: [85, 120, 70, 50, 60, 100], d: 249, e: [0, 2], g: "staravia" }, bidoof: { a: 4, b: "Bidoof", c: [59, 45, 40, 35, 40, 31], d: 200, e: [0], f: ["bibarel"] }, bibarel: { a: 4, b: "Bibarel", c: [79, 85, 60, 55, 60, 71], d: 315, e: [0, 10], g: "bidoof" }, kricketot: { a: 4, b: "Kricketot", c: [37, 25, 41, 25, 41, 25], d: 22, e: [6], f: ["kricketune"] }, kricketune: { a: 4, b: "Kricketune", c: [77, 85, 51, 55, 51, 65], d: 255, e: [6], g: "kricketot" }, shinx: { a: 4, b: "Shinx", c: [45, 65, 34, 40, 34, 45], d: 95, e: [12], f: ["luxio"] }, luxio: { a: 4, b: "Luxio", c: [60, 85, 49, 60, 49, 60], d: 305, e: [12], f: ["luxray"], g: "shinx" }, luxray: { a: 4, b: "Luxray", c: [80, 120, 79, 95, 79, 70], d: 420, e: [12], g: "luxio" }, budew: { a: 4, b: "Budew", c: [40, 30, 35, 50, 70, 55], d: 12, e: [11, 3], f: ["roselia"] }, roserade: { a: 4, b: "Roserade", c: [60, 70, 65, 125, 105, 90], d: 145, e: [11, 3], g: "roselia" }, cranidos: { a: 4, b: "Cranidos", c: [67, 125, 40, 30, 30, 58], d: 315, e: [5], f: ["rampardos"] }, rampardos: { a: 4, b: "Rampardos", c: [97, 165, 60, 65, 50, 58], d: 1025, e: [5], g: "cranidos" }, shieldon: { a: 4, b: "Shieldon", c: [30, 42, 118, 42, 88, 30], d: 570, e: [5, 8], f: ["bastiodon"] }, bastiodon: { a: 4, b: "Bastiodon", c: [60, 52, 168, 47, 138, 30], d: 1495, e: [5, 8], g: "shieldon" }, burmy: { a: 4, b: "Burmy", c: [40, 29, 45, 29, 45, 36], d: 34, e: [6], f: ["wormadam", "wormadamsandy", "wormadamtrash", "mothim"] }, wormadam: { a: 4, b: "Wormadam", c: [60, 59, 85, 79, 105, 36], d: 65, e: [6, 11], g: "burmy" }, wormadamsandy: { a: 4, b: "Wormadam-Sandy", c: [60, 79, 105, 59, 85, 36], d: 65, e: [6, 4], g: "burmy", h: "Sandy", i: "wormadam" }, wormadamtrash: { a: 4, b: "Wormadam-Trash", c: [60, 69, 95, 69, 95, 36], d: 65, e: [6, 8], g: "burmy", h: "Trash", i: "wormadam" }, mothim: { a: 4, b: "Mothim", c: [70, 94, 50, 94, 50, 66], d: 233, e: [6, 2], g: "burmy" }, combee: { a: 4, b: "Combee", c: [30, 30, 42, 30, 42, 70], d: 55, e: [6, 2], f: ["vespiquen"] }, vespiquen: { a: 4, b: "Vespiquen", c: [70, 80, 102, 80, 102, 40], d: 385, e: [6, 2], g: "combee" }, pachirisu: { a: 4, b: "Pachirisu", c: [60, 45, 70, 45, 90, 95], d: 39, e: [12] }, buizel: { a: 4, b: "Buizel", c: [55, 65, 35, 60, 30, 85], d: 295, e: [10], f: ["floatzel"] }, floatzel: { a: 4, b: "Floatzel", c: [85, 105, 55, 85, 50, 115], d: 335, e: [10], g: "buizel" }, cherubi: { a: 4, b: "Cherubi", c: [45, 35, 45, 62, 53, 35], d: 33, e: [11], f: ["cherrim"] }, cherrim: { a: 4, b: "Cherrim", c: [70, 60, 70, 87, 78, 85], d: 93, e: [11], g: "cherubi" }, cherrimsunshine: { a: 4, b: "Cherrim-Sunshine", c: [70, 60, 70, 87, 78, 85], d: 93, e: [11], g: "cherubi", h: "Sunshine", i: "cherrim" }, shellos: { a: 4, b: "Shellos", c: [76, 48, 48, 57, 62, 34], d: 63, e: [10], f: ["gastrodon"] }, gastrodon: { a: 4, b: "Gastrodon", c: [111, 83, 68, 92, 82, 39], d: 299, e: [10, 4], g: "shellos" }, ambipom: { a: 4, b: "Ambipom", c: [75, 100, 66, 60, 66, 115], d: 203, e: [0], g: "aipom" }, drifloon: { a: 4, b: "Drifloon", c: [90, 50, 34, 60, 44, 70], d: 12, e: [7, 2], f: ["drifblim"] }, drifblim: { a: 4, b: "Drifblim", c: [150, 80, 44, 90, 54, 80], d: 150, e: [7, 2], g: "drifloon" }, buneary: { a: 4, b: "Buneary", c: [55, 66, 44, 44, 56, 85], d: 55, e: [0], f: ["lopunny"] }, lopunny: { a: 4, b: "Lopunny", c: [65, 76, 84, 54, 96, 105], d: 333, e: [0], g: "buneary" }, lopunnymega: { a: 6, b: "Lopunny-Mega", c: [65, 136, 94, 54, 96, 135], d: 283, e: [0, 1], h: "Mega", i: "lopunny", j: "lopunnity" }, mismagius: { a: 4, b: "Mismagius", c: [60, 60, 60, 105, 105, 105], d: 44, e: [7], g: "misdreavus" }, honchkrow: { a: 4, b: "Honchkrow", c: [100, 125, 52, 105, 52, 71], d: 273, e: [16, 2], g: "murkrow" }, glameow: { a: 4, b: "Glameow", c: [49, 55, 42, 42, 37, 85], d: 39, e: [0], f: ["purugly"] }, purugly: { a: 4, b: "Purugly", c: [71, 82, 64, 64, 59, 112], d: 438, e: [0], g: "glameow" }, chingling: { a: 4, b: "Chingling", c: [45, 30, 50, 65, 50, 45], d: 6, e: [13], f: ["chimecho"] }, stunky: { a: 4, b: "Stunky", c: [63, 63, 47, 41, 41, 74], d: 192, e: [3, 16], f: ["skuntank"] }, skuntank: { a: 4, b: "Skuntank", c: [103, 93, 67, 71, 61, 84], d: 380, e: [3, 16], g: "stunky" }, bronzor: { a: 4, b: "Bronzor", c: [57, 24, 86, 24, 86, 23], d: 605, e: [8, 13], f: ["bronzong"] }, bronzong: { a: 4, b: "Bronzong", c: [67, 89, 116, 79, 116, 33], d: 1870, e: [8, 13], g: "bronzor" }, bonsly: { a: 4, b: "Bonsly", c: [50, 80, 95, 10, 45, 10], d: 150, e: [5], f: ["sudowoodo"] }, mimejr: { a: 4, b: "Mime Jr.", c: [20, 25, 45, 70, 90, 60], d: 130, e: [13, 17], f: ["mrmime"] }, happiny: { a: 4, b: "Happiny", c: [100, 5, 5, 15, 65, 30], d: 244, e: [0], f: ["chansey"] }, chatot: { a: 4, b: "Chatot", c: [76, 65, 45, 92, 42, 91], d: 19, e: [0, 2] }, spiritomb: { a: 4, b: "Spiritomb", c: [50, 92, 108, 92, 108, 35], d: 1080, e: [7, 16] }, gible: { a: 4, b: "Gible", c: [58, 70, 45, 40, 45, 42], d: 205, e: [15, 4], f: ["gabite"] }, gabite: { a: 4, b: "Gabite", c: [68, 90, 65, 50, 55, 82], d: 560, e: [15, 4], f: ["garchomp"], g: "gible" }, garchomp: { a: 4, b: "Garchomp", c: [108, 130, 95, 80, 85, 102], d: 950, e: [15, 4], g: "gabite" }, garchompmega: { a: 6, b: "Garchomp-Mega", c: [108, 170, 115, 120, 95, 92], d: 950, e: [15, 4], h: "Mega", i: "garchomp", j: "garchompite" }, munchlax: { a: 4, b: "Munchlax", c: [135, 85, 40, 40, 85, 5], d: 1050, e: [0], f: ["snorlax"] }, riolu: { a: 4, b: "Riolu", c: [40, 70, 40, 35, 40, 60], d: 202, e: [1], f: ["lucario"] }, lucario: { a: 4, b: "Lucario", c: [70, 110, 70, 115, 70, 90], d: 540, e: [1, 8], g: "riolu" }, lucariomega: { a: 6, b: "Lucario-Mega", c: [70, 145, 88, 140, 70, 112], d: 575, e: [1, 8], h: "Mega", i: "lucario", j: "lucarionite" }, hippopotas: { a: 4, b: "Hippopotas", c: [68, 72, 78, 38, 42, 32], d: 495, e: [4], f: ["hippowdon"] }, hippowdon: { a: 4, b: "Hippowdon", c: [108, 112, 118, 68, 72, 47], d: 3e3, e: [4], g: "hippopotas" }, skorupi: { a: 4, b: "Skorupi", c: [40, 50, 90, 30, 55, 65], d: 120, e: [3, 6], f: ["drapion"] }, drapion: { a: 4, b: "Drapion", c: [70, 90, 110, 60, 75, 95], d: 615, e: [3, 16], g: "skorupi" }, croagunk: { a: 4, b: "Croagunk", c: [48, 61, 40, 61, 40, 50], d: 230, e: [3, 1], f: ["toxicroak"] }, toxicroak: { a: 4, b: "Toxicroak", c: [83, 106, 65, 86, 65, 85], d: 444, e: [3, 1], g: "croagunk" }, carnivine: { a: 4, b: "Carnivine", c: [74, 100, 72, 90, 72, 46], d: 270, e: [11] }, finneon: { a: 4, b: "Finneon", c: [49, 49, 56, 49, 61, 66], d: 70, e: [10], f: ["lumineon"] }, lumineon: { a: 4, b: "Lumineon", c: [69, 69, 76, 69, 86, 91], d: 240, e: [10], g: "finneon" }, mantyke: { a: 4, b: "Mantyke", c: [45, 20, 50, 60, 120, 50], d: 650, e: [10, 2], f: ["mantine"] }, snover: { a: 4, b: "Snover", c: [60, 62, 50, 62, 60, 40], d: 505, e: [11, 14], f: ["abomasnow"] }, abomasnow: { a: 4, b: "Abomasnow", c: [90, 92, 75, 92, 85, 60], d: 1355, e: [11, 14], g: "snover" }, abomasnowmega: { a: 6, b: "Abomasnow-Mega", c: [90, 132, 105, 132, 105, 30], d: 1850, e: [11, 14], h: "Mega", i: "abomasnow", j: "abomasite" }, weavile: { a: 4, b: "Weavile", c: [70, 120, 65, 45, 85, 125], d: 340, e: [16, 14], g: "sneasel" }, magnezone: { a: 4, b: "Magnezone", c: [70, 70, 115, 130, 90, 60], d: 1800, e: [12, 8], g: "magneton" }, lickilicky: { a: 4, b: "Lickilicky", c: [110, 85, 95, 80, 95, 50], d: 1400, e: [0], g: "lickitung" }, rhyperior: { a: 4, b: "Rhyperior", c: [115, 140, 130, 55, 55, 40], d: 2828, e: [4, 5], g: "rhydon" }, tangrowth: { a: 4, b: "Tangrowth", c: [100, 100, 125, 110, 50, 50], d: 1286, e: [11], g: "tangela" }, electivire: { a: 4, b: "Electivire", c: [75, 123, 67, 95, 85, 95], d: 1386, e: [12], g: "electabuzz" }, magmortar: { a: 4, b: "Magmortar", c: [75, 95, 67, 125, 95, 83], d: 680, e: [9], g: "magmar" }, togekiss: { a: 4, b: "Togekiss", c: [85, 50, 95, 120, 115, 80], d: 380, e: [17, 2], g: "togetic" }, yanmega: { a: 4, b: "Yanmega", c: [86, 76, 86, 116, 56, 95], d: 515, e: [6, 2], g: "yanma" }, leafeon: { a: 4, b: "Leafeon", c: [65, 110, 130, 60, 65, 95], d: 255, e: [11], g: "eevee" }, glaceon: { a: 4, b: "Glaceon", c: [65, 60, 110, 130, 95, 65], d: 259, e: [14], g: "eevee" }, gliscor: { a: 4, b: "Gliscor", c: [75, 95, 125, 45, 75, 95], d: 425, e: [4, 2], g: "gligar" }, mamoswine: { a: 4, b: "Mamoswine", c: [110, 130, 80, 70, 60, 80], d: 2910, e: [14, 4], g: "piloswine" }, porygonz: { a: 4, b: "Porygon-Z", c: [85, 80, 70, 135, 75, 90], d: 340, e: [0], g: "porygon2" }, gallade: { a: 4, b: "Gallade", c: [68, 125, 65, 65, 115, 80], d: 520, e: [13, 1], g: "kirlia" }, gallademega: { a: 6, b: "Gallade-Mega", c: [68, 165, 95, 65, 115, 110], d: 564, e: [13, 1], h: "Mega", i: "gallade", j: "galladite" }, probopass: { a: 4, b: "Probopass", c: [60, 55, 145, 75, 150, 40], d: 3400, e: [5, 8], g: "nosepass" }, dusknoir: { a: 4, b: "Dusknoir", c: [45, 100, 135, 65, 135, 45], d: 1066, e: [7], g: "dusclops" }, froslass: { a: 4, b: "Froslass", c: [70, 80, 70, 80, 70, 110], d: 266, e: [14, 7], g: "snorunt" }, rotom: { a: 4, b: "Rotom", c: [50, 50, 77, 95, 77, 91], d: 3, e: [12, 7] }, rotomheat: { a: 4, b: "Rotom-Heat", c: [50, 65, 107, 105, 107, 86], d: 3, e: [12, 9], h: "Heat", i: "rotom" }, rotomwash: { a: 4, b: "Rotom-Wash", c: [50, 65, 107, 105, 107, 86], d: 3, e: [12, 10], h: "Wash", i: "rotom" }, rotomfrost: { a: 4, b: "Rotom-Frost", c: [50, 65, 107, 105, 107, 86], d: 3, e: [12, 14], h: "Frost", i: "rotom" }, rotomfan: { a: 4, b: "Rotom-Fan", c: [50, 65, 107, 105, 107, 86], d: 3, e: [12, 2], h: "Fan", i: "rotom" }, rotommow: { a: 4, b: "Rotom-Mow", c: [50, 65, 107, 105, 107, 86], d: 3, e: [12, 11], h: "Mow", i: "rotom" }, uxie: { a: 4, b: "Uxie", c: [75, 75, 130, 75, 130, 95], d: 3, e: [13] }, mesprit: { a: 4, b: "Mesprit", c: [80, 105, 105, 105, 105, 80], d: 3, e: [13] }, azelf: { a: 4, b: "Azelf", c: [75, 125, 70, 125, 70, 115], d: 3, e: [13] }, dialga: { a: 4, b: "Dialga", c: [100, 120, 120, 150, 100, 90], d: 6830, e: [8, 15] }, palkia: { a: 4, b: "Palkia", c: [90, 120, 100, 150, 120, 100], d: 3360, e: [10, 15] }, heatran: { a: 4, b: "Heatran", c: [91, 90, 106, 130, 106, 77], d: 4300, e: [9, 8] }, regigigas: { a: 4, b: "Regigigas", c: [110, 160, 110, 80, 110, 100], d: 4200, e: [0] }, giratina: { a: 4, b: "Giratina", c: [150, 100, 120, 100, 120, 90], d: 7500, e: [7, 15] }, giratinaorigin: { a: 4, b: "Giratina-Origin", c: [150, 120, 100, 120, 100, 90], d: 6500, e: [7, 15], h: "Origin", i: "giratina" }, cresselia: { a: 4, b: "Cresselia", c: [120, 70, 120, 75, 130, 85], d: 856, e: [13] }, phione: { a: 4, b: "Phione", c: [80, 80, 80, 80, 80, 80], d: 31, e: [10] }, manaphy: { a: 4, b: "Manaphy", c: [100, 100, 100, 100, 100, 100], d: 14, e: [10] }, darkrai: { a: 4, b: "Darkrai", c: [70, 90, 90, 135, 90, 125], d: 505, e: [16] }, shaymin: { a: 4, b: "Shaymin", c: [100, 100, 100, 100, 100, 100], d: 21, e: [11] }, shayminsky: { a: 4, b: "Shaymin-Sky", c: [100, 103, 75, 120, 75, 127], d: 52, e: [11, 2], h: "Sky", i: "shaymin" }, arceus: { a: 4, b: "Arceus", c: [120, 120, 120, 120, 120, 120], d: 3200, e: [0] }, arceusbug: { a: 4, b: "Arceus-Bug", c: [120, 120, 120, 120, 120, 120], d: 3200, e: [6], h: "Bug", i: "arceus" }, arceusdark: { a: 4, b: "Arceus-Dark", c: [120, 120, 120, 120, 120, 120], d: 3200, e: [16], h: "Dark", i: "arceus" }, arceusdragon: { a: 4, b: "Arceus-Dragon", c: [120, 120, 120, 120, 120, 120], d: 3200, e: [15], h: "Dragon", i: "arceus" }, arceuselectric: { a: 4, b: "Arceus-Electric", c: [120, 120, 120, 120, 120, 120], d: 3200, e: [12], h: "Electric", i: "arceus" }, arceusfairy: { a: 4, b: "Arceus-Fairy", c: [120, 120, 120, 120, 120, 120], d: 3200, e: [17], h: "Fairy", i: "arceus" }, arceusfighting: { a: 4, b: "Arceus-Fighting", c: [120, 120, 120, 120, 120, 120], d: 3200, e: [1], h: "Fighting", i: "arceus" }, arceusfire: { a: 4, b: "Arceus-Fire", c: [120, 120, 120, 120, 120, 120], d: 3200, e: [9], h: "Fire", i: "arceus" }, arceusflying: { a: 4, b: "Arceus-Flying", c: [120, 120, 120, 120, 120, 120], d: 3200, e: [2], h: "Flying", i: "arceus" }, arceusghost: { a: 4, b: "Arceus-Ghost", c: [120, 120, 120, 120, 120, 120], d: 3200, e: [7], h: "Ghost", i: "arceus" }, arceusgrass: { a: 4, b: "Arceus-Grass", c: [120, 120, 120, 120, 120, 120], d: 3200, e: [11], h: "Grass", i: "arceus" }, arceusground: { a: 4, b: "Arceus-Ground", c: [120, 120, 120, 120, 120, 120], d: 3200, e: [4], h: "Ground", i: "arceus" }, arceusice: { a: 4, b: "Arceus-Ice", c: [120, 120, 120, 120, 120, 120], d: 3200, e: [14], h: "Ice", i: "arceus" }, arceuspoison: { a: 4, b: "Arceus-Poison", c: [120, 120, 120, 120, 120, 120], d: 3200, e: [3], h: "Poison", i: "arceus" }, arceuspsychic: { a: 4, b: "Arceus-Psychic", c: [120, 120, 120, 120, 120, 120], d: 3200, e: [13], h: "Psychic", i: "arceus" }, arceusrock: { a: 4, b: "Arceus-Rock", c: [120, 120, 120, 120, 120, 120], d: 3200, e: [5], h: "Rock", i: "arceus" }, arceussteel: { a: 4, b: "Arceus-Steel", c: [120, 120, 120, 120, 120, 120], d: 3200, e: [8], h: "Steel", i: "arceus" }, arceuswater: { a: 4, b: "Arceus-Water", c: [120, 120, 120, 120, 120, 120], d: 3200, e: [10], h: "Water", i: "arceus" }, victini: { a: 5, b: "Victini", c: [100, 100, 100, 100, 100, 100], d: 40, e: [13, 9] }, snivy: { a: 5, b: "Snivy", c: [45, 45, 55, 45, 55, 63], d: 81, e: [11], f: ["servine"] }, servine: { a: 5, b: "Servine", c: [60, 60, 75, 60, 75, 83], d: 160, e: [11], f: ["serperior"], g: "snivy" }, serperior: { a: 5, b: "Serperior", c: [75, 75, 95, 75, 95, 113], d: 630, e: [11], g: "servine" }, tepig: { a: 5, b: "Tepig", c: [65, 63, 45, 45, 45, 45], d: 99, e: [9], f: ["pignite"] }, pignite: { a: 5, b: "Pignite", c: [90, 93, 55, 70, 55, 55], d: 555, e: [9, 1], f: ["emboar"], g: "tepig" }, emboar: { a: 5, b: "Emboar", c: [110, 123, 65, 100, 65, 65], d: 1500, e: [9, 1], g: "pignite" }, oshawott: { a: 5, b: "Oshawott", c: [55, 55, 45, 63, 45, 45], d: 59, e: [10], f: ["dewott"] }, dewott: { a: 5, b: "Dewott", c: [75, 75, 60, 83, 60, 60], d: 245, e: [10], f: ["samurott"], g: "oshawott" }, samurott: { a: 5, b: "Samurott", c: [95, 100, 85, 108, 70, 70], d: 946, e: [10], g: "dewott" }, patrat: { a: 5, b: "Patrat", c: [45, 55, 39, 35, 39, 42], d: 116, e: [0], f: ["watchog"] }, watchog: { a: 5, b: "Watchog", c: [60, 85, 69, 60, 69, 77], d: 270, e: [0], g: "patrat" }, lillipup: { a: 5, b: "Lillipup", c: [45, 60, 45, 25, 45, 55], d: 41, e: [0], f: ["herdier"] }, herdier: { a: 5, b: "Herdier", c: [65, 80, 65, 35, 65, 60], d: 147, e: [0], f: ["stoutland"], g: "lillipup" }, stoutland: { a: 5, b: "Stoutland", c: [85, 110, 90, 45, 90, 80], d: 610, e: [0], g: "herdier" }, purrloin: { a: 5, b: "Purrloin", c: [41, 50, 37, 50, 37, 66], d: 101, e: [16], f: ["liepard"] }, liepard: { a: 5, b: "Liepard", c: [64, 88, 50, 88, 50, 106], d: 375, e: [16], g: "purrloin" }, pansage: { a: 5, b: "Pansage", c: [50, 53, 48, 53, 48, 64], d: 105, e: [11], f: ["simisage"] }, simisage: { a: 5, b: "Simisage", c: [75, 98, 63, 98, 63, 101], d: 305, e: [11], g: "pansage" }, pansear: { a: 5, b: "Pansear", c: [50, 53, 48, 53, 48, 64], d: 110, e: [9], f: ["simisear"] }, simisear: { a: 5, b: "Simisear", c: [75, 98, 63, 98, 63, 101], d: 280, e: [9], g: "pansear" }, panpour: { a: 5, b: "Panpour", c: [50, 53, 48, 53, 48, 64], d: 135, e: [10], f: ["simipour"] }, simipour: { a: 5, b: "Simipour", c: [75, 98, 63, 98, 63, 101], d: 290, e: [10], g: "panpour" }, munna: { a: 5, b: "Munna", c: [76, 25, 45, 67, 55, 24], d: 233, e: [13], f: ["musharna"] }, musharna: { a: 5, b: "Musharna", c: [116, 55, 85, 107, 95, 29], d: 605, e: [13], g: "munna" }, pidove: { a: 5, b: "Pidove", c: [50, 55, 50, 36, 30, 43], d: 21, e: [0, 2], f: ["tranquill"] }, tranquill: { a: 5, b: "Tranquill", c: [62, 77, 62, 50, 42, 65], d: 150, e: [0, 2], f: ["unfezant"], g: "pidove" }, unfezant: { a: 5, b: "Unfezant", c: [80, 115, 80, 65, 55, 93], d: 290, e: [0, 2], g: "tranquill" }, blitzle: { a: 5, b: "Blitzle", c: [45, 60, 32, 50, 32, 76], d: 298, e: [12], f: ["zebstrika"] }, zebstrika: { a: 5, b: "Zebstrika", c: [75, 100, 63, 80, 63, 116], d: 795, e: [12], g: "blitzle" }, roggenrola: { a: 5, b: "Roggenrola", c: [55, 75, 85, 25, 25, 15], d: 180, e: [5], f: ["boldore"] }, boldore: { a: 5, b: "Boldore", c: [70, 105, 105, 50, 40, 20], d: 1020, e: [5], f: ["gigalith"], g: "roggenrola" }, gigalith: { a: 5, b: "Gigalith", c: [85, 135, 130, 60, 80, 25], d: 2600, e: [5], g: "boldore" }, woobat: { a: 5, b: "Woobat", c: [65, 45, 43, 55, 43, 72], d: 21, e: [13, 2], f: ["swoobat"] }, swoobat: { a: 5, b: "Swoobat", c: [67, 57, 55, 77, 55, 114], d: 105, e: [13, 2], g: "woobat" }, drilbur: { a: 5, b: "Drilbur", c: [60, 85, 40, 30, 45, 68], d: 85, e: [4], f: ["excadrill"] }, excadrill: { a: 5, b: "Excadrill", c: [110, 135, 60, 50, 65, 88], d: 404, e: [4, 8], g: "drilbur" }, audino: { a: 5, b: "Audino", c: [103, 60, 86, 60, 86, 50], d: 310, e: [0] }, audinomega: { a: 6, b: "Audino-Mega", c: [103, 60, 126, 80, 126, 50], d: 320, e: [0, 17], h: "Mega", i: "audino", j: "audinite" }, timburr: { a: 5, b: "Timburr", c: [75, 80, 55, 25, 35, 35], d: 125, e: [1], f: ["gurdurr"] }, gurdurr: { a: 5, b: "Gurdurr", c: [85, 105, 85, 40, 50, 40], d: 400, e: [1], f: ["conkeldurr"], g: "timburr" }, conkeldurr: { a: 5, b: "Conkeldurr", c: [105, 140, 95, 55, 65, 45], d: 870, e: [1], g: "gurdurr" }, tympole: { a: 5, b: "Tympole", c: [50, 50, 40, 50, 40, 64], d: 45, e: [10], f: ["palpitoad"] }, palpitoad: { a: 5, b: "Palpitoad", c: [75, 65, 55, 65, 55, 69], d: 170, e: [10, 4], f: ["seismitoad"], g: "tympole" }, seismitoad: { a: 5, b: "Seismitoad", c: [105, 95, 75, 85, 75, 74], d: 620, e: [10, 4], g: "palpitoad" }, throh: { a: 5, b: "Throh", c: [120, 100, 85, 30, 85, 45], d: 555, e: [1] }, sawk: { a: 5, b: "Sawk", c: [75, 125, 75, 30, 75, 85], d: 510, e: [1] }, sewaddle: { a: 5, b: "Sewaddle", c: [45, 53, 70, 40, 60, 42], d: 25, e: [6, 11], f: ["swadloon"] }, swadloon: { a: 5, b: "Swadloon", c: [55, 63, 90, 50, 80, 42], d: 73, e: [6, 11], f: ["leavanny"], g: "sewaddle" }, leavanny: { a: 5, b: "Leavanny", c: [75, 103, 80, 70, 80, 92], d: 205, e: [6, 11], g: "swadloon" }, venipede: { a: 5, b: "Venipede", c: [30, 45, 59, 30, 39, 57], d: 53, e: [6, 3], f: ["whirlipede"] }, whirlipede: { a: 5, b: "Whirlipede", c: [40, 55, 99, 40, 79, 47], d: 585, e: [6, 3], f: ["scolipede"], g: "venipede" }, scolipede: { a: 5, b: "Scolipede", c: [60, 100, 89, 55, 69, 112], d: 2005, e: [6, 3], g: "whirlipede" }, cottonee: { a: 5, b: "Cottonee", c: [40, 27, 60, 37, 50, 66], d: 6, e: [11, 17], f: ["whimsicott"] }, whimsicott: { a: 5, b: "Whimsicott", c: [60, 67, 85, 77, 75, 116], d: 66, e: [11, 17], g: "cottonee" }, petilil: { a: 5, b: "Petilil", c: [45, 35, 50, 70, 50, 30], d: 66, e: [11], f: ["lilligant"] }, lilligant: { a: 5, b: "Lilligant", c: [70, 60, 75, 110, 75, 90], d: 163, e: [11], g: "petilil" }, basculin: { a: 5, b: "Basculin", c: [70, 92, 65, 80, 55, 98], d: 180, e: [10] }, basculinbluestriped: { a: 5, b: "Basculin-Blue-Striped", c: [70, 92, 65, 80, 55, 98], d: 180, e: [10], h: "Blue-Striped", i: "basculin" }, sandile: { a: 5, b: "Sandile", c: [50, 72, 35, 35, 35, 65], d: 152, e: [4, 16], f: ["krokorok"] }, krokorok: { a: 5, b: "Krokorok", c: [60, 82, 45, 45, 45, 74], d: 334, e: [4, 16], f: ["krookodile"], g: "sandile" }, krookodile: { a: 5, b: "Krookodile", c: [95, 117, 80, 65, 70, 92], d: 963, e: [4, 16], g: "krokorok" }, darumaka: { a: 5, b: "Darumaka", c: [70, 90, 45, 15, 45, 50], d: 375, e: [9], f: ["darmanitan"] }, darmanitan: { a: 5, b: "Darmanitan", c: [105, 140, 55, 30, 55, 95], d: 929, e: [9], g: "darumaka" }, darmanitanzen: { a: 5, b: "Darmanitan-Zen", c: [105, 30, 105, 140, 105, 55], d: 929, e: [9, 13], g: "darumaka", h: "Zen", i: "darmanitan" }, maractus: { a: 5, b: "Maractus", c: [75, 86, 67, 106, 67, 60], d: 280, e: [11] }, dwebble: { a: 5, b: "Dwebble", c: [50, 65, 85, 35, 35, 55], d: 145, e: [6, 5], f: ["crustle"] }, crustle: { a: 5, b: "Crustle", c: [70, 105, 125, 65, 75, 45], d: 2e3, e: [6, 5], g: "dwebble" }, scraggy: { a: 5, b: "Scraggy", c: [50, 75, 70, 35, 70, 48], d: 118, e: [16, 1], f: ["scrafty"] }, scrafty: { a: 5, b: "Scrafty", c: [65, 90, 115, 45, 115, 58], d: 300, e: [16, 1], g: "scraggy" }, sigilyph: { a: 5, b: "Sigilyph", c: [72, 58, 80, 103, 80, 97], d: 140, e: [13, 2] }, yamask: { a: 5, b: "Yamask", c: [38, 30, 85, 55, 65, 30], d: 15, e: [7], f: ["cofagrigus"] }, cofagrigus: { a: 5, b: "Cofagrigus", c: [58, 50, 145, 95, 105, 30], d: 765, e: [7], g: "yamask" }, tirtouga: { a: 5, b: "Tirtouga", c: [54, 78, 103, 53, 45, 22], d: 165, e: [10, 5], f: ["carracosta"] }, carracosta: { a: 5, b: "Carracosta", c: [74, 108, 133, 83, 65, 32], d: 810, e: [10, 5], g: "tirtouga" }, archen: { a: 5, b: "Archen", c: [55, 112, 45, 74, 45, 70], d: 95, e: [5, 2], f: ["archeops"] }, archeops: { a: 5, b: "Archeops", c: [75, 140, 65, 112, 65, 110], d: 320, e: [5, 2], g: "archen" }, trubbish: { a: 5, b: "Trubbish", c: [50, 50, 62, 40, 62, 65], d: 310, e: [3], f: ["garbodor"] }, garbodor: { a: 5, b: "Garbodor", c: [80, 95, 82, 60, 82, 75], d: 1073, e: [3], g: "trubbish" }, zorua: { a: 5, b: "Zorua", c: [40, 65, 40, 80, 40, 65], d: 125, e: [16], f: ["zoroark"] }, zoroark: { a: 5, b: "Zoroark", c: [60, 105, 60, 120, 60, 105], d: 811, e: [16], g: "zorua" }, minccino: { a: 5, b: "Minccino", c: [55, 50, 40, 40, 40, 75], d: 58, e: [0], f: ["cinccino"] }, cinccino: { a: 5, b: "Cinccino", c: [75, 95, 60, 65, 60, 115], d: 75, e: [0], g: "minccino" }, gothita: { a: 5, b: "Gothita", c: [45, 30, 50, 55, 65, 45], d: 58, e: [13], f: ["gothorita"] }, gothorita: { a: 5, b: "Gothorita", c: [60, 45, 70, 75, 85, 55], d: 180, e: [13], f: ["gothitelle"], g: "gothita" }, gothitelle: { a: 5, b: "Gothitelle", c: [70, 55, 95, 95, 110, 65], d: 440, e: [13], g: "gothorita" }, solosis: { a: 5, b: "Solosis", c: [45, 30, 40, 105, 50, 20], d: 10, e: [13], f: ["duosion"] }, duosion: { a: 5, b: "Duosion", c: [65, 40, 50, 125, 60, 30], d: 80, e: [13], f: ["reuniclus"], g: "solosis" }, reuniclus: { a: 5, b: "Reuniclus", c: [110, 65, 75, 125, 85, 30], d: 201, e: [13], g: "duosion" }, ducklett: { a: 5, b: "Ducklett", c: [62, 44, 50, 44, 50, 55], d: 55, e: [10, 2], f: ["swanna"] }, swanna: { a: 5, b: "Swanna", c: [75, 87, 63, 87, 63, 98], d: 242, e: [10, 2], g: "ducklett" }, vanillite: { a: 5, b: "Vanillite", c: [36, 50, 50, 65, 60, 44], d: 57, e: [14], f: ["vanillish"] }, vanillish: { a: 5, b: "Vanillish", c: [51, 65, 65, 80, 75, 59], d: 410, e: [14], f: ["vanilluxe"], g: "vanillite" }, vanilluxe: { a: 5, b: "Vanilluxe", c: [71, 95, 85, 110, 95, 79], d: 575, e: [14], g: "vanillish" }, deerling: { a: 5, b: "Deerling", c: [60, 60, 50, 40, 50, 75], d: 195, e: [0, 11], f: ["sawsbuck"] }, sawsbuck: { a: 5, b: "Sawsbuck", c: [80, 100, 70, 60, 70, 95], d: 925, e: [0, 11], g: "deerling" }, emolga: { a: 5, b: "Emolga", c: [55, 75, 60, 75, 60, 103], d: 50, e: [12, 2] }, karrablast: { a: 5, b: "Karrablast", c: [50, 75, 45, 40, 45, 60], d: 59, e: [6], f: ["escavalier"] }, escavalier: { a: 5, b: "Escavalier", c: [70, 135, 105, 60, 105, 20], d: 330, e: [6, 8], g: "karrablast" }, foongus: { a: 5, b: "Foongus", c: [69, 55, 45, 55, 55, 15], d: 10, e: [11, 3], f: ["amoonguss"] }, amoonguss: { a: 5, b: "Amoonguss", c: [114, 85, 70, 85, 80, 30], d: 105, e: [11, 3], g: "foongus" }, frillish: { a: 5, b: "Frillish", c: [55, 40, 50, 65, 85, 40], d: 330, e: [10, 7], f: ["jellicent"] }, jellicent: { a: 5, b: "Jellicent", c: [100, 60, 70, 85, 105, 60], d: 1350, e: [10, 7], g: "frillish" }, alomomola: { a: 5, b: "Alomomola", c: [165, 75, 80, 40, 45, 65], d: 316, e: [10] }, joltik: { a: 5, b: "Joltik", c: [50, 47, 50, 57, 50, 65], d: 6, e: [6, 12], f: ["galvantula"] }, galvantula: { a: 5, b: "Galvantula", c: [70, 77, 60, 97, 60, 108], d: 143, e: [6, 12], g: "joltik" }, ferroseed: { a: 5, b: "Ferroseed", c: [44, 50, 91, 24, 86, 10], d: 188, e: [11, 8], f: ["ferrothorn"] }, ferrothorn: { a: 5, b: "Ferrothorn", c: [74, 94, 131, 54, 116, 20], d: 1100, e: [11, 8], g: "ferroseed" }, klink: { a: 5, b: "Klink", c: [40, 55, 70, 45, 60, 30], d: 210, e: [8], f: ["klang"] }, klang: { a: 5, b: "Klang", c: [60, 80, 95, 70, 85, 50], d: 510, e: [8], f: ["klinklang"], g: "klink" }, klinklang: { a: 5, b: "Klinklang", c: [60, 100, 115, 70, 85, 90], d: 810, e: [8], g: "klang" }, tynamo: { a: 5, b: "Tynamo", c: [35, 55, 40, 45, 40, 60], d: 3, e: [12], f: ["eelektrik"] }, eelektrik: { a: 5, b: "Eelektrik", c: [65, 85, 70, 75, 70, 40], d: 220, e: [12], f: ["eelektross"], g: "tynamo" }, eelektross: { a: 5, b: "Eelektross", c: [85, 115, 80, 105, 80, 50], d: 805, e: [12], g: "eelektrik" }, elgyem: { a: 5, b: "Elgyem", c: [55, 55, 55, 85, 55, 30], d: 90, e: [13], f: ["beheeyem"] }, beheeyem: { a: 5, b: "Beheeyem", c: [75, 75, 75, 125, 95, 40], d: 345, e: [13], g: "elgyem" }, litwick: { a: 5, b: "Litwick", c: [50, 30, 55, 65, 55, 20], d: 31, e: [7, 9], f: ["lampent"] }, lampent: { a: 5, b: "Lampent", c: [60, 40, 60, 95, 60, 55], d: 130, e: [7, 9], f: ["chandelure"], g: "litwick" }, chandelure: { a: 5, b: "Chandelure", c: [60, 55, 90, 145, 90, 80], d: 343, e: [7, 9], g: "lampent" }, axew: { a: 5, b: "Axew", c: [46, 87, 60, 30, 40, 57], d: 180, e: [15], f: ["fraxure"] }, fraxure: { a: 5, b: "Fraxure", c: [66, 117, 70, 40, 50, 67], d: 360, e: [15], f: ["haxorus"], g: "axew" }, haxorus: { a: 5, b: "Haxorus", c: [76, 147, 90, 60, 70, 97], d: 1055, e: [15], g: "fraxure" }, cubchoo: { a: 5, b: "Cubchoo", c: [55, 70, 40, 60, 40, 40], d: 85, e: [14], f: ["beartic"] }, beartic: { a: 5, b: "Beartic", c: [95, 130, 80, 70, 80, 50], d: 2600, e: [14], g: "cubchoo" }, cryogonal: { a: 5, b: "Cryogonal", c: [80, 50, 50, 95, 135, 105], d: 1480, e: [14] }, shelmet: { a: 5, b: "Shelmet", c: [50, 40, 85, 40, 65, 25], d: 77, e: [6], f: ["accelgor"] }, accelgor: { a: 5, b: "Accelgor", c: [80, 70, 40, 100, 60, 145], d: 253, e: [6], g: "shelmet" }, stunfisk: { a: 5, b: "Stunfisk", c: [109, 66, 84, 81, 99, 32], d: 110, e: [4, 12] }, mienfoo: { a: 5, b: "Mienfoo", c: [45, 85, 50, 55, 50, 65], d: 200, e: [1], f: ["mienshao"] }, mienshao: { a: 5, b: "Mienshao", c: [65, 125, 60, 95, 60, 105], d: 355, e: [1], g: "mienfoo" }, druddigon: { a: 5, b: "Druddigon", c: [77, 120, 90, 60, 90, 48], d: 1390, e: [15] }, golett: { a: 5, b: "Golett", c: [59, 74, 50, 35, 50, 35], d: 920, e: [4, 7], f: ["golurk"] }, golurk: { a: 5, b: "Golurk", c: [89, 124, 80, 55, 80, 55], d: 3300, e: [4, 7], g: "golett" }, pawniard: { a: 5, b: "Pawniard", c: [45, 85, 70, 40, 40, 60], d: 102, e: [16, 8], f: ["bisharp"] }, bisharp: { a: 5, b: "Bisharp", c: [65, 125, 100, 60, 70, 70], d: 700, e: [16, 8], g: "pawniard" }, bouffalant: { a: 5, b: "Bouffalant", c: [95, 110, 95, 40, 95, 55], d: 946, e: [0] }, rufflet: { a: 5, b: "Rufflet", c: [70, 83, 50, 37, 50, 60], d: 105, e: [0, 2], f: ["braviary"] }, braviary: { a: 5, b: "Braviary", c: [100, 123, 75, 57, 75, 80], d: 410, e: [0, 2], g: "rufflet" }, vullaby: { a: 5, b: "Vullaby", c: [70, 55, 75, 45, 65, 60], d: 90, e: [16, 2], f: ["mandibuzz"] }, mandibuzz: { a: 5, b: "Mandibuzz", c: [110, 65, 105, 55, 95, 80], d: 395, e: [16, 2], g: "vullaby" }, heatmor: { a: 5, b: "Heatmor", c: [85, 97, 66, 105, 66, 65], d: 580, e: [9] }, durant: { a: 5, b: "Durant", c: [58, 109, 112, 48, 48, 109], d: 330, e: [6, 8] }, deino: { a: 5, b: "Deino", c: [52, 65, 50, 45, 50, 38], d: 173, e: [16, 15], f: ["zweilous"] }, zweilous: { a: 5, b: "Zweilous", c: [72, 85, 70, 65, 70, 58], d: 500, e: [16, 15], f: ["hydreigon"], g: "deino" }, hydreigon: { a: 5, b: "Hydreigon", c: [92, 105, 90, 125, 90, 98], d: 1600, e: [16, 15], g: "zweilous" }, larvesta: { a: 5, b: "Larvesta", c: [55, 85, 55, 50, 55, 60], d: 288, e: [6, 9], f: ["volcarona"] }, volcarona: { a: 5, b: "Volcarona", c: [85, 60, 65, 135, 105, 100], d: 460, e: [6, 9], g: "larvesta" }, cobalion: { a: 5, b: "Cobalion", c: [91, 90, 129, 90, 72, 108], d: 2500, e: [8, 1] }, terrakion: { a: 5, b: "Terrakion", c: [91, 129, 90, 72, 90, 108], d: 2600, e: [5, 1] }, virizion: { a: 5, b: "Virizion", c: [91, 90, 72, 90, 129, 108], d: 2e3, e: [11, 1] }, tornadus: { a: 5, b: "Tornadus", c: [79, 115, 70, 125, 80, 111], d: 630, e: [2] }, tornadustherian: { a: 5, b: "Tornadus-Therian", c: [79, 100, 80, 110, 90, 121], d: 630, e: [2], h: "Therian", i: "tornadus" }, thundurus: { a: 5, b: "Thundurus", c: [79, 115, 70, 125, 80, 111], d: 610, e: [12, 2] }, thundurustherian: { a: 5, b: "Thundurus-Therian", c: [79, 105, 70, 145, 80, 101], d: 610, e: [12, 2], h: "Therian", i: "thundurus" }, reshiram: { a: 5, b: "Reshiram", c: [100, 120, 100, 150, 120, 90], d: 3300, e: [15, 9] }, zekrom: { a: 5, b: "Zekrom", c: [100, 150, 120, 120, 100, 90], d: 3450, e: [15, 12] }, landorus: { a: 5, b: "Landorus", c: [89, 125, 90, 115, 80, 101], d: 680, e: [4, 2] }, landorustherian: { a: 5, b: "Landorus-Therian", c: [89, 145, 90, 105, 80, 91], d: 680, e: [4, 2], h: "Therian", i: "landorus" }, kyurem: { a: 5, b: "Kyurem", c: [125, 130, 90, 130, 90, 95], d: 3250, e: [15, 14] }, kyuremblack: { a: 5, b: "Kyurem-Black", c: [125, 170, 100, 120, 90, 95], d: 3250, e: [15, 14], h: "Black", i: "kyurem" }, kyuremwhite: { a: 5, b: "Kyurem-White", c: [125, 120, 90, 170, 100, 95], d: 3250, e: [15, 14], h: "White", i: "kyurem" }, keldeo: { a: 5, b: "Keldeo", c: [91, 72, 90, 129, 90, 108], d: 485, e: [10, 1] }, keldeoresolute: { a: 5, b: "Keldeo-Resolute", c: [91, 72, 90, 129, 90, 108], d: 485, e: [10, 1], h: "Resolute", i: "keldeo" }, meloetta: { a: 5, b: "Meloetta", c: [100, 77, 77, 128, 128, 90], d: 65, e: [0, 13] }, meloettapirouette: { a: 5, b: "Meloetta-Pirouette", c: [100, 128, 90, 77, 77, 128], d: 65, e: [0, 1], h: "Pirouette", i: "meloetta" }, genesect: { a: 5, b: "Genesect", c: [71, 120, 95, 120, 95, 99], d: 825, e: [6, 8] }, genesectdouse: { a: 5, b: "Genesect-Douse", c: [71, 120, 95, 120, 95, 99], d: 825, e: [6, 8], h: "Douse", i: "genesect", j: "dousedrive" }, genesectshock: { a: 5, b: "Genesect-Shock", c: [71, 120, 95, 120, 95, 99], d: 825, e: [6, 8], h: "Shock", i: "genesect", j: "shockdrive" }, genesectburn: { a: 5, b: "Genesect-Burn", c: [71, 120, 95, 120, 95, 99], d: 825, e: [6, 8], h: "Burn", i: "genesect", j: "burndrive" }, genesectchill: { a: 5, b: "Genesect-Chill", c: [71, 120, 95, 120, 95, 99], d: 825, e: [6, 8], h: "Chill", i: "genesect", j: "chilldrive" }, chespin: { a: 6, b: "Chespin", c: [56, 61, 65, 48, 45, 38], d: 90, e: [11], f: ["quilladin"] }, quilladin: { a: 6, b: "Quilladin", c: [61, 78, 95, 56, 58, 57], d: 290, e: [11], f: ["chesnaught"], g: "chespin" }, chesnaught: { a: 6, b: "Chesnaught", c: [88, 107, 122, 74, 75, 64], d: 900, e: [11, 1], g: "quilladin" }, fennekin: { a: 6, b: "Fennekin", c: [40, 45, 40, 62, 60, 60], d: 94, e: [9], f: ["braixen"] }, braixen: { a: 6, b: "Braixen", c: [59, 59, 58, 90, 70, 73], d: 145, e: [9], f: ["delphox"], g: "fennekin" }, delphox: { a: 6, b: "Delphox", c: [75, 69, 72, 114, 100, 104], d: 390, e: [9, 13], g: "braixen" }, froakie: { a: 6, b: "Froakie", c: [41, 56, 40, 62, 44, 71], d: 70, e: [10], f: ["frogadier"] }, frogadier: { a: 6, b: "Frogadier", c: [54, 63, 52, 83, 56, 97], d: 109, e: [10], f: ["greninja"], g: "froakie" }, greninja: { a: 6, b: "Greninja", c: [72, 95, 67, 103, 71, 122], d: 400, e: [10, 16], g: "frogadier" }, greninjaash: { a: 6, b: "Greninja-Ash", c: [72, 145, 67, 153, 71, 132], d: 400, e: [10, 16], h: "Ash", i: "greninja" }, bunnelby: { a: 6, b: "Bunnelby", c: [38, 36, 38, 32, 36, 57], d: 50, e: [0], f: ["diggersby"] }, diggersby: { a: 6, b: "Diggersby", c: [85, 56, 77, 50, 77, 78], d: 424, e: [0, 4], g: "bunnelby" }, fletchling: { a: 6, b: "Fletchling", c: [45, 50, 43, 40, 38, 62], d: 17, e: [0, 2], f: ["fletchinder"] }, fletchinder: { a: 6, b: "Fletchinder", c: [62, 73, 55, 56, 52, 84], d: 160, e: [9, 2], f: ["talonflame"], g: "fletchling" }, talonflame: { a: 6, b: "Talonflame", c: [78, 81, 71, 74, 69, 126], d: 245, e: [9, 2], g: "fletchinder" }, scatterbug: { a: 6, b: "Scatterbug", c: [38, 35, 40, 27, 25, 35], d: 25, e: [6], f: ["spewpa"] }, spewpa: { a: 6, b: "Spewpa", c: [45, 22, 60, 27, 30, 29], d: 84, e: [6], f: ["vivillon"], g: "scatterbug" }, vivillon: { a: 6, b: "Vivillon", c: [80, 52, 50, 90, 50, 89], d: 170, e: [6, 2], g: "spewpa" }, vivillonfancy: { a: 6, b: "Vivillon-Fancy", c: [80, 52, 50, 90, 50, 89], d: 170, e: [6, 2], h: "Fancy", i: "vivillon" }, vivillonpokeball: { a: 6, b: "Vivillon-Pokeball", c: [80, 52, 50, 90, 50, 89], d: 170, e: [6, 2], h: "Pokeball", i: "vivillon" }, litleo: { a: 6, b: "Litleo", c: [62, 50, 58, 73, 54, 72], d: 135, e: [9, 0], f: ["pyroar"] }, pyroar: { a: 6, b: "Pyroar", c: [86, 68, 72, 109, 66, 106], d: 815, e: [9, 0], g: "litleo" }, flabebe: { a: 6, b: "Flabébé", c: [44, 38, 39, 61, 79, 42], d: 1, e: [17], f: ["floette"] }, floette: { a: 6, b: "Floette", c: [54, 45, 47, 75, 98, 52], d: 9, e: [17], f: ["florges"], g: "flabebe" }, floetteeternal: { a: 6, b: "Floette-Eternal", c: [74, 65, 67, 125, 128, 92], d: 9, e: [17], h: "Eternal", i: "floette" }, florges: { a: 6, b: "Florges", c: [78, 65, 68, 112, 154, 75], d: 100, e: [17], g: "floette" }, skiddo: { a: 6, b: "Skiddo", c: [66, 65, 48, 62, 57, 52], d: 310, e: [11], f: ["gogoat"] }, gogoat: { a: 6, b: "Gogoat", c: [123, 100, 62, 97, 81, 68], d: 910, e: [11], g: "skiddo" }, pancham: { a: 6, b: "Pancham", c: [67, 82, 62, 46, 48, 43], d: 80, e: [1], f: ["pangoro"] }, pangoro: { a: 6, b: "Pangoro", c: [95, 124, 78, 69, 71, 58], d: 1360, e: [1, 16], g: "pancham" }, furfrou: { a: 6, b: "Furfrou", c: [75, 80, 60, 65, 90, 102], d: 280, e: [0] }, espurr: { a: 6, b: "Espurr", c: [62, 48, 54, 63, 60, 68], d: 35, e: [13], f: ["meowstic"] }, meowstic: { a: 6, b: "Meowstic", c: [74, 48, 76, 83, 81, 104], d: 85, e: [13], g: "espurr" }, meowsticf: { a: 6, b: "Meowstic-F", c: [74, 48, 76, 83, 81, 104], d: 85, e: [13], g: "espurr", h: "F", i: "meowstic" }, honedge: { a: 6, b: "Honedge", c: [45, 80, 100, 35, 37, 28], d: 20, e: [8, 7], f: ["doublade"] }, doublade: { a: 6, b: "Doublade", c: [59, 110, 150, 45, 49, 35], d: 45, e: [8, 7], f: ["aegislash"], g: "honedge" }, aegislash: { a: 6, b: "Aegislash", c: [60, 50, 150, 50, 150, 60], d: 530, e: [8, 7], g: "doublade" }, aegislashblade: { a: 6, b: "Aegislash-Blade", c: [60, 150, 50, 150, 50, 60], d: 530, e: [8, 7], g: "doublade", h: "Blade", i: "aegislash" }, spritzee: { a: 6, b: "Spritzee", c: [78, 52, 60, 63, 65, 23], d: 5, e: [17], f: ["aromatisse"] }, aromatisse: { a: 6, b: "Aromatisse", c: [101, 72, 72, 99, 89, 29], d: 155, e: [17], g: "spritzee" }, swirlix: { a: 6, b: "Swirlix", c: [62, 48, 66, 59, 57, 49], d: 35, e: [17], f: ["slurpuff"] }, slurpuff: { a: 6, b: "Slurpuff", c: [82, 80, 86, 85, 75, 72], d: 50, e: [17], g: "swirlix" }, inkay: { a: 6, b: "Inkay", c: [53, 54, 53, 37, 46, 45], d: 35, e: [16, 13], f: ["malamar"] }, malamar: { a: 6, b: "Malamar", c: [86, 92, 88, 68, 75, 73], d: 470, e: [16, 13], g: "inkay" }, binacle: { a: 6, b: "Binacle", c: [42, 52, 67, 39, 56, 50], d: 310, e: [5, 10], f: ["barbaracle"] }, barbaracle: { a: 6, b: "Barbaracle", c: [72, 105, 115, 54, 86, 68], d: 960, e: [5, 10], g: "binacle" }, skrelp: { a: 6, b: "Skrelp", c: [50, 60, 60, 60, 60, 30], d: 73, e: [3, 10], f: ["dragalge"] }, dragalge: { a: 6, b: "Dragalge", c: [65, 75, 90, 97, 123, 44], d: 815, e: [3, 15], g: "skrelp" }, clauncher: { a: 6, b: "Clauncher", c: [50, 53, 62, 58, 63, 44], d: 83, e: [10], f: ["clawitzer"] }, clawitzer: { a: 6, b: "Clawitzer", c: [71, 73, 88, 120, 89, 59], d: 353, e: [10], g: "clauncher" }, helioptile: { a: 6, b: "Helioptile", c: [44, 38, 33, 61, 43, 70], d: 60, e: [12, 0], f: ["heliolisk"] }, heliolisk: { a: 6, b: "Heliolisk", c: [62, 55, 52, 109, 94, 109], d: 210, e: [12, 0], g: "helioptile" }, tyrunt: { a: 6, b: "Tyrunt", c: [58, 89, 77, 45, 45, 48], d: 260, e: [5, 15], f: ["tyrantrum"] }, tyrantrum: { a: 6, b: "Tyrantrum", c: [82, 121, 119, 69, 59, 71], d: 2700, e: [5, 15], g: "tyrunt" }, amaura: { a: 6, b: "Amaura", c: [77, 59, 50, 67, 63, 46], d: 252, e: [5, 14], f: ["aurorus"] }, aurorus: { a: 6, b: "Aurorus", c: [123, 77, 72, 99, 92, 58], d: 2250, e: [5, 14], g: "amaura" }, sylveon: { a: 6, b: "Sylveon", c: [95, 65, 65, 110, 130, 60], d: 235, e: [17], g: "eevee" }, hawlucha: { a: 6, b: "Hawlucha", c: [78, 92, 75, 74, 63, 118], d: 215, e: [1, 2] }, dedenne: { a: 6, b: "Dedenne", c: [67, 58, 57, 81, 67, 101], d: 22, e: [12, 17] }, carbink: { a: 6, b: "Carbink", c: [50, 50, 150, 50, 150, 50], d: 57, e: [5, 17] }, goomy: { a: 6, b: "Goomy", c: [45, 50, 35, 55, 75, 40], d: 28, e: [15], f: ["sliggoo"] }, sliggoo: { a: 6, b: "Sliggoo", c: [68, 75, 53, 83, 113, 60], d: 175, e: [15], f: ["goodra"], g: "goomy" }, goodra: { a: 6, b: "Goodra", c: [90, 100, 70, 110, 150, 80], d: 1505, e: [15], g: "sliggoo" }, klefki: { a: 6, b: "Klefki", c: [57, 80, 91, 80, 87, 75], d: 30, e: [8, 17] }, phantump: { a: 6, b: "Phantump", c: [43, 70, 48, 50, 60, 38], d: 70, e: [7, 11], f: ["trevenant"] }, trevenant: { a: 6, b: "Trevenant", c: [85, 110, 76, 65, 82, 56], d: 710, e: [7, 11], g: "phantump" }, pumpkaboo: { a: 6, b: "Pumpkaboo", c: [49, 66, 70, 44, 55, 51], d: 50, e: [7, 11], f: ["gourgeist"] }, pumpkaboosmall: { a: 6, b: "Pumpkaboo-Small", c: [44, 66, 70, 44, 55, 56], d: 35, e: [7, 11], f: ["gourgeistsmall"], h: "Small", i: "pumpkaboo" }, pumpkaboolarge: { a: 6, b: "Pumpkaboo-Large", c: [54, 66, 70, 44, 55, 46], d: 75, e: [7, 11], f: ["gourgeistlarge"], h: "Large", i: "pumpkaboo" }, pumpkaboosuper: { a: 6, b: "Pumpkaboo-Super", c: [59, 66, 70, 44, 55, 41], d: 150, e: [7, 11], f: ["gourgeistsuper"], h: "Super", i: "pumpkaboo" }, gourgeist: { a: 6, b: "Gourgeist", c: [65, 90, 122, 58, 75, 84], d: 125, e: [7, 11], g: "pumpkaboo" }, gourgeistsmall: { a: 6, b: "Gourgeist-Small", c: [55, 85, 122, 58, 75, 99], d: 95, e: [7, 11], g: "pumpkaboosmall", h: "Small", i: "gourgeist" }, gourgeistlarge: { a: 6, b: "Gourgeist-Large", c: [75, 95, 122, 58, 75, 69], d: 140, e: [7, 11], g: "pumpkaboolarge", h: "Large", i: "gourgeist" }, gourgeistsuper: { a: 6, b: "Gourgeist-Super", c: [85, 100, 122, 58, 75, 54], d: 390, e: [7, 11], g: "pumpkaboosuper", h: "Super", i: "gourgeist" }, bergmite: { a: 6, b: "Bergmite", c: [55, 69, 85, 32, 35, 28], d: 995, e: [14], f: ["avalugg"] }, avalugg: { a: 6, b: "Avalugg", c: [95, 117, 184, 44, 46, 28], d: 5050, e: [14], g: "bergmite" }, noibat: { a: 6, b: "Noibat", c: [40, 30, 35, 45, 40, 55], d: 80, e: [2, 15], f: ["noivern"] }, noivern: { a: 6, b: "Noivern", c: [85, 70, 80, 97, 80, 123], d: 850, e: [2, 15], g: "noibat" }, xerneas: { a: 6, b: "Xerneas", c: [126, 131, 95, 131, 98, 99], d: 2150, e: [17] }, yveltal: { a: 6, b: "Yveltal", c: [126, 131, 95, 131, 98, 99], d: 2030, e: [16, 2] }, zygarde: { a: 6, b: "Zygarde", c: [108, 100, 121, 81, 95, 95], d: 3050, e: [15, 4] }, zygarde10: { a: 6, b: "Zygarde-10%", c: [54, 100, 71, 61, 85, 115], d: 335, e: [15, 4], h: "10%", i: "zygarde" }, zygardecomplete: { a: 6, b: "Zygarde-Complete", c: [216, 100, 121, 91, 95, 85], d: 6100, e: [15, 4], h: "Complete", i: "zygarde" }, diancie: { a: 6, b: "Diancie", c: [50, 100, 150, 100, 150, 50], d: 88, e: [5, 17] }, dianciemega: { a: 6, b: "Diancie-Mega", c: [50, 160, 110, 160, 110, 110], d: 278, e: [5, 17], h: "Mega", i: "diancie", j: "diancite" }, hoopa: { a: 6, b: "Hoopa", c: [80, 110, 60, 150, 130, 70], d: 90, e: [13, 7] }, hoopaunbound: { a: 6, b: "Hoopa-Unbound", c: [80, 160, 60, 170, 130, 80], d: 4900, e: [13, 16], h: "Unbound", i: "hoopa" }, volcanion: { a: 6, b: "Volcanion", c: [80, 110, 120, 130, 90, 70], d: 1950, e: [9, 10] }, rowlet: { a: 7, b: "Rowlet", c: [68, 55, 55, 50, 50, 42], d: 15, e: [11, 2], f: ["dartrix"] }, dartrix: { a: 7, b: "Dartrix", c: [78, 75, 75, 70, 70, 52], d: 160, e: [11, 2], f: ["decidueye"], g: "rowlet" }, decidueye: { a: 7, b: "Decidueye", c: [78, 107, 75, 100, 100, 70], d: 366, e: [11, 7], g: "dartrix" }, litten: { a: 7, b: "Litten", c: [45, 65, 40, 60, 40, 70], d: 43, e: [9], f: ["torracat"] }, torracat: { a: 7, b: "Torracat", c: [65, 85, 50, 80, 50, 90], d: 250, e: [9], f: ["incineroar"], g: "litten" }, incineroar: { a: 7, b: "Incineroar", c: [95, 115, 90, 80, 90, 60], d: 830, e: [9, 16], g: "torracat" }, popplio: { a: 7, b: "Popplio", c: [50, 54, 54, 66, 56, 40], d: 75, e: [10], f: ["brionne"] }, brionne: { a: 7, b: "Brionne", c: [60, 69, 69, 91, 81, 50], d: 175, e: [10], f: ["primarina"], g: "popplio" }, primarina: { a: 7, b: "Primarina", c: [80, 74, 74, 126, 116, 60], d: 440, e: [10, 17], g: "brionne" }, pikipek: { a: 7, b: "Pikipek", c: [35, 75, 30, 30, 30, 65], d: 12, e: [0, 2], f: ["trumbeak"] }, trumbeak: { a: 7, b: "Trumbeak", c: [55, 85, 50, 40, 50, 75], d: 148, e: [0, 2], f: ["toucannon"], g: "pikipek" }, toucannon: { a: 7, b: "Toucannon", c: [80, 120, 75, 75, 75, 60], d: 260, e: [0, 2], g: "trumbeak" }, yungoos: { a: 7, b: "Yungoos", c: [48, 70, 30, 30, 30, 45], d: 60, e: [0], f: ["gumshoos"] }, gumshoos: { a: 7, b: "Gumshoos", c: [88, 110, 60, 55, 60, 45], d: 142, e: [0], g: "yungoos" }, grubbin: { a: 7, b: "Grubbin", c: [47, 62, 45, 55, 45, 46], d: 44, e: [6], f: ["charjabug"] }, charjabug: { a: 7, b: "Charjabug", c: [57, 82, 95, 55, 75, 36], d: 105, e: [6, 12], f: ["vikavolt"], g: "grubbin" }, vikavolt: { a: 7, b: "Vikavolt", c: [77, 70, 90, 145, 75, 43], d: 450, e: [6, 12], g: "charjabug" }, crabrawler: { a: 7, b: "Crabrawler", c: [47, 82, 57, 42, 47, 63], d: 70, e: [1], f: ["crabominable"] }, crabominable: { a: 7, b: "Crabominable", c: [97, 132, 77, 62, 67, 43], d: 1800, e: [1, 14], g: "crabrawler" }, oricorio: { a: 7, b: "Oricorio", c: [75, 70, 70, 98, 70, 93], d: 34, e: [9, 2] }, oricoriopompom: { a: 7, b: "Oricorio-Pom-Pom", c: [75, 70, 70, 98, 70, 93], d: 34, e: [12, 2], h: "Pom-Pom", i: "oricorio" }, oricoriopau: { a: 7, b: "Oricorio-Pa'u", c: [75, 70, 70, 98, 70, 93], d: 34, e: [13, 2], h: "Pa'u", i: "oricorio" }, oricoriosensu: { a: 7, b: "Oricorio-Sensu", c: [75, 70, 70, 98, 70, 93], d: 34, e: [7, 2], h: "Sensu", i: "oricorio" }, cutiefly: { a: 7, b: "Cutiefly", c: [40, 45, 40, 55, 40, 84], d: 2, e: [6, 17], f: ["ribombee"] }, ribombee: { a: 7, b: "Ribombee", c: [60, 55, 60, 95, 70, 124], d: 5, e: [6, 17], g: "cutiefly" }, rockruff: { a: 7, b: "Rockruff", c: [45, 65, 40, 30, 40, 60], d: 92, e: [5], f: ["lycanroc", "lycanrocmidnight", "lycanrocdusk"] }, lycanroc: { a: 7, b: "Lycanroc", c: [75, 115, 65, 55, 65, 112], d: 250, e: [5], g: "rockruff" }, lycanrocmidnight: { a: 7, b: "Lycanroc-Midnight", c: [85, 115, 75, 55, 75, 82], d: 250, e: [5], g: "rockruff", h: "Midnight", i: "lycanroc" }, lycanrocdusk: { a: 7, b: "Lycanroc-Dusk", c: [75, 117, 65, 55, 65, 110], d: 250, e: [5], g: "rockruff", h: "Dusk", i: "lycanroc" }, wishiwashi: { a: 7, b: "Wishiwashi", c: [45, 20, 20, 25, 25, 40], d: 3, e: [10] }, wishiwashischool: { a: 7, b: "Wishiwashi-School", c: [45, 140, 130, 140, 135, 30], d: 786, e: [10], h: "School", i: "wishiwashi" }, mareanie: { a: 7, b: "Mareanie", c: [50, 53, 62, 43, 52, 45], d: 80, e: [3, 10], f: ["toxapex"] }, toxapex: { a: 7, b: "Toxapex", c: [50, 63, 152, 53, 142, 35], d: 145, e: [3, 10], g: "mareanie" }, mudbray: { a: 7, b: "Mudbray", c: [70, 100, 70, 45, 55, 45], d: 1100, e: [4], f: ["mudsdale"] }, mudsdale: { a: 7, b: "Mudsdale", c: [100, 125, 100, 55, 85, 35], d: 9200, e: [4], g: "mudbray" }, dewpider: { a: 7, b: "Dewpider", c: [38, 40, 52, 40, 72, 27], d: 40, e: [10, 6], f: ["araquanid"] }, araquanid: { a: 7, b: "Araquanid", c: [68, 70, 92, 50, 132, 42], d: 820, e: [10, 6], g: "dewpider" }, fomantis: { a: 7, b: "Fomantis", c: [40, 55, 35, 50, 35, 35], d: 15, e: [11], f: ["lurantis"] }, lurantis: { a: 7, b: "Lurantis", c: [70, 105, 90, 80, 90, 45], d: 185, e: [11], g: "fomantis" }, morelull: { a: 7, b: "Morelull", c: [40, 35, 55, 65, 75, 15], d: 15, e: [11, 17], f: ["shiinotic"] }, shiinotic: { a: 7, b: "Shiinotic", c: [60, 45, 80, 90, 100, 30], d: 115, e: [11, 17], g: "morelull" }, salandit: { a: 7, b: "Salandit", c: [48, 44, 40, 71, 40, 77], d: 48, e: [3, 9], f: ["salazzle"] }, salazzle: { a: 7, b: "Salazzle", c: [68, 64, 60, 111, 60, 117], d: 222, e: [3, 9], g: "salandit" }, stufful: { a: 7, b: "Stufful", c: [70, 75, 50, 45, 50, 50], d: 68, e: [0, 1], f: ["bewear"] }, bewear: { a: 7, b: "Bewear", c: [120, 125, 80, 55, 60, 60], d: 1350, e: [0, 1], g: "stufful" }, bounsweet: { a: 7, b: "Bounsweet", c: [42, 30, 38, 30, 38, 32], d: 32, e: [11], f: ["steenee"] }, steenee: { a: 7, b: "Steenee", c: [52, 40, 48, 40, 48, 62], d: 82, e: [11], f: ["tsareena"], g: "bounsweet" }, tsareena: { a: 7, b: "Tsareena", c: [72, 120, 98, 50, 98, 72], d: 214, e: [11], g: "steenee" }, comfey: { a: 7, b: "Comfey", c: [51, 52, 90, 82, 110, 100], d: 3, e: [17] }, oranguru: { a: 7, b: "Oranguru", c: [90, 60, 80, 90, 110, 60], d: 760, e: [0, 13] }, passimian: { a: 7, b: "Passimian", c: [100, 120, 90, 40, 60, 80], d: 828, e: [1] }, wimpod: { a: 7, b: "Wimpod", c: [25, 35, 40, 20, 30, 80], d: 120, e: [6, 10], f: ["golisopod"] }, golisopod: { a: 7, b: "Golisopod", c: [75, 125, 140, 60, 90, 40], d: 1080, e: [6, 10], g: "wimpod" }, sandygast: { a: 7, b: "Sandygast", c: [55, 55, 80, 70, 45, 15], d: 700, e: [7, 4], f: ["palossand"] }, palossand: { a: 7, b: "Palossand", c: [85, 75, 110, 100, 75, 35], d: 2500, e: [7, 4], g: "sandygast" }, pyukumuku: { a: 7, b: "Pyukumuku", c: [55, 60, 130, 30, 130, 5], d: 12, e: [10] }, typenull: { a: 7, b: "Type: Null", c: [95, 95, 95, 95, 95, 59], d: 1205, e: [0], f: ["silvally"] }, silvally: { a: 7, b: "Silvally", c: [95, 95, 95, 95, 95, 95], d: 1005, e: [0], g: "typenull" }, silvallybug: { a: 7, b: "Silvally-Bug", c: [95, 95, 95, 95, 95, 95], d: 1005, e: [6], g: "typenull", h: "Bug", i: "silvally", j: "bugmemory" }, silvallydark: { a: 7, b: "Silvally-Dark", c: [95, 95, 95, 95, 95, 95], d: 1005, e: [16], g: "typenull", h: "Dark", i: "silvally", j: "darkmemory" }, silvallydragon: { a: 7, b: "Silvally-Dragon", c: [95, 95, 95, 95, 95, 95], d: 1005, e: [15], g: "typenull", h: "Dragon", i: "silvally", j: "dragonmemory" }, silvallyelectric: { a: 7, b: "Silvally-Electric", c: [95, 95, 95, 95, 95, 95], d: 1005, e: [12], g: "typenull", h: "Electric", i: "silvally", j: "electricmemory" }, silvallyfairy: { a: 7, b: "Silvally-Fairy", c: [95, 95, 95, 95, 95, 95], d: 1005, e: [17], g: "typenull", h: "Fairy", i: "silvally", j: "fairymemory" }, silvallyfighting: { a: 7, b: "Silvally-Fighting", c: [95, 95, 95, 95, 95, 95], d: 1005, e: [1], g: "typenull", h: "Fighting", i: "silvally", j: "fightingmemory" }, silvallyfire: { a: 7, b: "Silvally-Fire", c: [95, 95, 95, 95, 95, 95], d: 1005, e: [9], g: "typenull", h: "Fire", i: "silvally", j: "firememory" }, silvallyflying: { a: 7, b: "Silvally-Flying", c: [95, 95, 95, 95, 95, 95], d: 1005, e: [2], g: "typenull", h: "Flying", i: "silvally", j: "flyingmemory" }, silvallyghost: { a: 7, b: "Silvally-Ghost", c: [95, 95, 95, 95, 95, 95], d: 1005, e: [7], g: "typenull", h: "Ghost", i: "silvally", j: "ghostmemory" }, silvallygrass: { a: 7, b: "Silvally-Grass", c: [95, 95, 95, 95, 95, 95], d: 1005, e: [11], g: "typenull", h: "Grass", i: "silvally", j: "grassmemory" }, silvallyground: { a: 7, b: "Silvally-Ground", c: [95, 95, 95, 95, 95, 95], d: 1005, e: [4], g: "typenull", h: "Ground", i: "silvally", j: "groundmemory" }, silvallyice: { a: 7, b: "Silvally-Ice", c: [95, 95, 95, 95, 95, 95], d: 1005, e: [14], g: "typenull", h: "Ice", i: "silvally", j: "icememory" }, silvallypoison: { a: 7, b: "Silvally-Poison", c: [95, 95, 95, 95, 95, 95], d: 1005, e: [3], g: "typenull", h: "Poison", i: "silvally", j: "poisonmemory" }, silvallypsychic: { a: 7, b: "Silvally-Psychic", c: [95, 95, 95, 95, 95, 95], d: 1005, e: [13], g: "typenull", h: "Psychic", i: "silvally", j: "psychicmemory" }, silvallyrock: { a: 7, b: "Silvally-Rock", c: [95, 95, 95, 95, 95, 95], d: 1005, e: [5], g: "typenull", h: "Rock", i: "silvally", j: "rockmemory" }, silvallysteel: { a: 7, b: "Silvally-Steel", c: [95, 95, 95, 95, 95, 95], d: 1005, e: [8], g: "typenull", h: "Steel", i: "silvally", j: "steelmemory" }, silvallywater: { a: 7, b: "Silvally-Water", c: [95, 95, 95, 95, 95, 95], d: 1005, e: [10], g: "typenull", h: "Water", i: "silvally", j: "watermemory" }, minior: { a: 7, b: "Minior", c: [60, 100, 60, 100, 60, 120], d: 3, e: [5, 2] }, miniormeteor: { a: 7, b: "Minior-Meteor", c: [60, 60, 100, 60, 100, 60], d: 400, e: [5, 2], h: "Meteor", i: "minior" }, komala: { a: 7, b: "Komala", c: [65, 115, 65, 75, 95, 65], d: 199, e: [0] }, turtonator: { a: 7, b: "Turtonator", c: [60, 78, 135, 91, 85, 36], d: 2120, e: [9, 15] }, togedemaru: { a: 7, b: "Togedemaru", c: [65, 98, 63, 40, 73, 96], d: 33, e: [12, 8] }, mimikyu: { a: 7, b: "Mimikyu", c: [55, 90, 80, 50, 105, 96], d: 7, e: [7, 17] }, mimikyubusted: { a: 7, b: "Mimikyu-Busted", c: [55, 90, 80, 50, 105, 96], d: 7, e: [7, 17], h: "Busted", i: "mimikyu" }, bruxish: { a: 7, b: "Bruxish", c: [68, 105, 70, 70, 70, 92], d: 190, e: [10, 13] }, drampa: { a: 7, b: "Drampa", c: [78, 60, 85, 135, 91, 36], d: 1850, e: [0, 15] }, dhelmise: { a: 7, b: "Dhelmise", c: [70, 131, 100, 86, 90, 40], d: 2100, e: [7, 11] }, jangmoo: { a: 7, b: "Jangmo-o", c: [45, 55, 65, 45, 45, 45], d: 297, e: [15], f: ["hakamoo"] }, hakamoo: { a: 7, b: "Hakamo-o", c: [55, 75, 90, 65, 70, 65], d: 470, e: [15, 1], f: ["kommoo"], g: "jangmoo" }, kommoo: { a: 7, b: "Kommo-o", c: [75, 110, 125, 100, 105, 85], d: 782, e: [15, 1], g: "hakamoo" }, tapukoko: { a: 7, b: "Tapu Koko", c: [70, 115, 85, 95, 75, 130], d: 205, e: [12, 17] }, tapulele: { a: 7, b: "Tapu Lele", c: [70, 85, 75, 130, 115, 95], d: 186, e: [13, 17] }, tapubulu: { a: 7, b: "Tapu Bulu", c: [70, 130, 115, 85, 95, 75], d: 455, e: [11, 17] }, tapufini: { a: 7, b: "Tapu Fini", c: [70, 75, 115, 95, 130, 85], d: 212, e: [10, 17] }, cosmog: { a: 7, b: "Cosmog", c: [43, 29, 31, 29, 31, 37], d: 1, e: [13], f: ["cosmoem"] }, cosmoem: { a: 7, b: "Cosmoem", c: [43, 29, 131, 29, 131, 37], d: 9999, e: [13], f: ["solgaleo", "lunala"], g: "cosmog" }, solgaleo: { a: 7, b: "Solgaleo", c: [137, 137, 107, 113, 89, 97], d: 2300, e: [13, 8], g: "cosmoem" }, lunala: { a: 7, b: "Lunala", c: [137, 113, 89, 137, 107, 97], d: 1200, e: [13, 7], g: "cosmoem" }, nihilego: { a: 7, b: "Nihilego", c: [109, 53, 47, 127, 131, 103], d: 555, e: [5, 3] }, buzzwole: { a: 7, b: "Buzzwole", c: [107, 139, 139, 53, 53, 79], d: 3336, e: [6, 1] }, pheromosa: { a: 7, b: "Pheromosa", c: [71, 137, 37, 137, 37, 151], d: 250, e: [6, 1] }, xurkitree: { a: 7, b: "Xurkitree", c: [83, 89, 71, 173, 71, 83], d: 1e3, e: [12] }, celesteela: { a: 7, b: "Celesteela", c: [97, 101, 103, 107, 101, 61], d: 9999, e: [8, 2] }, kartana: { a: 7, b: "Kartana", c: [59, 181, 131, 59, 31, 109], d: 1, e: [11, 8] }, guzzlord: { a: 7, b: "Guzzlord", c: [223, 101, 53, 97, 53, 43], d: 8880, e: [16, 15] }, necrozma: { a: 7, b: "Necrozma", c: [97, 107, 101, 127, 89, 79], d: 2300, e: [13] }, necrozmaduskmane: { a: 7, b: "Necrozma-Dusk-Mane", c: [97, 157, 127, 113, 109, 77], d: 4600, e: [13, 8], h: "Dusk-Mane", i: "necrozma" }, necrozmadawnwings: { a: 7, b: "Necrozma-Dawn-Wings", c: [97, 113, 109, 157, 127, 77], d: 3500, e: [13, 7], h: "Dawn-Wings", i: "necrozma" }, necrozmaultra: { a: 7, b: "Necrozma-Ultra", c: [97, 167, 97, 167, 97, 129], d: 2300, e: [13, 15], h: "Ultra", i: "necrozma" }, magearna: { a: 7, b: "Magearna", c: [80, 95, 115, 130, 115, 65], d: 805, e: [8, 17] }, magearnaoriginal: { a: 7, b: "Magearna-Original", c: [80, 95, 115, 130, 115, 65], d: 805, e: [8, 17], h: "Original", i: "magearna" }, marshadow: { a: 7, b: "Marshadow", c: [90, 125, 80, 90, 90, 125], d: 222, e: [1, 7] }, poipole: { a: 7, b: "Poipole", c: [67, 73, 67, 73, 67, 73], d: 18, e: [3], f: ["naganadel"] }, naganadel: { a: 7, b: "Naganadel", c: [73, 73, 73, 127, 73, 121], d: 1500, e: [3, 15], g: "poipole" }, stakataka: { a: 7, b: "Stakataka", c: [61, 131, 211, 53, 101, 13], d: 8200, e: [5, 8] }, blacephalon: { a: 7, b: "Blacephalon", c: [53, 127, 53, 151, 79, 107], d: 130, e: [9, 7] }, zeraora: { a: 7, b: "Zeraora", c: [88, 112, 75, 102, 80, 143], d: 445, e: [12] }, missingno: { b: "Missingno.", c: [33, 136, 0, 6, 6, 29], d: 15908, e: [18, 0] }, nopokemon: { name: "(No Pokemon)", c: [50, 50, 50, 50, 50, 50] } }, typechart: { 0: { 0: 2, 1: 4, 2: 2, 3: 2, 4: 2, 5: 2, 6: 2, 7: 0, 8: 2, 9: 2, 10: 2, 11: 2, 12: 2, 13: 2, 14: 2, 15: 2, 16: 2, 17: 2 }, 1: { 0: 2, 1: 2, 2: 4, 3: 2, 4: 2, 5: 1, 6: 1, 7: 2, 8: 2, 9: 2, 10: 2, 11: 2, 12: 2, 13: 4, 14: 2, 15: 2, 16: 1, 17: 4 }, 2: { 0: 2, 1: 1, 2: 2, 3: 2, 4: 0, 5: 4, 6: 1, 7: 2, 8: 2, 9: 2, 10: 2, 11: 1, 12: 4, 13: 2, 14: 4, 15: 2, 16: 2, 17: 2 }, 3: { 0: 2, 1: 1, 2: 2, 3: 1, 4: 4, 5: 2, 6: 1, 7: 2, 8: 2, 9: 2, 10: 2, 11: 1, 12: 2, 13: 4, 14: 2, 15: 2, 16: 2, 17: 1 }, 4: { 0: 2, 1: 2, 2: 2, 3: 1, 4: 2, 5: 1, 6: 2, 7: 2, 8: 2, 9: 2, 10: 4, 11: 4, 12: 0, 13: 2, 14: 4, 15: 2, 16: 2, 17: 2 }, 5: { 0: 1, 1: 4, 2: 1, 3: 1, 4: 4, 5: 2, 6: 2, 7: 2, 8: 4, 9: 1, 10: 4, 11: 4, 12: 2, 13: 2, 14: 2, 15: 2, 16: 2, 17: 2 }, 6: { 0: 2, 1: 1, 2: 4, 3: 2, 4: 1, 5: 4, 6: 2, 7: 2, 8: 2, 9: 4, 10: 2, 11: 1, 12: 2, 13: 2, 14: 2, 15: 2, 16: 2, 17: 2 }, 7: { 0: 0, 1: 0, 2: 2, 3: 1, 4: 2, 5: 2, 6: 1, 7: 4, 8: 2, 9: 2, 10: 2, 11: 2, 12: 2, 13: 2, 14: 2, 15: 2, 16: 4, 17: 2 }, 8: { 0: 1, 1: 4, 2: 1, 3: 0, 4: 4, 5: 1, 6: 1, 7: 2, 8: 1, 9: 4, 10: 2, 11: 1, 12: 2, 13: 1, 14: 1, 15: 1, 16: 2, 17: 1 }, 9: { 0: 2, 1: 2, 2: 2, 3: 2, 4: 4, 5: 4, 6: 1, 7: 2, 8: 1, 9: 1, 10: 4, 11: 1, 12: 2, 13: 2, 14: 1, 15: 2, 16: 2, 17: 1 }, 10: { 0: 2, 1: 2, 2: 2, 3: 2, 4: 2, 5: 2, 6: 2, 7: 2, 8: 1, 9: 1, 10: 1, 11: 4, 12: 4, 13: 2, 14: 1, 15: 2, 16: 2, 17: 2 }, 11: { 0: 2, 1: 2, 2: 4, 3: 4, 4: 1, 5: 2, 6: 4, 7: 2, 8: 2, 9: 4, 10: 1, 11: 1, 12: 1, 13: 2, 14: 4, 15: 2, 16: 2, 17: 2 }, 12: { 0: 2, 1: 2, 2: 1, 3: 2, 4: 4, 5: 2, 6: 2, 7: 2, 8: 1, 9: 2, 10: 2, 11: 2, 12: 1, 13: 2, 14: 2, 15: 2, 16: 2, 17: 2 }, 13: { 0: 2, 1: 1, 2: 2, 3: 2, 4: 2, 5: 2, 6: 4, 7: 4, 8: 2, 9: 2, 10: 2, 11: 2, 12: 2, 13: 1, 14: 2, 15: 2, 16: 4, 17: 2 }, 14: { 0: 2, 1: 4, 2: 2, 3: 2, 4: 2, 5: 4, 6: 2, 7: 2, 8: 4, 9: 4, 10: 2, 11: 2, 12: 2, 13: 2, 14: 1, 15: 2, 16: 2, 17: 2 }, 15: { 0: 2, 1: 2, 2: 2, 3: 2, 4: 2, 5: 2, 6: 2, 7: 2, 8: 2, 9: 1, 10: 1, 11: 1, 12: 1, 13: 2, 14: 4, 15: 4, 16: 2, 17: 4 }, 16: { 0: 2, 1: 4, 2: 2, 3: 2, 4: 2, 5: 2, 6: 4, 7: 1, 8: 2, 9: 2, 10: 2, 11: 2, 12: 2, 13: 0, 14: 2, 15: 2, 16: 1, 17: 4 }, 17: { 0: 2, 1: 1, 2: 2, 3: 4, 4: 2, 5: 2, 6: 1, 7: 2, 8: 4, 9: 2, 10: 2, 11: 2, 12: 2, 13: 2, 14: 2, 15: 0, 16: 1, 17: 2 } } } }; const C = (e, a) => t => { var r; return (e => P(e).map(D).join(" "))(null != (r = T(e, e => e === t)) ? r : a) },
    z = (e, a) => t => { var r; return null != (r = e[(e => A(e.toLowerCase()).toUpperCase())(t)]) ? r : a };

  function F(e, a) { let t = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : void 0; for (let t = e; t <= l; t++)
      if (x(R[t], a)) return B(R[t], a); return t } const H = (e, a) => t => { if ("string" != typeof t) return a; const r = t.replace(/[^A-Za-z0-9]/g, "").toLowerCase(); return F(l, [e, r]) ? r : a },
    O = e => F(e, ["name"], "SM"),
    j = [-1, 0, 1, 3, 4, 2],
    G = [1, 2, 5, 3, 4],
    I = C(g, "Hardy"),
    L = z(g, g.HARDY),
    _ = (e, a) => (Math.trunc(e / 5) === j[a]) - (e % 5 === j[a]),
    N = e => Math.trunc(e / 5) === e % 5 ? [-1, -1] : [G[Math.trunc(e / 5)], G[e % 5]],
    K = e => F(l, ["pokedex", e, "b"], "(No Pokemon)"),
    W = H("pokedex", "nopokemon"),
    U = (e, a) => a >= F(l, ["pokedex", e, "a"]),
    V = e => Object.keys(F(l, ["pokedex"], {})).filter(a => U(a, e)).sort(),
    q = (e, a) => F(a, ["pokedex", e, "c"]),
    Z = (e, a) => F(a, ["pokedex", e, "d"]),
    Y = (e, a) => F(a, ["pokedex", e, "e"], [p.CURSE]),
    $ = (e, a) => { var t; return null != (t = Y(e, a)[0]) ? t : p.CURSE },
    J = (e, a) => { var t; return null != (t = Y(e, a)[1]) ? t : p.CURSE },
    Q = (e, a) => { return F(a, ["pokedex", e, "f"], []).some(e => U(e, a)) },
    X = (e, a) => { const t = F(a, ["pokedex", e, "i"], e),
        r = F(a, ["pokedex", t, "g"]); return Boolean(r && U(r, a)) },
    ee = (e, a) => Boolean(F(a, ["pokedex", e, "h"])),
    ae = (e, a) => F(a, ["pokedex", e, "j"], "noitem"),
    te = e => F(l, ["moves", e, "b"], "(No Move)"),
    re = H("moves", "nomove"),
    ie = (e, a) => F(a, ["moves", e, "c"], 0),
    ne = (e, a) => a >= F(l, ["moves", e, "a"]),
    oe = e => Object.keys(F(l, ["moves"], {})).filter(a => ne(a, e)).sort(),
    se = (e, a) => F(a, ["moves", e, "d"], p.CURSE),
    ce = (e, a) => F(a, ["moves", e, "e"], b.OTHER),
    le = (e, a) => Boolean(F(a, ["moves", e, "f"])),
    ue = (e, a) => F(a, ["moves", e, "g"], 0),
    de = (e, a) => F(a, ["moves", e, "i", "0"], 1),
    be = (e, a) => F(a, ["moves", e, "i", "1"], 1),
    he = (e, a) => Boolean(F(a, ["moves", e, "j"])),
    pe = (e, a) => F(a, ["moves", e, "k"]),
    me = (e, a) => Boolean(F(a, ["moves", e, "l"])),
    ge = (e, a) => F(a, ["moves", e, "m"], 0),
    fe = (e, a) => Boolean(F(a, ["moves", e, "n"])),
    ye = (e, a) => Boolean(F(a, ["moves", e, "A"])),
    ke = (e, a) => Boolean(F(a, ["moves", e, "B"])),
    ve = (e, a) => Boolean(F(a, ["moves", e, "D"])),
    we = (e, a) => Boolean(F(a, ["moves", e, "E"])),
    Se = (e, a) => Boolean(F(a, ["moves", e, "F"])),
    Me = (e, a) => Boolean(F(a, ["moves", e, "G"])),
    Be = (e, a) => Boolean(F(a, ["moves", e, "H"])),
    xe = (e, a) => Boolean(F(a, ["moves", e, "I"])),
    De = e => F(l, ["items", e, "b"], "(No Item)"),
    Pe = H("items", "noitem"),
    Ae = (e, a) => a >= F(l, ["items", e, "a"]),
    Te = (e, a) => Boolean(F(a, ["items", e, "j"])),
    Ee = (e, a) => Boolean(F(a, ["items", e, "g"])),
    Re = (e, a) => F(a, ["items", e, "k"], -1),
    Ce = (e, a) => F(a, ["items", e, "l"], -1),
    ze = (e, a) => F(a, ["items", e, "m"], -1),
    Fe = (e, a) => Boolean(F(a, ["items", e, "n"])),
    He = (e, a) => F(a, ["items", e, "c", "0"], 0),
    Oe = (e, a) => F(a, ["items", e, "c", "1"], -1),
    je = (e, a) => F(a, ["items", e, "d"], 10),
    Ge = (e, a) => F(a, ["items", e, "e"], "nopokemon"),
    Ie = (e, a) => F(a, ["items", e, "i"], p.NORMAL),
    Le = e => Object.keys(F(l, ["items"], {})).filter(a => Ae(a, e)).sort(),
    _e = (e, a) => F(a, ["items", e, "o", "0"]),
    Ne = (e, a) => F(a, ["items", e, "o", "1"]),
    Ke = e => F(l, ["abilities", e, "b"], "(No Ability)"),
    We = H("abilities", "noability"),
    Ue = (e, a) => Boolean(F(a, ["abilities", e, "c"])),
    Ve = (e, a) => a >= F(l, ["abilities", e, "a"]),
    qe = e => Object.keys(F(l, ["abilities"], {})).filter(a => Ve(a, e)).sort(),
    Ze = (e, a) => F(a, ["abilities", e, "d"], -1),
    Ye = (e, a) => F(a, ["abilities", e, "e"], -1),
    $e = (e, a) => Boolean(F(a, ["abilities", e, "f"])),
    Je = (e, a) => F(a, ["abilities", e, "g"], -1),
    Qe = (e, a) => Boolean(F(a, ["abilities", e, "h"])),
    Xe = C(p, "Curse"),
    ea = z(p, p.CURSE),
    aa = e => Object.values(p).filter(a => e < c.GSC && a !== p.STEEL).filter(a => e < c.GSC && a !== p.DARK).filter(a => e < c.ORAS && a !== p.FAIRY).sort((e, a) => e - a),
    ta = e => e >= p.FIRE && e <= p.DARK ? b.SPECIAL : b.PHYSICAL,
    ra = e => ta(e) === b.PHYSICAL,
    ia = e => ta(e) === b.SPECIAL,
    na = e => e === p.WATER || e === p.DRAGON,
    oa = e => e === p.STEEL || e === p.DRAGON,
    sa = e => e === p.GHOST || e === p.DRAGON,
    ca = e => e === p.PSYCHIC || e === p.DRAGON,
    la = e => e === p.GROUND || e === p.ROCK || e === p.STEEL,
    ua = (e, a, t) => { const r = F(t.gen, ["typechart", a, e], 2); return t.inverted ? r < 2 ? 4 : r > 2 ? 1 : 2 : 0 === r && a === p.GHOST && (t.foresight || t.scrappy) ? 2 : r > 2 && a === p.FLYING && t.strongWinds ? 2 : r },
    da = function(e, a) { let t = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : { gen: l }; if (e = E(e), a = E(a), t.grounded && (a = a.filter(e => e !== p.FLYING)), e.includes(t.immunity) && (!t.grounded || t.immunity !== p.GROUND)) return [0, 1]; let r = 1; for (const i of a)
        if (t.freezeDry && i === p.WATER) r *= 2 * 2 ** e.length;
        else
          for (const a of e) r *= ua(a, i, t); if (0 === r) return [0, 1]; const i = Math.log2(r),
        n = e.length * a.length; return [2 ** Math.max(0, i - n), 2 ** Math.max(0, n - i)] };
  class ba { constructor() { var e; let a = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};
      this.gen = Number(null != (e = a.gen) ? e : l), this.id = We(a.id), "string" == typeof a.name && (this.name = a.name), this.disabled = Boolean(a.disabled) } get name() { return Ke(this._effectiveId()) } set name(e) { this.id = We(String(e)) } nonDisabledName() { return Ke(this.id) } pinchType() { return Ye(this._effectiveId(), this.gen) } normalToType() { return Je(this._effectiveId(), this.gen) } immunityType() { return Ze(this._effectiveId(), this.gen) } ignoresAbilities() { return Qe(this._effectiveId(), this.gen) } isIgnorable() { return Ue(this.id, this.gen) } isSandImmunity() { return ["Magic Guard", "Overcoat", "Sand Veil", "Sand Rush", "Sand Force"].includes(this.name) } isHailImmunity() { return ["Magic Guard", "Overcoat", "Ice Body", "Snow Cloak", "Slush Rush"].includes(this.name) } reducesSuperEffective() { return ["Filter", "Solid Rock", "Prism Armor"].includes(this.name) } hasCritArmor() { return $e(this.id, this.gen) } _effectiveId() { return this.disabled ? "noability" : this.id } } const ha = new Set(["Figy Berry", "Wiki Berry", "Mago Berry", "Aguav Berry", "Iapapa Berry"]);
  class pa { constructor() { var e; let a = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};
      this.gen = Number(null != (e = a.gen) ? e : l), this.id = Pe(a.id), "string" == typeof a.name && (this.name = a.name), this.used = Boolean(a.used), this.disabled = Boolean(a.disabled) } get name() { return De(this._effectiveId()) } set name(e) { this.id = Pe(String(e)) } nonDisabledName() { return De(this.used ? "noitem" : this.id) } boostedType() { return Re(this._effectiveId(), this.gen) } isBerry() { return Fe(this.used ? "noitem" : this.id, this.gen) } isPlate() { return Ee(this.used ? "noitem" : this.id, this.gen) } berryTypeResist() { return Ce(this._effectiveId(), this.gen) } naturalGiftPower() { return He(this._effectiveId(), this.gen) } naturalGiftType() { return Oe(this._effectiveId(), this.gen) } flingPower() { return je(this._effectiveId(), this.gen) } gemType() { return ze(this._effectiveId(), this.gen) } isHeavy() { return Te(this.used ? "noitem" : this.id, this.gen) } mega() { return Ge(this.id, this.gen) } memoryType() { return Ie(this.id, this.gen) } berryHeal(e) { const a = this.name; switch (a) {
        case "Sitrus Berry":
          return this.gen >= c.HGSS ? Math.trunc(e / 4) : 30;
        case "Oran Berry":
        case "Berry":
          return 10;
        case "Gold Berry":
          return 30;
        default:
          return ha.has(a) ? Math.trunc(e / (this.gen >= c.SM ? 2 : 8)) : 0 } } berryHealThreshold(e) { return this.gen >= c.SM && ha.has(this.name) ? Math.floor(e / 4) : Math.floor(e / 2) } zMoveTransformsTo() { return _e(this.id, this.gen) } zMoveTransformsFrom() { return Ne(this.id, this.gen) } _effectiveId() { return this.used || this.disabled ? "noitem" : this.id } } const ma = {
      [p.NORMAL]: "Breakneck Blitz", [p.FIGHTING]: "All-Out Pummeling", [p.FLYING]: "Supersonic Skystrike", [p.POISON]: "Acid Downpour", [p.GROUND]: "Tectonic Rage", [p.ROCK]: "Continental Crush", [p.BUG]: "Savage Spin-Out", [p.GHOST]: "Never-Ending Nightmare", [p.STEEL]: "Corkscrew Crash", [p.FIRE]: "Inferno Overdrive", [p.WATER]: "Hydro Vortex", [p.GRASS]: "Bloom Doom", [p.ELECTRIC]: "Gigavolt Havoc", [p.PSYCHIC]: "Shattered Psyche", [p.ICE]: "Subzero Slammer", [p.DRAGON]: "Devastating Drake", [p.DARK]: "Black Hole Eclipse", [p.FAIRY]: "Twinkle Tackle" },
    ga = [u.SPD, u.SATK, u.HP, u.DEF, u.SDEF, u.ATK];

  function fa(e, a) { for (const t of ga)
      if (e[t] !== a[t]) return a[t] - e[t]; return 0 } class ya { constructor() { var e, a, t, r, i, n; let o = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};
      this.gen = Number(null != (e = o.gen) ? e : l), this.id = re(o.id), "string" == typeof o.name && (this.name = o.name), this.user = o.user, this.target = o.target, null == o.numberOfHits ? this.user && "Skill Link" === this.user.ability.name ? this.numberOfHits = be(this.id, this.gen) : "Water Shuriken" === this.name && this.user && "Greninja-Ash" === this.user.name ? this.numberOfHits = 3 : this.numberOfHits = 0 : this.numberOfHits = Number(o.numberOfHits), this.critical = Boolean(o.critical), this.zMove = Boolean(o.zMove), this.beatUpHit = Number(null != (a = o.beatUpHit) ? a : 0), this.secondHit = Boolean(o.secondHit), this.meFirst = Boolean(o.meFirst), this.furyCutter = Number(null != (t = o.furyCutter) ? t : 0), this.echoedVoice = Number(null != (r = o.echoedVoice) ? r : 0), this.trumpPP = Number(null != (i = o.trumpPP) ? i : 5), this.roundBoost = Boolean(o.roundBoost), this.minimize = Boolean(o.minimize), this.dig = Boolean(o.dig), this.dive = Boolean(o.dive), this.fly = Boolean(o.fly), this.present = Number(null != (n = o.present) ? n : -1) } get name() { return this.zMove ? this.user && this.id === this.user.item.zMoveTransformsFrom() ? te(this.user.item.zMoveTransformsTo()) : ma[this.type()] : te(this.id) } set name(e) { this.id = re(String(e)) } power() { return this.zMove ? this.user && this.id === this.user.item.zMoveTransformsFrom() ? ie(this.user.item.zMoveTransformsTo(), this.gen) : pe(this.id, this.gen) : ie(this.id, this.gen) } type() { return se(this.id, this.gen) } damageClass() { return ce(this.id, this.gen) } isPhysical() { return this.damageClass() === b.PHYSICAL } isSpecial() { return this.damageClass() === b.SPECIAL } isOther() { return this.damageClass() === b.OTHER } priority() { return ue(this.id, this.gen) } isPsyshockLike() { return ["Psyshock", "Psystrike", "Secret Sword"].includes(this.name) } hasRecoil() { return Boolean(ge(this.id, this.gen)) } affectedBySheerForce() { return me(this.id, this.gen) } isPunch() { return Me(this.id, this.gen) } isContact() { return ve(this.id, this.gen) } isSound() { return xe(this.id, this.gen) } isPowder() { return we(this.id, this.gen) } isBite() { return ye(this.id, this.gen) } isPulse() { return Se(this.id, this.gen) } isBall() { return ke(this.id, this.gen) } minHits() { return de(this.id, this.gen) } maxHits() { return be(this.id, this.gen) } hitsMultipleTimes() { return this.maxHits() > 1 } hasMultipleTargets() { return he(this.id, this.gen) } isOhko() { return fe(this.id, this.gen) } isExplosion() { return ["Explosion", "Mind Blown", "Self-Destruct"].includes(this.name) } requiresRecharge() { return Be(this.id, this.gen) } isRecklessBoosted() { return this.hasRecoil() || "Jump Kick" === this.name || "High Jump Kick" === this.name } canCrit() { return this.gen >= c.HGSS || !["Reversal", "Flail", "Future Sight", "Doom Desire", "Spit Up"].includes(this.name) } affectedByParentalBond() { return !["Endeavor", "Explosion", "Final Gambit", "Fling", "Self-Destruct"].includes(this.name) } optimalHappiness() { return "Return" === this.name ? 255 : 0 } usesHappiness() { return "Return" === this.name || "Frustration" === this.name } ignoresAbilities() { return le(this.id, this.gen) } ignoresDefenseBoosts() { return ["Chip Away", "Sacred Sword", "Darkest Lariat"].includes(this.name) } boostedByDig() { return "Earthquake" === this.name || "Magnitude" === this.name } boostedByDive() { return "Surf" === this.name || "Whirlpool" === this.name } boostedByFly() { return "Gust" === this.name || "Twister" === this.name } boostedByMinimize() { switch (this.name) {
        case "Stomp":
          return this.gen >= c.GSC;
        case "Astonish":
        case "Extrasensory":
        case "Needle Arm":
          return this.gen === c.ADV;
        case "Steamroller":
          return this.gen >= c.B2W2;
        case "Body Slam":
        case "Dragon Rush":
        case "Flying Press":
        case "Shadow Force":
        case "Phantom Force":
          return this.gen >= c.ORAS;
        case "Heavy Slam":
          return this.gen >= c.SM;
        default:
          return !1 } } weakenedByGrassyTerrain() { return ["Bulldoze", "Earthquake", "Magnitude"].includes(this.name) } usesMaxAttackingStat() { return ["Photon Geyser", "Light That Burns the Sky"].includes(this.name) } isHiddenPower() { return this.name.startsWith("Hidden Power") } static hiddenPowers(e, a) { if (a < c.ADV) { if (e < 1 || e > 16) return []; const a = e - 1; return [
          [(4 & a) << 1 | (1 & a) << 2 | 3, a >> 2 | 12, 3 & a | 12, 15, 15, 15]
        ] } if (a < c.SM) { const a = []; for (let t = 0; t < 64; t++) { const r = [1 & t ? 31 : 30, 2 & t ? 31 : 30, 4 & t ? 31 : 30, 8 & t ? 31 : 30, 16 & t ? 31 : 30, 32 & t ? 31 : 30];
          e === ya.hiddenPowerType(r) && a.push(r) } return a.sort(fa) } return [
        [31, 31, 31, 31, 31, 31]
      ] } static hiddenPowerBp(e, a) { if (a < c.ADV) { const a = e[u.SPC] >> 3 | e[u.SPD] >> 2 & 2 | e[u.DEF] >> 1 & 4 | 8 & e[u.ATK]; return 31 + Math.trunc((5 * a + (3 & e[u.SPC])) / 2) } if (a < c.ORAS) { const a = (2 & e[u.HP]) >> 1 | 2 & e[u.ATK] | (2 & e[u.DEF]) << 1 | (2 & e[u.SPD]) << 2 | (2 & e[u.SATK]) << 3 | (2 & e[u.SDEF]) << 4; return 30 + Math.trunc(40 * a / 63) } return 60 } static hiddenPowerType(e, a) { if (a < c.ADV) return 1 + ((3 & e[u.ATK]) << 2 | 3 & e[u.DEF]); const t = 1 & e[u.HP] | (1 & e[u.ATK]) << 1 | (1 & e[u.DEF]) << 2 | (1 & e[u.SPD]) << 3 | (1 & e[u.SATK]) << 4 | (1 & e[u.SDEF]) << 5; return 1 + Math.trunc(15 * t / 63) } static flail(e, a, t) { if (t === c.HGSS) { const t = Math.trunc(64 * e / a); return t < 2 ? 200 : t < 6 ? 150 : t < 13 ? 100 : t < 22 ? 80 : t < 43 ? 40 : 20 } const r = Math.trunc(48 * e / a); return r <= 1 ? 200 : r <= 4 ? 150 : r <= 9 ? 100 : r <= 16 ? 80 : r <= 32 ? 40 : 20 } static magnitude(e) { return [10, 30, 50, 70, 90, 110, 150][e - 4] } static weatherBall(e) { return e === m.SUN || e === m.HARSH_SUN ? p.FIRE : e === m.RAIN || e === m.HEAVY_RAIN ? p.WATER : e === m.SAND ? p.ROCK : e === m.HAIL ? p.ICE : p.NORMAL } static trumpCard(e) { return [200, 80, 60, 50, 40][i(e, 0, 4)] } static electroBall(e, a) { const t = e / Math.max(1, a); return t >= 4 ? 150 : t >= 3 ? 120 : t >= 2 ? 80 : t >= 1 ? 60 : 40 } static gyroBall(e, a) { return Math.min(150, Math.trunc(25 * a / Math.max(e, 1))) } static grassKnot(e) { return e >= 2e3 ? 120 : e >= 1e3 ? 100 : e >= 500 ? 80 : e >= 250 ? 60 : e >= 100 ? 40 : 20 } static heavySlam(e, a) { const t = Math.trunc(e / a); return t >= 5 ? 120 : 4 === t ? 100 : 3 === t ? 80 : 2 === t ? 60 : 40 } static punishment(e) { let a = 0; for (const t of e.slice(1, 8)) t > 0 && (a += t); return Math.min(120, 60 + 20 * a) } static storedPower(e) { let a = 0; for (const t of e.slice(1, 8)) t > 0 && (a += t); return 20 + 20 * a } static frustration(e) { return Math.max(1, Math.trunc(10 * (255 - e) / 25)) } static
    return (e) { return Math.max(1, Math.trunc(10 * e / 25)) } static eruption(e, a) { return Math.max(1, Math.trunc(150 * e / a)) } } class ka { constructor() { var e, a, t; let r = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};
      this.gen = Number(null != (e = r.gen) ? e : l), this.multiBattle = Boolean(r.multiBattle), this.invertedBattle = Boolean(r.invertedBattle), this.weather = Number(null != (a = r.weather) ? a : m.CLEAR), this.airLock = Boolean(r.airLock), this.waterSport = Boolean(r.waterSport), this.mudSport = Boolean(r.mudSport), this.magicRoom = Boolean(r.magicRoom), this.wonderRoom = Boolean(r.wonderRoom), this.gravity = Boolean(r.gravity), this.terrain = null != (t = r.terrain) ? t : f.NO_TERRAIN, this.fairyAura = Boolean(r.fairyAura), this.darkAura = Boolean(r.darkAura), this.auraBreak = Boolean(r.auraBreak), this.ionDeluge = Boolean(r.ionDeluge) } effectiveWeather() { return this.airLock ? m.CLEAR : this.weather } isClearWeather() { return this.effectiveWeather() === m.CLEAR } rain() { return [m.RAIN, m.HEAVY_RAIN].includes(this.effectiveWeather()) } sun() { return [m.SUN, m.HARSH_SUN].includes(this.effectiveWeather()) } sand() { return this.effectiveWeather() === m.SAND } hail() { return this.effectiveWeather() === m.HAIL } heavyRain() { return this.effectiveWeather() === m.HEAVY_RAIN } harshSun() { return this.effectiveWeather() === m.HARSH_SUN } strongWinds() { return this.effectiveWeather() === m.STRONG_WINDS } grassyTerrain() { return this.terrain === f.GRASSY_TERRAIN } mistyTerrain() { return this.terrain === f.MISTY_TERRAIN } electricTerrain() { return this.terrain === f.ELECTRIC_TERRAIN } psychicTerrain() { return this.terrain === f.PSYCHIC_TERRAIN } }

  function va(e, a) { return function(e) { if (Array.isArray(e)) return e }(e) || function(e, a) { var t = [],
        r = !0,
        i = !1,
        n = void 0; try { for (var o, s = e[Symbol.iterator](); !(r = (o = s.next()).done) && (t.push(o.value), !a || t.length !== a); r = !0); } catch (e) { i = !0, n = e } finally { try { r || null == s.return || s.return() } finally { if (i) throw n } } return t }(e, a) || function() { throw new TypeError("Invalid attempt to destructure non-iterable instance") }() }

  function wa(e) { for (var a = 1; a < arguments.length; a++) { var t = null != arguments[a] ? arguments[a] : {},
        r = Object.keys(t); "function" == typeof Object.getOwnPropertySymbols && (r = r.concat(Object.getOwnPropertySymbols(t).filter(function(e) { return Object.getOwnPropertyDescriptor(t, e).enumerable }))), r.forEach(function(a) { Sa(e, a, t[a]) }) } return e }

  function Sa(e, a, t) { return a in e ? Object.defineProperty(e, a, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[a] = t, e } const Ma = ["HP", "Atk", "Def", "SpA", "SpD", "Spe"],
    Ba = ["", "(M)", "(F)", ""],
    xa = Object.assign(Object.create(null), { HP: u.HP, Atk: u.ATK, Def: u.DEF, SAtk: u.SATK, SpAtk: u.SATK, SpA: u.SATK, SDef: u.SDEF, SpDef: u.SDEF, SpD: u.SDEF, Spd: u.SPD, Spe: u.SPD, Spc: u.SPC });

  function Da(e, a) { if (e.name = te(re(a)), e.isHiddenPower()) { const a = e.type(),
        t = ya.hiddenPowers(a, e.gen)[0];
      t && a !== ya.hiddenPowerType(e.user.ivs, e.gen) && (e.user.ivs = t) } }

  function Pa(e, a) { let t = a.min,
      r = a.max,
      n = a.multipleOf,
      o = void 0 === n ? 1 : n,
      s = a.defaultValue; const c = Array(6).fill(s); for (const a of e.split("/").map(e => e.trim())) { let e = Number.parseInt(a, 10);
      e = Number.isNaN(e) ? s : Math.trunc(i(e, t, r) / o) * o; const n = xa[a.split(" ")[1]];
      void 0 !== n && (c[n] = e) } return c } const Aa = (e, a) => ("(No Move)" === e.name) - ("(No Move)" === a.name),
    Ta = e => (1 & e[u.ATK]) << 3 | (1 & e[u.DEF]) << 2 | (1 & e[u.SPD]) << 1 | 1 & e[u.SPC];

  function Ea(e, a, t, r) { if (r >= c.ADV) return a < 31 ? `${a} ${Ma[e]}` : null; if (e === u.HP) a = Ta(t);
    else if (e === u.SDEF) { if (r < c.GSC) return null;
      a = t[u.SPC] } return a >= 15 ? null : r < c.GSC && e === u.SPC ? `${a} Spc` : `${a} ${Ma[e]}` }

  function Ra(e, a, t, r) { if (r >= c.ADV) return a > 0 ? `${a} ${Ma[e]}` : null; if (e === u.SDEF) { if (r < c.GSC) return null;
      a = t[u.SPC] } return a >= 252 ? null : r < c.GSC && e === u.SPC ? `${a} Spc` : `${a} ${Ma[e]}` } class Ca { constructor() { var e, a, t, r, i, n, o, b, m, f, y, k, v, w, S, M, B, x, D, P, A, T, E, R, C, z; let F = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {}; const H = Number(null != (e = F.gen) ? e : l); for (this.gen = H, this.id = W(F.id), "string" == typeof F.name && (this.name = F.name), this.nickname = String(null != (a = F.nickname) ? a : ""), F.evs ? this.evs = F.evs.slice(0) : this.evs = Array(6).fill(H >= c.ADV ? 0 : 252), F.ivs ? this.ivs = F.ivs.slice(0) : this.ivs = Array(6).fill(H >= c.ADV ? 31 : 15), this.boosts = null != (t = F.boosts) ? t : Array(8).fill(0), this.level = Number(null != (r = F.level) ? r : 100), this.nature = Number(null != (i = F.nature) ? i : g.HARDY), this._status = Number(null != (n = null != (o = F.status) ? o : F._status) ? n : h.NO_STATUS), this.gender = Number(null != (b = F.gender) ? b : d.NO_GENDER), this.ability = new ba(wa({ name: F.ability }, "string" == typeof F.ability ? {} : F.ability, { gen: H })), this.item = new pa(wa({ name: F.item }, "string" == typeof F.item ? {} : F.item, { gen: H })), this.moves = (null != (m = F.moves) ? m : []).map(e => new ya(wa({ name: e }, "string" == typeof e ? {} : e, { user: this, gen: H }))); this.moves.length < 4;) this.moves.push(new ya({ gen: H, user: this }));
      this.moves.length = 4, this.overrideTypes = null != (f = F.overrideTypes) ? f : [-1, -1], this.overrideStats = null != (y = F.overrideStats) ? y : []; const O = this.stat(u.HP);
      this._currentHp = null != (k = null != (v = F.currentHp) ? v : F._currentHp) ? k : O, this._currentHpRange = new s(null != (w = null != (S = F.currentHpRange) ? S : F._currentHpRange) ? w : [O]), this._currentHpRangeBerry = new s(null != (M = null != (B = F.currentHpRangeBerry) ? B : F._currentHpRangeBerry) ? M : []), this.addedType = Number(null != (x = F.addedType) ? x : p.CURSE), this.lightScreen = Boolean(F.lightScreen), this.reflect = Boolean(F.reflect), this.luckyChant = Boolean(F.luckyChant), this.stockpile = Number(null != (D = F.stockpile) ? D : 0), this.flashFire = Boolean(F.flashFire), this.metronome = Number(null != (P = F.metronome) ? P : 0), this.switchedOut = Boolean(F.switchedOut), this.movedFirst = Boolean(F.movedFirst), this.damagedPreviously = Boolean(F.damagedPreviously), this.damagedByPainSplit = Boolean(F.damagedByPainSplit), this.beatUpStats = null != (A = F.beatUpStats) ? A : [0], this.beatUpLevels = null != (T = F.beatUpLevels) ? T : [1], this.plus = Boolean(F.plus), this.minus = Boolean(F.minus), this.electrify = Boolean(F.electrify), this.happiness = Number(null != (E = F.happiness) ? E : 0), this.brokenMultiscale = Boolean(F.brokenMultiscale), this.autotomize = Boolean(F.autotomize), this.unburden = Boolean(F.unburden), this.tailwind = Boolean(F.tailwind), this.slowStart = Boolean(F.slowStart), this.toxicCounter = Number(null != (R = F.toxicCounter) ? R : 0), this.stealthRock = Boolean(F.stealthRock), this.spikes = Number(null != (C = F.spikes) ? C : 0), this.flowerGift = Boolean(F.flowerGift), this.powerTrick = Boolean(F.powerTrick), this.foresight = Boolean(F.foresight), this.friendGuard = Boolean(F.friendGuard), this.battery = Boolean(F.battery), this.charge = Boolean(F.charge), this.helpingHand = Boolean(F.helpingHand), this.auroraVeil = Boolean(F.auroraVeil), this.grounded = Boolean(F.grounded), this.ungrounded = Boolean(F.ungrounded), this.set = null != (z = F.set) ? z : null } static fromImportable(e, a) { const t = new Ca({ gen: a }); let r = 0; const n = e.trim().replace("\r", "").replace(/ {2,}/g, " ").split("\n").map(e => e.trim()),
        o = va(n[0].split("@"), 2),
        s = o[0],
        l = o[1],
        u = /\((.*?)\)/g,
        b = u.exec(s); if (b) { const e = u.exec(s); if (e) t.name = b[1], t.nickname = s.slice(0, b.index).trim(), t.gender = Ba.indexOf(e[0].toUpperCase());
        else { const e = Ba.indexOf(b[0].toUpperCase());
          e > -1 ? (t.name = s.match(/.*?(?=\()/)[0], t.gender = e) : (t.name = b[1], t.nickname = s.slice(0, b.index).trim(), t.gender = d.NO_GENDER) } } else t.name = s.replace("*", "");
      a >= c.GSC && l && (t.item.name = l); for (const e of n.slice(1)) { const n = e.indexOf(":"); if (n < 0) e.startsWith("-") || e.startsWith("~") ? (Da(t.moves[r], e.slice(1)), r++) : "nature" === e.split(" ")[1].toLowerCase() && (t.nature = L(e.split(" ")[0]));
        else { const r = e.slice(0, n).trim().toLowerCase(),
            o = e.slice(n + 1).trim(); switch (r) {
            case "level":
              t.level = i(Number.parseInt(o, 10), 1, 100) || 100; break;
            case "ability":
            case "trait":
              t.ability.name = o; break;
            case "evs":
              t.evs = Pa(o, { min: 0, max: 252, multipleOf: 4, defaultValue: a >= c.ADV ? 0 : 252 }); break;
            case "ivs":
              t.ivs = Pa(o, { min: 0, max: a >= c.ADV ? 31 : 15, defaultValue: a >= c.ADV ? 31 : 15 }) } } } return t.moves.sort(Aa), t.happiness = Math.max(...t.moves.map(e => e.optimalHappiness())), t } toImportable() { let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {}; const a = [],
        t = [];
      t.push(this.name), this.gen >= c.ADV && this.gender && t.push(Ba[this.gender]), this.gen >= c.GSC && t.push("@", this.item.name), a.push(t.join(" ")), this.gen >= c.ADV && a.push(`Ability: ${this.ability.name}`); const r = []; for (let e = 0; e < 6; e++) { const a = Ra(e, this.evs[e], this.evs, this.gen);
        a && r.push(a) } r.length > 0 && a.push(`EVs: ${r.join(" / ")}`); const i = ya.hiddenPowerType(this.ivs, this.gen),
        n = ya.hiddenPowers(i, this.gen)[0]; if (!(this.gen >= c.GSC && this.moves.some(e => "Hidden Power" === e.name)) || this.ivs.slice(1).join() !== n.slice(1).join()) { const e = []; for (let a = 0; a < 6; a++) { const t = Ea(a, this.ivs[a], this.ivs, this.gen);
          t && e.push(t) } e.length > 0 && a.push(`IVs: ${e.join(" / ")}`) } if (this.gen >= c.ADV) { let t = `${I(this.nature)} Nature`; const r = N(this.nature); if (r[0] > -1 && e.natureInfo) { t += ` (+${Ma[r[0]]}, -${Ma[r[1]]})` } a.push(t) } for (const e of this.moves) "Hidden Power" === e.name ? a.push(`- Hidden Power ${Xe(i)}`) : "(No Move)" !== e.name && a.push(`- ${e.name}`); return a.join("\n") } static fromSet(e) { const a = e.set,
        t = e.gen,
        r = new Ca({ gen: t, id: e.id, name: e.name, level: a.l, nature: a.n, ability: a.a ? { id: a.a, gen: t } : void 0, item: a.i ? { id: a.i, gen: t } : void 0, moves: a.m ? a.m.map(e => ({ id: e, gen: t })) : void 0, evs: a.e ? a.e.map(e => 4 * e) : void 0, ivs: a.d ? a.d.slice(0) : void 0 }); return r.happiness = Math.max(...r.moves.map(e => e.optimalHappiness())), r } toSet() { const e = {},
        a = this.gen >= c.ADV ? 0 : 252,
        t = this.gen >= c.ADV ? 31 : 15; return 100 !== this.level && (e.l = this.level), this.gen >= c.ADV && this.nature !== g.HARDY && (e.n = this.nature), this.gen >= c.ADV && "(No Ability)" !== this.ability.name && (e.a = this.ability.id), this.gen >= c.GSC && "(No Item)" !== this.item.name && (e.i = this.item.id), e.m = this.moves.map(e => e.id), this.evs.some(e => e !== a) && (e.e = this.evs.map(e => Math.trunc(e / 4))), this.ivs.some(e => e !== t) && (e.d = this.ivs.slice(0)), e } get name() { return K(this.id) } set name(e) { this.id = W(String(e)) } stat(e) { if (this.powerTrick && 1 <= e && e <= 2 && (e = 3 - e), this.overrideStats[e]) return this.overrideStats[e]; const a = this.baseStat(e),
        t = this.level; let r, i; if (this.gen < c.ADV && e === u.HP ? (i = Ta(this.ivs), r = this.evs[e]) : this.gen < c.ADV && e === u.SDEF ? (i = this.ivs[u.SPC], r = this.evs[u.SPC]) : (i = this.ivs[e], r = this.evs[e]), r = Math.trunc(r / 4), this.gen < c.ADV) return e === u.HP ? Math.min(999, Math.trunc((2 * (i + a) + r) * t / 100) + t + 10) : Math.min(999, Math.trunc((2 * (i + a) + r) * t / 100) + 5); if (e === u.HP) return 1 === a ? 1 : Math.trunc((i + 2 * a + r + 100) * t / 100) + 10; const n = _(this.nature, e),
        o = Math.trunc((i + 2 * a + r) * t / 100) + 5; return Math.trunc(o * (10 + n) / 10) } boost(e) { return this.gen < c.B2W2 && "Simple" === this.ability.name ? i(2 * this.boosts[e], -6, 6) : this.boosts[e] } boostedStat(e) { const a = this.boost(e),
        t = this.stat(e); if (e === u.HP) return t; if (this.gen < c.ADV) { const e = Math.trunc(Math.max(2, 2 + a) / Math.max(2, 2 - a) * 100); return i(Math.trunc(t * e / 100), 1, 999) } return Math.trunc(t * Math.max(2, 2 + a) / Math.max(2, 2 - a)) } speed() { let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};
      e = new ka(e); let a = this.boostedStat(u.SPD); switch ((e.rain() && "Swift Swim" === this.ability.name || e.sun() && "Chlorophyll" === this.ability.name || e.sand() && "Sand Rush" === this.ability.name || e.hail() && "Slush Rush" === this.ability.name || e.electricTerrain() && "Surge Surfer" === this.ability.name) && (a *= 2), this.item.name) {
        case "Choice Scarf":
          a = Math.trunc(3 * a / 2); break;
        case "Quick Powder":
          "Ditto" === this.name && (a *= 2); break;
        default:
          this.item.isHeavy() && (a = Math.trunc(a / 2)) } return this.status && "Quick Feet" === this.ability.name ? a = Math.trunc(3 * a / 2) : this.isParalyzed() && (a = Math.trunc(a / 4)), "Slow Start" === this.ability.name && this.slowStart && (a = Math.trunc(a / 2)), this.unburden && "(No Item)" === this.item.name && "Unburden" === this.ability.name && (a *= 2), this.tailwind && (a *= 2), a } baseStat(e) { return q(this.id, this.gen)[e] } get currentHp() { return this._currentHp } set currentHp(e) { this._currentHp = e, this._currentHpRange = new s([e]), this._currentHpRangeBerry = new s } get currentHpRange() { return this._currentHpRange } set currentHpRange(e) { this._currentHpRange = new s(e); const a = e.union(this.currentHpRangeBerry);
      this._currentHp = s.average(a, 0) } get currentHpRangeBerry() { return this._currentHpRangeBerry } set currentHpRangeBerry(e) { this._currentHpRangeBerry = new s(e); const a = e.union(this.currentHpRange);
      this._currentHp = s.average(a, 0) } type1() { return this.overrideTypes[0] > -1 ? this.overrideTypes[0] : $(this.id, this.gen) } type2() { return this.overrideTypes[1] > -1 ? this.overrideTypes[1] : J(this.id, this.gen) } secondaryType() { return this.type2() === p.CURSE ? this.type1() : this.type2() } types() { return [this.type1(), this.type2(), this.addedType].filter(e => e !== p.CURSE) } stab(e) { return this.types().includes(e) } weight() { let e = Z(this.id, this.gen); return this.autotomize && (e = Math.max(1, e - 1e3)), "Light Metal" === this.ability.name ? e = Math.max(1, e / 2) : "Heavy Metal" === this.ability.name && (e *= 2), "Float Stone" === this.item.name && (e = Math.max(1, e / 2)), y(e) } hasEvolution() { return Q(this.id, this.gen) } hasPreEvolution() { return X(this.id, this.gen) } isMega() { return ee(this.id, this.gen) } isItemRequired() { return ae(this.id, this.gen) === this.item.id } hurtBySandstorm() { return !(this.ability.isSandImmunity() || "Safety Goggles" === this.item.name || this.stab(p.GROUND) || this.stab(p.ROCK) || this.stab(p.STEEL)) } hurtByHail() { return !this.ability.isHailImmunity() && "Safety Goggles" !== this.item.name && !this.stab(p.ICE) } multiscaleIsActive() { return !this.brokenMultiscale && this.currentHp === this.stat(u.HP) && ("Multiscale" === this.ability.name || "Shadow Shield" === this.ability.name) } get status() { return this.gen >= c.SM && "Comatose" === this.ability.name ? h.ASLEEP : this._status } set status(e) { this._status = e } isHealthy() { return this.status === h.NO_STATUS } isPoisoned() { return this.status === h.POISONED } isBadlyPoisoned() { return this.status === h.BADLY_POISONED } isBurned() { return this.status === h.BURNED } isParalyzed() { return this.status === h.PARALYZED } isAsleep() { return this.status === h.ASLEEP } isFrozen() { return this.status === h.FROZEN } isMale() { return this.gender === d.MALE } isFemale() { return this.gender === d.FEMALE } hasPlate() { return this.item.isPlate() } hasDrive() { return this.item.nonDisabledName().endsWith(" Drive") } hasMemory() { return this.item.nonDisabledName().endsWith(" Memory") } hasBlueOrb() { return "Blue Orb" === this.item.nonDisabledName() } hasRedOrb() { return "Red Orb" === this.item.nonDisabledName() } hasGriseousOrb() { return "Griseous Orb" === this.item.nonDisabledName() } knockOff() { return "(No Item)" !== this.item.nonDisabledName() && "Sticky Hold" !== this.ability.name && !this.itemLocked() } knockOffBoost() { return "(No Item)" !== this.item.nonDisabledName() && !this.itemLocked() } itemLocked() { return this.gen < c.B2W2 ? "Multitype" === this.ability.name || this.hasGriseousOrb() && this.name.includes("Giratina") : this.item.mega() === this.id || this.hasPlate() && "Multitype" === this.ability.name || this.hasBlueOrb() && this.name.includes("Kyogre") || this.hasRedOrb() && this.name.includes("Groudon") || this.hasMemory() && this.name.includes("Silvally") || this.hasDrive() && this.name.includes("Genesect") || this.hasGriseousOrb() && this.name.includes("Giratina") } thickClubBoosted() { return "Thick Club" === this.item.name && (this.name.includes("Cubone") || this.name.includes("Marowak")) } lightBallBoosted() { return "Light Ball" === this.item.name && this.name.includes("Pikachu") } hasCritArmor() { return this.ability.hasCritArmor() || this.luckyChant } pinchAbilityActivated(e) { return this.ability.pinchType() === e && this.stat(u.HP) >= 3 * this.currentHp } isGrounded(e) { return this.grounded || e.gravity || "Iron Ball" === this.item.name || !this.ungrounded && this.ability.immunityType() !== p.GROUND && !this.types().includes(p.FLYING) && "Air Balloon" !== this.item.name } static calcHealthDv(e) { return Ta(e) } } class za extends RangeError { constructor() { super("Pokemon cannot be (No Pokemon)"), this.name = "NoPokemonError" } } class Fa extends RangeError { constructor() { super("Move cannot be (No Move)"), this.name = "NoMoveError" } } var Ha = t(98),
    Oa = (e, a, t, r) => { const i = r.gen,
        n = function(e, a, t, r) { const i = r.gen; if (r.psychicTerrain() && t.priority() > 0 && a.isGrounded(r)) return { fail: !0 }; const n = { type: t.type(), power: t.power() }; switch (t.name) {
            case "Assurance":
              e.damagedPreviously && (n.power *= 2); break;
            case "Avalanche":
            case "Revenge":
              e.damagedPreviously && !e.damagedByPainSplit && (n.power *= 2); break;
            case "Beat Up":
              if (i <= c.HGSS) n.type = p.CURSE;
              else { const a = e.beatUpStats[t.beatUpHit];
                n.power = Math.trunc(a / 10) + 5 } break;
            case "Brine":
              2 * a.currentHp <= a.stat(u.HP) && (n.power *= 2); break;
            case "Echoed Voice":
              n.power = Math.min(200, 40 + 40 * t.echoedVoice); break;
            case "Electro Ball":
              n.power = ya.electroBall(e.speed(), a.speed()); break;
            case "Facade":
              e.status !== h.NO_STATUS && (n.power *= 2); break;
            case "Fire Pledge":
            case "Water Pledge":
            case "Grass Pledge":
              t.pledgeBoost && (n.power *= 2); break;
            case "Flail":
            case "Reversal":
              n.power = ya.flail(e.currentHp, e.stat(u.HP), i); break;
            case "Fling":
              n.power = e.item.flingPower(); break;
            case "Frustration":
              n.power = ya.frustration(e.happiness); break;
            case "Fury Cutter":
              n.power = Math.min(160, n.power * 2 ** t.furyCutter); break;
            case "Future Sight":
            case "Doom Desire":
              i <= c.HGSS && (n.type = p.CURSE); break;
            case "Gyro Ball":
              n.power = ya.gyroBall(e.speed(), a.speed()); break;
            case "Hex":
              a.status && (n.power *= 2); break;
            case "Heavy Slam":
            case "Heat Crash":
              n.power = ya.heavySlam(e.weight(), a.weight()); break;
            case "Judgment":
              e.item.isPlate() && (n.type = e.item.boostedType()); break;
            case "Low Kick":
            case "Grass Knot":
              n.power = ya.grassKnot(a.weight()); break;
            case "Magnitude":
              n.power = ya.magnitude(t.magnitude); break;
            case "Natural Gift":
              if (e.item.disabled || !e.item.isBerry()) return { fail: !0 };
              n.type = e.item.naturalGiftType(), n.power = e.item.naturalGiftPower(); break;
            case "Present":
              n.power = 40 * t.present; break;
            case "Payback":
              a.movedFirst && (n.power *= 2); break;
            case "Punishment":
              n.power = ya.punishment(a.boosts); break;
            case "Pursuit":
              i >= c.ADV && a.switchedOut && (n.power *= 2); break;
            case "Return":
              n.power = ya.return(e.happiness); break;
            case "Rollout":
            case "Ice Ball":
              n.power *= 2 ** ((t.rollout - 1) % 5 + t.defenseCurl); break;
            case "Round":
              t.roundBoost && (n.power *= 2); break;
            case "Smelling Salts":
              a.isParalyzed() && (n.power *= 2); break;
            case "Spit Up":
              if (0 === e.stockpile) return { fail: !0 };
              n.power *= e.stockpile; break;
            case "Stored Power":
            case "Power Trip":
              n.power = ya.storedPower(e.boosts); break;
            case "Triple Kick":
              n.power *= t.tripleKickCount; break;
            case "Trump Card":
              n.power = ya.trumpCard(t.trumpPP); break;
            case "Wake-Up Slap":
              a.isAsleep() && (n.power *= 2); break;
            case "Water Shuriken":
              "Greninja-Ash" === e.name && (n.power = 20); break;
            case "Water Spout":
            case "Eruption":
              n.power = ya.eruption(e.currentHp, e.stat(u.HP)); break;
            case "Weather Ball":
              n.type = ya.weatherBall(r.effectiveWeather()), i >= c.HGSS && n.type !== p.NORMAL && (n.power *= 2); break;
            case "Wring Out":
            case "Crush Grip":
              { const e = 120 * a.currentHp / a.stat(u.HP);i <= c.HGSS ? n.power = 1 + Math.trunc(e) : n.power = Math.max(1, y(e)); break }
            default:
              t.isHiddenPower() && (n.type === p.NORMAL && (n.type = ya.hiddenPowerType(e.ivs, i)), n.power = ya.hiddenPowerBp(e.ivs, i)), i >= c.B2W2 && (t.fly && t.boostedByFly() ? n.power *= 2 : "Liquid Voice" === e.ability.name && t.isSound() ? n.type = p.WATER : "Multi-Attack" === t.name && (n.type = e.item.memoryType())) } "Normalize" === e.ability.name && (n.type = p.NORMAL); return n }(e, a, t, r),
        o = n.type,
        s = n.power; if (n.fail || 0 === s) return { fail: !0 }; let l = o,
        d = s;
      (r.ionDeluge && l === p.NORMAL || e.electrify) && (l = p.ELECTRIC), l === p.NORMAL && e.ability.normalToType() > -1 && (l = e.ability.normalToType()); const b = [l]; "Flying Press" === t.name && b.push(p.FLYING); const m = da(b, a.types(), { gen: i, foresight: a.foresight, grounded: a.isGrounded(r) || "Thousand Arrows" === t.name, immunity: a.ability.immunityType(), scrappy: "Scrappy" === e.ability.name, freezeDry: "Freeze-Dry" === t.name, inverted: r.invertedBattle, strongWinds: r.strongWinds() }),
        g = m[0] > m[1],
        f = m[0] < m[1]; if (c.GSC <= i && i <= c.ADV)(t.dig && t.boostedByDig() || t.dive && t.boostedByDive() || t.fly && t.boostedByFly()) && (d *= 2), r.mudSport && l === p.ELECTRIC && (d = Math.trunc(d / 2)), r.waterSport && l === p.FIRE && (d = Math.trunc(d / 2)), e.pinchAbilityActivated(l) && (d = Math.trunc(3 * d / 2));
      else if (i === c.HGSS) { switch ((t.dig && t.boostedByDig() || t.dive && t.boostedByDive() || t.fly && t.boostedByFly() || t.minimize && t.boostedByMinimize()) && (d *= 2), e.helpingHand && (d = Math.trunc(3 * d / 2)), e.item.name) {
          case "Muscle Band":
            t.isPhysical() && (d = Math.trunc(11 * d / 10)); break;
          case "Wise Glasses":
            t.isSpecial() && (d = Math.trunc(11 * d / 10)); break;
          case "Adamant Orb":
            "Dialga" === e.name && oa(l) && (d = Math.trunc(12 * d / 10)); break;
          case "Lustrous Orb":
            "Palkia" === e.name && na(l) && (d = Math.trunc(12 * d / 10)); break;
          case "Griseous Orb":
            e.name.startsWith("Giratina") && sa(l) && (d = Math.trunc(12 * d / 10)); break;
          default:
            l === e.item.boostedType() && (d = Math.trunc(12 * d / 10)) } switch (e.charge && l === p.ELECTRIC && (d *= 2), e.ability.name) {
          case "Rivalry":
            e.gender && a.gender && (d *= e.gender === a.gender ? 3 : 5, d = Math.trunc(d / 4)); break;
          case "Reckless":
            t.isRecklessBoosted() && (d = Math.trunc(12 * d / 10)); break;
          case "Iron Fist":
            t.isPunch() && (d = Math.trunc(12 * d / 10)); break;
          case "Technician":
            d <= 60 && (d = Math.trunc(3 * d / 2)) } switch (a.ability.name) {
          case "Heatproof":
            l === p.FIRE && (d = Math.trunc(d / 2)); break;
          case "Thick Fat":
            l !== p.FIRE && l !== p.ICE || (d = Math.trunc(d / 2)); break;
          case "Dry Skin":
            l === p.FIRE && (d = Math.trunc(5 * d / 4)) }(r.mudSport && l === p.ELECTRIC || r.waterSport && l === p.FIRE) && (d = Math.trunc(d / 2)) } else if (i >= c.B2W2) { const n = l === e.item.gemType();
        e.item.used = e.item.used || n, "Acrobatics" === t.name && "(No Item)" === e.item.name && (d *= 2); let s = 4096; switch (e.ability.name) {
          case "Technician":
            d <= 60 && (s = k(6144, s)); break;
          case "Flare Boost":
            e.isBurned() && t.isSpecial() && (s = k(6144, s)); break;
          case "Analytic":
            a.movedFirst && (s = k(5325, s)); break;
          case "Reckless":
            t.isRecklessBoosted() && (s = k(4915, s)); break;
          case "Iron Fist":
            t.isPunch() && (s = k(4915, s)); break;
          case "Toxic Boost":
            (e.isPoisoned() || e.isBadlyPoisoned()) && t.isPhysical() && (s = k(6144, s)); break;
          case "Rivalry":
            e.gender && a.gender && (s = k(e.gender === a.gender ? 3072 : 5120, s)); break;
          case "Sand Force":
            r.sand() && la(l) && (s = k(5325, s)); break;
          case "Tough Claws":
            t.isContact() && (s = k(5461, s)); break;
          case "Strong Jaw":
            t.isBite() && (s = k(6144, s)); break;
          case "Mega Launcher":
            t.isPulse() && (s = k(6144, s)); break;
          case "Parental Bond":
            if (t.secondHit) { const e = i <= c.ORAS ? 2048 : 1024;
              s = k(e, s) } break;
          case "Steelworker":
            l === p.STEEL && (s = k(6144, s)); break;
          case "Water Bubble":
            l === p.WATER && (s = k(6144, s)); break;
          case "Neuroforce":
            g && (s = k(4915, s)); break;
          default:
            o === p.NORMAL && e.ability.normalToType() > -1 && (s = k(5325, s)) } if (l === p.FIRE) switch (a.ability.name) {
          case "Heatproof":
          case "Water Bubble":
            s = k(2048, s); break;
          case "Dry Skin":
            s = k(5120, s) }
        switch ("Sheer Force" === e.ability.name && t.affectedBySheerForce() && (s = k(5325, s)), e.item.name) {
          case "Muscle Band":
            t.isPhysical() && (s = k(4505, s)); break;
          case "Wise Glasses":
            t.isSpecial() && (s = k(4505, s)); break;
          case "Adamant Orb":
            "Dialga" === e.name && oa(l) && (s = k(4915, s)); break;
          case "Lustrous Orb":
            "Palkia" === e.name && na(l) && (s = k(4915, s)); break;
          case "Griseous Orb":
            e.name.startsWith("Giratina") && sa(l) && (s = k(4915, s)); break;
          case "Soul Dew":
            i >= c.SM && ca(l) && ("Latias" === e.name || "Latios" === e.name) && (s = k(4915, s)); break;
          default:
            if (n) { const e = i === c.B2W2 ? 6144 : 5325;
              s = k(e, s) } else l === e.item.boostedType() && (s = k(4915, s)) } switch (t.name) {
          case "Facade":
            e.status && (s = k(8192, s)); break;
          case "Brine":
            2 * a.currentHp <= a.stat(u.HP) && (s = k(8192, s)); break;
          case "Venoshock":
            (e.isPoisoned() || e.isBadlyPoisoned()) && (s = k(8192, s)); break;
          case "Retaliate":
            t.previouslyFainted && (s = k(8192, s)); break;
          case "Fusion Bolt":
            t.fusionFlare && (s = k(8192, s)); break;
          case "Fusion Flare":
            t.fusionBolt && (s = k(8192, s)); break;
          case "Knock Off":
            i >= c.ORAS && a.knockOffBoost() && (s = k(6144, s)) } if (t.meFirst && (s = k(6144, s)), "Solar Beam" !== t.name || r.sun() || r.isClearWeather() || (s = k(2048, s)), e.charge && l === p.ELECTRIC && (s = k(8192, s)), e.helpingHand && (s = k(6144, s)), (r.waterSport && l === p.FIRE || r.mudSport && l === p.ELECTRIC) && (s = k(1352, s)), r.fairyAura && l === p.FAIRY || r.darkAura && l === p.DARK) { const e = r.auraBreak ? 3072 : 5447;
          s = k(e, s) } d = Math.max(1, v(s, d)) } return { moveType: l, movePower: d, effectiveness: m, superEffective: g, notVeryEffective: f } }; var ja = (e, a, t, r) => { const i = Oa(e, a, t, r),
      n = i.moveType,
      o = i.movePower,
      s = i.effectiveness; if (i.fail || 0 === s[0]) return [0]; let c, l, d, b, h, p, m;
    t.critical ? (c = 2 * e.level, l = e.stat(u.ATK), d = a.stat(u.DEF), b = e.stat(u.SPC), h = a.stat(u.SPC)) : (c = e.level, l = e.boostedStat(u.ATK), d = a.boostedStat(u.DEF), b = e.boostedStat(u.SPC), h = a.boostedStat(u.SPC), e.isBurned() && (l = Math.trunc(l / 2)), a.reflect && (d *= 2), a.lightScreen && (h *= 2)), S(l, d) && (l = Math.max(1, M(l)), d = M(d)), S(b, h) && (b = Math.max(1, M(b)), h = M(h)), t.isExplosion() && (d = Math.trunc(d / 2)), ra(n) ? (p = l, m = d) : (p = b, m = h), m = Math.max(1, m); let g = Math.trunc(Math.trunc(Math.trunc(2 * c / 5 + 2) * o * p / m) / 50); return g = Math.min(997, g) + 2, e.stab(n) && (g = Math.trunc(3 * g / 2)), w(g = Math.trunc(g * s[0] / s[1]), 217, 255) }; const Ga = {
    [p.NORMAL]: 0, [p.FIGHTING]: 1, [p.FLYING]: 2, [p.POISON]: 3, [p.GROUND]: 4, [p.ROCK]: 5, [p.BUG]: 7, [p.GHOST]: 8, [p.STEEL]: 9, [p.FIRE]: 20, [p.WATER]: 21, [p.GRASS]: 22, [p.ELECTRIC]: 23, [p.PSYCHIC]: 24, [p.ICE]: 25, [p.DRAGON]: 26, [p.DARK]: 27 }; var Ia = (e, a, t, r) => { const i = Oa(e, a, t, r),
        n = i.moveType,
        o = i.movePower,
        s = i.effectiveness; if (i.fail || 0 === s[0]) return [0]; let c = e.level; const l = e.boost(u.ATK),
        d = a.boost(u.DEF),
        b = e.boost(u.SATK),
        h = a.boost(u.SDEF); let m, g, f, y, k, v; if (t.critical && l <= d ? (m = e.stat(u.ATK), g = a.stat(u.DEF)) : (m = e.boostedStat(u.ATK), g = a.boostedStat(u.DEF), e.isBurned() && (m = Math.trunc(m / 2)), a.reflect && (g *= 2)), t.critical && b <= h ? (f = e.stat(u.SATK), y = a.stat(u.SDEF)) : (f = e.boostedStat(u.SATK), y = a.boostedStat(u.SDEF), a.lightScreen && (y *= 2)), e.thickClubBoosted() && (m *= 2), e.lightBallBoosted() && (f *= 2), ra(n)) k = m, v = g;
      else { if (!ia(n)) return [0];
        k = f, v = y } if (S(k, v) && (k = M(k), v = Math.max(1, M(v))), "Ditto" === e.name && "Metal Powder" === e.item.name && (v = Math.trunc(3 * v / 2), S(v) && (k = M(k, 1), v = Math.max(1, M(v, 1)))), t.isExplosion() && (v = Math.max(1, Math.trunc(v / 2))), "Beat Up" === t.name) k = e.beatUpStats[t.beatUpHit], v = a.baseStat(u.DEF), c = e.beatUpLevels[t.beatUpHit];
      else if ("Present" === t.name) { var B, x;
        k = Math.floor(10 * s[0] / s[1]), v = null != (B = Ga[e.secondaryType()]) ? B : 0, c = null != (x = Ga[a.secondaryType()]) ? x : 0 } v = Math.max(1, v); let D = Math.trunc(Math.trunc(Math.trunc(2 * c / 5 + 2) * o * k / v) / 50); if (t.critical && (D *= 2), e.item.boostedType() === n && (D = Math.trunc(110 * D / 100)), D = Math.min(997, D) + 2, r.sun() ? n === p.FIRE ? D = Math.trunc(3 * D / 2) : n === p.WATER && (D = Math.trunc(D / 2)) : r.rain() && (n === p.WATER ? D = Math.trunc(3 * D / 2) : n !== p.FIRE && "Solar Beam" !== t.name || (D = Math.trunc(D / 2))), e.stab(n) && (D = Math.trunc(3 * D / 2)), D = Math.trunc(D * s[0] / s[1]), "Reversal" === t.name || "Flail" === t.name) return [D]; let P = w(D, 217, 255); return "Pursuit" === t.name && a.switchedOut && (P = P.map(e => 2 * e)), P },
    La = (e, a, t, r) => { const i = Oa(e, a, t, r),
        n = i.moveType,
        o = i.movePower,
        s = i.effectiveness; if (i.fail || 0 === s[0]) return [0]; let c, l, d, b = e.stat(u.ATK),
        h = e.stat(u.SATK),
        m = a.stat(u.DEF),
        g = a.stat(u.SDEF); switch ("Huge Power" !== e.ability.name && "Pure Power" !== e.ability.name || (b *= 2), e.item.name) {
        case "Choice Band":
          b = Math.trunc(3 * b / 2); break;
        case "Soul Dew":
          "Latias" !== e.name && "Latios" !== e.name || (h = Math.trunc(3 * h / 2)); break;
        case "Deep Sea Tooth":
          "Clamperl" === e.name && (h *= 2); break;
        case "Sea Incense":
          h = Math.trunc(105 * h / 100); break;
        default:
          e.item.boostedType() === n ? ra(n) ? b = Math.trunc(110 * b / 100) : h = Math.trunc(110 * h / 100) : e.thickClubBoosted() ? b *= 2 : e.lightBallBoosted() && (h *= 2) } switch (a.item.name) {
        case "Soul Dew":
          "Latias" !== a.name && "Latios" !== a.name || (g = Math.trunc(3 * g / 2)); break;
        case "Deep Sea Scale":
          "Clamperl" === a.name && (g *= 2); break;
        case "Metal Powder":
          "Ditto" === a.name && (m *= 2) } switch (e.ability.name) {
        case "Hustle":
          b = Math.trunc(3 * b / 2); break;
        case "Plus":
          e.minus && (h = Math.trunc(3 * h / 2)); break;
        case "Minus":
          e.plus && (h = Math.trunc(3 * h / 2)); break;
        case "Guts":
          e.status && (b = Math.trunc(3 * b / 2)) } switch (a.ability.name) {
        case "Thick Fat":
          n !== p.FIRE && n !== p.ICE || (h = Math.trunc(h / 2)); break;
        case "Marvel Scale":
          a.status && (m = Math.trunc(3 * m / 2)) } if (t.isExplosion() && (m = Math.max(1, Math.trunc(m / 2))), t.critical ? (b = Math.trunc(b * Math.max(2, 2 + e.boosts[u.ATK]) / 2), h = Math.trunc(h * Math.max(2, 2 + e.boosts[u.SATK]) / 2), m = Math.trunc(2 * m / Math.max(2, 2 - a.boosts[u.DEF])), g = Math.trunc(2 * g / Math.max(2, 2 - a.boosts[u.SDEF]))) : (b = Math.trunc(b * Math.max(2, 2 + e.boosts[u.ATK]) / Math.max(2, 2 - e.boosts[u.ATK])), h = Math.trunc(h * Math.max(2, 2 + e.boosts[u.SATK]) / Math.max(2, 2 - e.boosts[u.SATK])), m = Math.trunc(m * Math.max(2, 2 + a.boosts[u.DEF]) / Math.max(2, 2 - a.boosts[u.DEF])), g = Math.trunc(g * Math.max(2, 2 + a.boosts[u.SDEF]) / Math.max(2, 2 - a.boosts[u.SDEF]))), "Beat Up" === t.name) c = e.beatUpStats[t.beatUpHit], l = a.baseStat(u.DEF), d = e.beatUpLevels[t.beatUpHit];
      else if (ra(n)) c = b, l = m, d = e.level;
      else { if (!ia(n)) return [0];
        c = h, l = g, d = e.level } let f = Math.trunc(Math.trunc(Math.trunc(2 * d / 5 + 2) * o * c / l) / 50); switch ("Beat Up" !== t.name && (e.isBurned() && "Guts" !== e.ability.name && (f = Math.trunc(f / 2)), !t.critical && (a.reflect && ra(n) || a.lightScreen && ia(n)) && (f = Math.trunc(r.multiBattle ? 2 * f / 3 : f / 2))), r.multiBattle && t.hasMultipleTargets() && (f = Math.trunc(f / 2)), "Weather Ball" !== t.name && (r.sun() ? n === p.FIRE ? f = Math.trunc(3 * f / 2) : n === p.WATER && (f = Math.trunc(f / 2)) : r.rain() && (n === p.WATER ? f = Math.trunc(3 * f / 2) : n === p.FIRE && (f = Math.trunc(f / 2))), r.sun() || r.isClearWeather() || "Solar Beam" !== t.name || (f = Math.trunc(f / 2))), e.flashFire && n === p.FIRE && "Flash Fire" === e.ability.name && (f = Math.trunc(3 * f / 2)), ra(n) && (f = Math.max(1, f)), f += 2, t.critical && (f *= 2), t.name) {
        case "Facade":
          e.status && (f *= 2); break;
        case "Pursuit":
          a.switchedOut && (f *= 2); break;
        case "Revenge":
          e.damagedPreviously && (f *= 2); break;
        case "Smelling Salts":
          a.isParalyzed() && (f *= 2); break;
        case "Weather Ball":
          r.isClearWeather() || (f *= 2) } if (t.minimize && t.boostedByMinimize() && (f *= 2), e.charge && n === p.ELECTRIC && (f *= 2), e.helpingHand && (f = Math.trunc(3 * f / 2)), e.stab(n) && (f = Math.trunc(3 * f / 2)), f = Math.trunc(f * s[0] / s[1]), "Spit Up" === t.name) return [f]; return w(f, 85, 100) },
    _a = (e, a, t, r) => { const i = Oa(e, a, t, r),
        n = i.moveType,
        o = i.movePower,
        s = i.effectiveness,
        c = i.superEffective,
        l = i.notVeryEffective; if (i.fail || 0 === s[0]) return [0]; let d, b, h, m; const g = "Unaware" === e.ability.name,
        f = "Unaware" === a.ability.name; switch (t.critical ? (g ? (b = a.stat(u.DEF), h = a.stat(u.SDEF)) : (b = Math.min(a.stat(u.DEF), a.boostedStat(u.DEF)), h = Math.min(a.stat(u.SDEF), a.boostedStat(u.SDEF))), f ? (d = e.stat(u.ATK), m = e.stat(u.SATK)) : (d = Math.max(e.stat(u.ATK), e.boostedStat(u.ATK)), m = Math.max(e.stat(u.SATK), e.boostedStat(u.SATK)))) : (g ? (b = a.stat(u.DEF), h = a.stat(u.SDEF)) : (b = a.boostedStat(u.DEF), h = a.boostedStat(u.SDEF)), f ? (d = e.stat(u.ATK), m = e.stat(u.SATK)) : (d = e.boostedStat(u.ATK), m = e.boostedStat(u.SATK))), "Huge Power" !== e.ability.name && "Pure Power" !== e.ability.name || (d *= 2), e.flowerGift && r.sun() && (d *= 2), e.ability.name) {
        case "Guts":
          e.status && (d = Math.trunc(3 * d / 2)); break;
        case "Hustle":
          d = Math.trunc(3 * d / 2); break;
        case "Slow Start":
          r.slowStart && (d = Math.trunc(d / 2)); break;
        case "Plus":
          e.minus && (m = Math.trunc(3 * m / 2)); break;
        case "Minus":
          e.plus && (m = Math.trunc(3 * m / 2)); break;
        case "Solar Power":
          r.sun() && (m *= 2) } switch (e.item.name) {
        case "Choice Band":
          d = Math.trunc(3 * d / 2); break;
        case "Choice Specs":
          m = Math.trunc(3 * m / 2); break;
        case "Soul Dew":
          "Latias" !== e.name && "Latios" !== e.name || (m = Math.trunc(3 * m / 2)); break;
        case "Deep Sea Tooth":
          "Clamperl" === e.name && (m *= 2); break;
        default:
          e.thickClubBoosted() ? d *= 2 : e.lightBallBoosted() && (d *= 2, m *= 2) } switch (t.isExplosion() && (b = Math.trunc(b / 2)), "Marvel Scale" === a.ability.name && a.status && (b = Math.trunc(3 * b / 2)), a.flowerGift && r.sun() && (h = Math.trunc(3 * h / 2)), a.item.name) {
        case "Metal Powder":
          "Ditto" === a.name && (b *= 2); break;
        case "Soul Dew":
          "Latias" !== a.name && "Latios" !== a.name || (h = Math.trunc(3 * h / 2)); break;
        case "Deep Sea Scale":
          "Clamperl" === a.name && (h *= 2) } let y, k, v; if (r.sand() && a.stab(p.ROCK) && (h = Math.trunc(3 * h / 2)), "Beat Up" === t.name) y = e.beatUpStats[t.beatUpHit], k = a.baseStat(u.DEF), v = e.beatUpLevels[t.beatUpHit];
      else if (t.isPhysical()) y = d, k = b, v = e.level;
      else { if (!t.isSpecial()) return [0];
        y = m, k = h, v = e.level } let S = Math.trunc(Math.trunc(Math.trunc(2 * v / 5 + 2) * o * y / k) / 50); if ("Beat Up" !== t.name && (e.isBurned() && t.isPhysical() && "Guts" !== e.ability.name && (S = Math.trunc(S / 2)), !t.critical && (a.reflect && t.isPhysical() || a.lightScreen && t.isSpecial()) && (S = r.multiBattle ? Math.trunc(2 * S / 3) : Math.trunc(S / 2))), r.multiBattle && t.hasMultipleTargets() && (S = Math.trunc(3 * S / 4)), "Weather Ball" !== t.name && (r.sun() ? n === p.FIRE ? S = Math.trunc(3 * S / 2) : n === p.WATER && (S = Math.trunc(S / 2)) : r.rain() && (n === p.WATER ? S = Math.trunc(3 * S / 2) : n === p.FIRE && (S = Math.trunc(S / 2))), r.sun() || r.isClearWeather() || "Solar Beam" !== t.name || (S = Math.trunc(S / 2))), e.flashFire && n === p.FIRE && "Flash Fire" === e.ability.name && (S = Math.trunc(3 * S / 2)), S += 2, t.critical && (S *= "Sniper" === e.ability.name ? 3 : 2), "Beat Up" !== t.name) { if ("Life Orb" === e.item.name) S = Math.trunc(13 * S / 10);
        else if ("Metronome" === e.item.name) { const a = Math.min(20, 10 + e.metronome);
          S = Math.trunc(S * a / 10) } t.meFirst && (S = Math.trunc(3 * S / 2)) } let M = w(S, 85, 100); return e.stab(n) && (M = M.map(e => Math.trunc(3 * e / 2))), M = M.map(e => Math.trunc(e * s[0] / s[1])), c ? (a.ability.reducesSuperEffective() && (M = M.map(e => Math.trunc(3 * e / 4))), "Expert Belt" === e.item.name && (M = M.map(e => Math.trunc(12 * e / 10))), n === a.item.berryTypeResist() && (M = M.map(e => Math.trunc(e / 2)))) : l && "Tinted Lens" === e.ability.name && (M = M.map(e => 2 * e)), a.item.berryTypeResist() === p.NORMAL && n === p.NORMAL && (M = M.map(e => Math.trunc(e / 2))), M },
    Na = (e, a, t, r) => { const i = Oa(e, a, t, r),
        n = i.moveType,
        o = i.movePower,
        s = i.effectiveness,
        c = i.superEffective,
        l = i.notVeryEffective; if (i.fail || 0 === s[0]) return [0]; const d = r.wonderRoom ? u.SDEF : u.DEF,
        b = r.wonderRoom ? u.DEF : u.SDEF,
        h = "Unaware" === e.ability.name,
        m = "Unaware" === a.ability.name; let g, f, y, S; "Foul Play" === t.name ? (h ? (f = a.stat(d), S = a.stat(b), g = a.stat(u.ATK)) : t.critical ? (f = Math.min(a.stat(d), a.boostedStat(d)), S = Math.min(a.stat(b), a.boostedStat(b)), g = Math.max(a.stat(u.ATK), a.boostedStat(u.ATK))) : (f = a.boostedStat(d), S = a.boostedStat(b), g = a.boostedStat(u.ATK)), y = m ? e.stat(u.SATK) : t.critical ? Math.max(e.stat(u.SATK), e.boostedStat(u.SATK)) : e.boostedStat(u.SATK)) : t.ignoresDefenseBoosts() ? (f = a.stat(d), S = a.stat(b), m ? (g = e.stat(u.ATK), y = e.stat(u.SATK)) : t.critical ? (g = Math.max(e.stat(u.ATK), e.boostedStat(u.ATK)), y = Math.max(e.stat(u.SATK), e.boostedStat(u.SATK))) : (g = e.boostedStat(u.ATK), y = e.boostedStat(u.SATK))) : (h ? (f = a.stat(d), S = a.stat(b)) : t.critical ? (f = Math.min(a.stat(d), a.boostedStat(d)), S = Math.min(a.stat(b), a.boostedStat(b))) : (f = a.boostedStat(d), S = a.boostedStat(b)), m ? (g = e.stat(u.ATK), y = e.stat(u.SATK)) : t.critical ? (g = Math.max(e.stat(u.ATK), e.boostedStat(u.ATK)), y = Math.max(e.stat(u.SATK), e.boostedStat(u.SATK))) : (g = e.boostedStat(u.ATK), y = e.boostedStat(u.SATK))); let M = 4096,
        B = 4096; switch ("Thick Fat" !== a.ability.name || n !== p.FIRE && n !== p.ICE || (M = k(2048, M), B = k(2048, B)), e.ability.name) {
        case "Guts":
          a.status && (M = k(6144, M)); break;
        case "Plus":
          e.minus && (B = k(6144, B)); break;
        case "Minus":
          e.plus && (B = k(6144, B)); break;
        case "Defeatist":
          2 * e.currentHp <= e.stat(u.HP) && (M = k(2048, M), B = k(2048, B)); break;
        case "Huge Power":
        case "Pure Power":
          M = k(8192, M); break;
        case "Solar Power":
          r.sun() && (B = k(6144, B)); break;
        case "Hustle":
          g = v(6144, g); break;
        case "Flash Fire":
          e.flashFire && n === p.FIRE && (M = k(6144, M), B = k(6144, B)); break;
        case "Slow Start":
          e.slowStart && (M = k(2048, M)); break;
        default:
          e.pinchAbilityActivated(n) && (M = k(6144, M), B = k(6144, B)) } switch (e.flowerGift && r.sun() && (M = k(6144, M)), e.item.name) {
        case "Deep Sea Tooth":
          "Clamperl" === e.name && (B = k(8192, B)); break;
        case "Soul Dew":
          "Latias" !== e.name && "Latios" !== e.name || (B = k(6144, B)); break;
        case "Choice Band":
          M = k(6144, M); break;
        case "Choice Specs":
          B = k(6144, B); break;
        default:
          e.thickClubBoosted() ? M = k(8192, M) : e.lightBallBoosted() && (M = k(8192, M), B = k(8192, B)) } g = v(M, g), y = v(B, y), r.sand() && a.stab(p.ROCK) && (S = v(6144, S)); let x, D, P = 4096,
        A = 4096; switch ("Marvel Scale" === a.ability.name && a.status && (P = k(6144, P)), a.flowerGift && r.sun() && (A = k(6144, A)), a.item.name) {
        case "Deep Sea Scale":
          "Clamperl" === a.name && (A = k(6144, A)); break;
        case "Metal Powder":
          "Ditto" === a.name && (P = k(8192, P)); break;
        case "Eviolite":
          a.hasEvolution() && (P = k(6144, P), A = k(6144, A)); break;
        case "Soul Dew":
          "Latias" !== a.name && "Latios" !== a.name || (A = k(6144, A)) } if (f = v(P, f), S = v(A, S), t.isPsyshockLike()) x = y, D = f;
      else if (t.isPhysical()) x = g, D = f;
      else { if (!t.isSpecial()) return [0];
        x = y, D = S } let T = Math.trunc(Math.trunc(Math.trunc(2 * e.level / 5 + 2) * o * x / D) / 50);
      T += 2, r.multiBattle && t.hasMultipleTargets() && (T = v(3072, T)), "Weather Ball" !== t.name && (r.sun() ? n === p.FIRE ? T = v(6144, T) : n === p.WATER && (T = v(2048, T)) : r.rain() && (n === p.WATER ? T = v(6144, T) : n === p.FIRE && (T = v(2048, T)))), t.critical && (T = v(8192, T)); let E = w(T, 85, 100);
      e.stab(n) && (E = "Adaptability" === e.ability.name ? v(8192, E) : v(6144, E)), E = E.map(e => Math.trunc(e * s[0] / s[1])), e.isBurned() && t.isPhysical() && "Guts" !== e.ability.name && (E = E.map(e => Math.trunc(e / 2))), E = E.map(e => Math.max(1, e)); let R = 4096; switch (t.critical || "Infiltrator" === e.ability.name || (a.reflect && (t.isPhysical() || t.isPsyshockLike()) && (R = k(r.multiBattle ? 2703 : 2048, R)), a.lightScreen && t.isSpecial() && !t.isPsyshockLike() && (R = k(r.multiBattle ? 2703 : 2048, R))), a.multiscaleIsActive() && (R = k(2048, R)), l && "Tinted Lens" === e.ability.name && (R = k(8192, R)), a.friendGuard && (R = k(3072, R)), "Sniper" === e.ability.name && t.critical && (R = k(6144, R)), c && a.ability.reducesSuperEffective() && (R = k(3072, R)), e.item.name) {
        case "Metronome":
          if (e.metronome <= 4) { const a = 4096 + 819 * e.metronome;
            R = k(a, R) } else R = k(8192, R); break;
        case "Expert Belt":
          c && (R = k(4915, R)); break;
        case "Life Orb":
          R = k(5324, R) } return n !== a.item.berryTypeResist() || !c && n !== p.NORMAL || (R = k(2048, R), a.item.used = !0), (t.dig && t.boostedByDig() || t.dive && t.boostedByDive() || t.minimize && t.boostedByMinimize()) && (R = k(8192, R)), E = v(R, E) },
    Ka = (e, a, t, r) => { const i = Oa(e, a, t, r),
        n = i.moveType,
        o = i.movePower,
        s = i.effectiveness,
        c = i.superEffective,
        l = i.notVeryEffective; if (i.fail || 0 === s[0]) return [0]; const d = r.wonderRoom ? u.SDEF : u.DEF,
        b = r.wonderRoom ? u.DEF : u.SDEF,
        h = "Unaware" === e.ability.name,
        m = "Unaware" === a.ability.name; let g, f, y, S; "Foul Play" === t.name ? (h ? (f = a.stat(d), S = a.stat(b), g = a.stat(u.ATK)) : t.critical ? (f = Math.min(a.stat(d), a.boostedStat(d)), S = Math.min(a.stat(b), a.boostedStat(b)), g = Math.max(a.stat(u.ATK), a.boostedStat(u.ATK))) : (f = a.boostedStat(d), S = a.boostedStat(b), g = a.boostedStat(u.ATK)), y = m ? e.stat(u.SATK) : t.critical ? Math.max(e.stat(u.SATK), e.boostedStat(u.SATK)) : e.boostedStat(u.SATK)) : t.ignoresDefenseBoosts() ? (f = a.stat(d), S = a.stat(b), m ? (g = e.stat(u.ATK), y = e.stat(u.SATK)) : t.critical ? (g = Math.max(e.stat(u.ATK), e.boostedStat(u.ATK)), y = Math.max(e.stat(u.SATK), e.boostedStat(u.SATK))) : (g = e.boostedStat(u.ATK), y = e.boostedStat(u.SATK))) : (h ? (f = a.stat(d), S = a.stat(b)) : t.critical ? (f = Math.min(a.stat(d), a.boostedStat(d)), S = Math.min(a.stat(b), a.boostedStat(b))) : (f = a.boostedStat(d), S = a.boostedStat(b)), m ? (g = e.stat(u.ATK), y = e.stat(u.SATK)) : t.critical ? (g = Math.max(e.stat(u.ATK), e.boostedStat(u.ATK)), y = Math.max(e.stat(u.SATK), e.boostedStat(u.SATK))) : (g = e.boostedStat(u.ATK), y = e.boostedStat(u.SATK))); let M = 4096,
        B = 4096; switch ("Thick Fat" !== a.ability.name || n !== p.FIRE && n !== p.ICE || (M = k(2048, M), B = k(2048, B)), e.ability.name) {
        case "Guts":
          a.status && (M = k(6144, M)); break;
        case "Plus":
          e.minus && (B = k(6144, B)); break;
        case "Minus":
          e.plus && (B = k(6144, B)); break;
        case "Defeatist":
          2 * e.currentHp <= e.stat(u.HP) && (M = k(2048, M), B = k(2048, B)); break;
        case "Huge Power":
        case "Pure Power":
          M = k(8192, M); break;
        case "Solar Power":
          r.sun() && (B = k(6144, B)); break;
        case "Hustle":
          g = v(6144, g); break;
        case "Flash Fire":
          e.flashFire && n === p.FIRE && (M = k(6144, M), B = k(6144, B)); break;
        case "Slow Start":
          e.slowStart && (M = k(2048, M)); break;
        default:
          e.pinchAbilityActivated(n) && (M = k(6144, M), B = k(6144, B)) } switch (e.flowerGift && r.sun() && (M = k(6144, M)), e.item.name) {
        case "Deep Sea Tooth":
          "Clamperl" === e.name && (B = k(8192, B)); break;
        case "Soul Dew":
          "Latias" !== e.name && "Latios" !== e.name || (B = k(6144, B)); break;
        case "Choice Band":
          M = k(6144, M); break;
        case "Choice Specs":
          B = k(6144, B); break;
        default:
          e.thickClubBoosted() ? M = k(8192, M) : e.lightBallBoosted() && (M = k(8192, M), B = k(8192, B)) } g = v(M, g), y = v(B, y), r.sand() && a.stab(p.ROCK) && (S = v(6144, S)); let x, D, P = 4096,
        A = 4096; switch ("Marvel Scale" === a.ability.name && a.status ? P = k(6144, P) : "Grass Pelt" === a.ability.name && r.grassyTerrain() && (P = k(6144, P)), a.flowerGift && r.sun() && (A = k(6144, A)), a.item.name) {
        case "Deep Sea Scale":
          "Clamperl" === a.name && (A = k(6144, A)); break;
        case "Metal Powder":
          "Ditto" === a.name && (P = k(8192, P)); break;
        case "Eviolite":
          a.hasEvolution() && (P = k(6144, P), A = k(6144, A)); break;
        case "Soul Dew":
          "Latias" !== a.name && "Latios" !== a.name || (A = k(6144, A)); break;
        case "Assault Vest":
          A = k(6144, A) } if (f = v(P, f), S = v(A, S), t.isPsyshockLike()) x = y, D = f;
      else if (t.isPhysical()) x = g, D = f;
      else { if (!t.isSpecial()) return [0];
        x = y, D = S } let T = Math.trunc(Math.trunc(Math.trunc(2 * e.level / 5 + 2) * o * x / D) / 50); if (T += 2, r.multiBattle && t.hasMultipleTargets() && (T = v(3072, T)), "Weather Ball" !== t.name) { if (r.harshSun() && n === p.WATER || r.heavyRain() && n === p.FIRE) return [0];
        r.sun() ? n === p.FIRE ? T = v(6144, T) : n === p.WATER && (T = v(2048, T)) : r.rain() && (n === p.WATER ? T = v(6144, T) : n === p.FIRE && (T = v(2048, T))) }(r.grassyTerrain() && n === p.GRASS || r.electricTerrain() && n === p.ELECTRIC || r.psychicTerrain() && n === p.PSYCHIC) && e.isGrounded(r) && (T = v(6144, T)), r.mistyTerrain() && a.isGrounded(r) && n === p.DRAGON && (T = v(2048, T)), t.critical && (T = v(6144, T)); let E = w(T, 85, 100);
      (e.stab(n) || "Protean" === e.ability.name) && (E = "Adaptability" === e.ability.name ? v(8192, E) : v(6144, E)), E = E.map(e => Math.trunc(e * s[0] / s[1])), e.isBurned() && t.isPhysical() && "Guts" !== e.ability.name && "Facade" !== t.name && (E = E.map(e => Math.trunc(e / 2))), E = E.map(e => Math.max(1, e)); let R = 4096; switch (t.critical || "Infiltrator" === e.ability.name || (a.reflect && (t.isPhysical() || t.isPsyshockLike()) && (R = k(r.multiBattle ? 2703 : 2048, R)), a.lightScreen && t.isSpecial() && !t.isPsyshockLike() && (R = k(r.multiBattle ? 2703 : 2048, R))), a.multiscaleIsActive() && (R = k(2048, R)), "Fur Coat" === a.ability.name && (t.isPhysical() || t.isPsyshockLike()) && (R = k(2048, R)), l && "Tinted Lens" === e.ability.name && (R = k(8192, R)), a.friendGuard && (R = k(3072, R)), "Sniper" === e.ability.name && t.critical && (R = k(6144, R)), c && a.ability.reducesSuperEffective() && (R = k(3072, R)), r.grassyTerrain() && t.weakenedByGrassyTerrain() && (R = k(2048, R)), e.item.name) {
        case "Metronome":
          if (e.metronome <= 4) { const a = 4096 + 819 * e.metronome;
            R = k(a, R) } else R = k(8192, R); break;
        case "Expert Belt":
          c && (R = k(4915, R)); break;
        case "Life Orb":
          R = k(5324, R) } return n !== a.item.berryTypeResist() || !c && n !== p.NORMAL || (R = k(2048, R), a.item.used = !0), (t.dig && t.boostedByDig() || t.dive && t.boostedByDive() || t.minimize && t.boostedByMinimize()) && (R = k(8192, R)), E = v(R, E) },
    Wa = (e, a, t, r) => { const i = Oa(e, a, t, r),
        n = i.moveType,
        o = i.movePower,
        s = i.effectiveness,
        c = i.superEffective,
        l = i.notVeryEffective; if (i.fail || 0 === s[0]) return [0]; const d = r.wonderRoom ? u.SDEF : u.DEF,
        b = r.wonderRoom ? u.DEF : u.SDEF,
        h = "Unaware" === e.ability.name,
        m = "Unaware" === a.ability.name; let g, f, y, S; "Foul Play" === t.name ? (h ? (f = a.stat(d), S = a.stat(b), g = a.stat(u.ATK)) : t.critical ? (f = Math.min(a.stat(d), a.boostedStat(d)), S = Math.min(a.stat(b), a.boostedStat(b)), g = Math.max(a.stat(u.ATK), a.boostedStat(u.ATK))) : (f = a.boostedStat(d), S = a.boostedStat(b), g = a.boostedStat(u.ATK)), y = m ? e.stat(u.SATK) : t.critical ? Math.max(e.stat(u.SATK), e.boostedStat(u.SATK)) : e.boostedStat(u.SATK)) : t.ignoresDefenseBoosts() ? (f = a.stat(d), S = a.stat(b), m ? (g = e.stat(u.ATK), y = e.stat(u.SATK)) : t.critical ? (g = Math.max(e.stat(u.ATK), e.boostedStat(u.ATK)), y = Math.max(e.stat(u.SATK), e.boostedStat(u.SATK))) : (g = e.boostedStat(u.ATK), y = e.boostedStat(u.SATK))) : (h ? (f = a.stat(d), S = a.stat(b)) : t.critical ? (f = Math.min(a.stat(d), a.boostedStat(d)), S = Math.min(a.stat(b), a.boostedStat(b))) : (f = a.boostedStat(d), S = a.boostedStat(b)), m ? (g = e.stat(u.ATK), y = e.stat(u.SATK)) : t.critical ? (g = Math.max(e.stat(u.ATK), e.boostedStat(u.ATK)), y = Math.max(e.stat(u.SATK), e.boostedStat(u.SATK))) : (g = e.boostedStat(u.ATK), y = e.boostedStat(u.SATK))); let M = 4096,
        B = 4096; switch ("Thick Fat" !== a.ability.name || n !== p.FIRE && n !== p.ICE || (M = k(2048, M), B = k(2048, B)), e.ability.name) {
        case "Guts":
          a.status && (M = k(6144, M)); break;
        case "Plus":
          e.minus && (B = k(6144, B)); break;
        case "Minus":
          e.plus && (B = k(6144, B)); break;
        case "Defeatist":
          2 * e.currentHp <= e.stat(u.HP) && (M = k(2048, M), B = k(2048, B)); break;
        case "Huge Power":
        case "Pure Power":
          M = k(8192, M); break;
        case "Solar Power":
          r.sun() && (B = k(6144, B)); break;
        case "Hustle":
          g = v(6144, g); break;
        case "Flash Fire":
          e.flashFire && n === p.FIRE && (M = k(6144, M), B = k(6144, B)); break;
        case "Slow Start":
          e.slowStart && (M = k(2048, M)); break;
        default:
          e.pinchAbilityActivated(n) && (M = k(6144, M), B = k(6144, B)) } switch (e.flowerGift && r.sun() && (M = k(6144, M)), e.battery && (B = k(5325, B)), e.item.name) {
        case "Deep Sea Tooth":
          "Clamperl" === e.name && (B = k(8192, B)); break;
        case "Choice Band":
          M = k(6144, M); break;
        case "Choice Specs":
          B = k(6144, B); break;
        default:
          e.thickClubBoosted() ? M = k(8192, M) : e.lightBallBoosted() && (M = k(8192, M), B = k(8192, B)) } g = v(M, g), y = v(B, y), r.sand() && a.stab(p.ROCK) && (S = v(6144, S)); let x, D, P = 4096,
        A = 4096; switch ("Marvel Scale" === a.ability.name && a.status ? P = k(6144, P) : "Grass Pelt" === a.ability.name && r.grassyTerrain() && (P = k(6144, P)), a.flowerGift && r.sun() && (A = k(6144, A)), a.item.name) {
        case "Deep Sea Scale":
          "Clamperl" === a.name && (A = k(6144, A)); break;
        case "Metal Powder":
          "Ditto" === a.name && (P = k(8192, P)); break;
        case "Eviolite":
          a.hasEvolution() && (P = k(6144, P), A = k(6144, A)); break;
        case "Assault Vest":
          A = k(6144, A) } if (f = v(P, f), S = v(A, S), t.usesMaxAttackingStat()) x = Math.max(g, y), D = S;
      else if (t.isPsyshockLike()) x = y, D = f;
      else if (t.isPhysical()) x = g, D = f;
      else { if (!t.isSpecial()) return [0];
        x = y, D = S } let T = Math.trunc(Math.trunc(Math.trunc(2 * e.level / 5 + 2) * o * x / D) / 50); if (T += 2, r.multiBattle && t.hasMultipleTargets() && (T = v(3072, T)), "Weather Ball" !== t.name) { if (r.harshSun() && n === p.WATER || r.heavyRain() && n === p.FIRE) return [0];
        r.sun() ? n === p.FIRE ? T = v(6144, T) : n === p.WATER && (T = v(2048, T)) : r.rain() && (n === p.WATER ? T = v(6144, T) : n === p.FIRE && (T = v(2048, T))) }(r.grassyTerrain() && n === p.GRASS || r.electricTerrain() && n === p.ELECTRIC || r.psychicTerrain() && n === p.PSYCHIC) && e.isGrounded(r) && (T = v(6144, T)), r.mistyTerrain() && a.isGrounded(r) && n === p.DRAGON && (T = v(2048, T)), t.critical && (T = v(6144, T)); let E = w(T, 85, 100);
      (e.stab(n) || "Protean" === e.ability.name) && (E = "Adaptability" === e.ability.name ? v(8192, E) : v(6144, E)), E = E.map(e => Math.trunc(e * s[0] / s[1])), e.isBurned() && t.isPhysical() && "Guts" !== e.ability.name && "Facade" !== t.name && (E = E.map(e => Math.trunc(e / 2))), E = E.map(e => Math.max(1, e)); let R = 4096; switch (t.critical || "Infiltrator" === e.ability.name || (a.reflect && (t.isPhysical() || t.isPsyshockLike()) && (R = k(r.multiBattle ? 2703 : 2048, R)), a.lightScreen && t.isSpecial() && !t.isPsyshockLike() && (R = k(r.multiBattle ? 2703 : 2048, R))), a.multiscaleIsActive() && (R = k(2048, R)), "Fur Coat" === a.ability.name && (t.isPhysical() || t.isPsyshockLike()) && (R = k(2048, R)), l && "Tinted Lens" === e.ability.name && (R = k(8192, R)), a.friendGuard && (R = k(3072, R)), a.auroraVeil && (R = k(r.multiBattle ? 2730 : 2048, R)), "Sniper" === e.ability.name && t.critical && (R = k(6144, R)), c && a.ability.reducesSuperEffective() && (R = k(3072, R)), r.grassyTerrain() && t.weakenedByGrassyTerrain() && (R = k(2048, R)), e.item.name) {
        case "Metronome":
          if (e.metronome <= 4) { const a = 4096 + 819 * e.metronome;
            R = k(a, R) } else R = k(8192, R); break;
        case "Expert Belt":
          c && (R = k(4915, R)); break;
        case "Life Orb":
          R = k(5324, R) } return a.item.berryTypeResist() !== n || !c && n !== p.NORMAL || (R = k(2048, R), a.item.used = !0), (t.dig && t.boostedByDig() || t.dive && t.boostedByDive() || t.minimize && t.boostedByMinimize()) && (R = k(8192, R)), E = v(R, E) }; const Ua = Ha(e => new s(e), (e, a, t, r) => { const i = r.gen,
      n = a.stat(u.HP),
      o = e.level; switch (t.name) {
      case "Seismic Toss":
      case "Night Shade":
        return [e.level];
      case "Dragon Rage":
        return [40];
      case "Sonic Boom":
        return [20];
      case "Psywave":
        if (i <= c.GSC) { const e = []; for (let a = 1; a < Math.trunc(3 * o / 2); a++) e.push(a); return e } { const e = []; for (let a = 50; a <= 150; a += i <= c.HGSS ? 10 : 1) e.push(Math.max(1, Math.trunc(o * a / 100))); return e }
      case "Super Fang":
      case "Nature's Madness":
        return [Math.max(1, Math.trunc(a.currentHp / 2))];
      case "Guardian of Alola":
        return [Math.max(1, Math.trunc(3 * a.currentHp / 4))];
      case "Endeavor":
        return [Math.max(0, a.currentHp - e.currentHp)];
      case "Final Gambit":
        return [e.currentHp];
      default:
        if (t.isOther() || t.isSound() && "Soundproof" === a.ability.name || t.isBall() && "Bulletproof" === a.ability.name || t.isExplosion() && "Damp" === a.ability.name) return [0]; if (t.isOhko()) return [n] } let s = [void 0, ja, Ia, La, _a, Na, Ka, Wa][r.gen](e, a, t, r); return "Sturdy" === a.ability.name && a.currentHp === n && (s = s.map(e => Math.min(n - 1, e))), s });

  function Va(e, a, t, r) { let i; if ("Triple Kick" === t.name) { i = new s([0]); for (let n = 1; n <= 3; n++) t.tripleKickCount = n, i = i.permute(Ua(e, a, t, r)), a.brokenMultiscale = !0;
      t.tripleKickCount = 1 } else if ("Beat Up" === t.name) { i = new s([0]); for (let n = 0; n < e.beatUpStats.length; n++) t.beatUpHit = n, i = i.permute(Ua(e, a, t, r)), a.brokenMultiscale = !0;
      t.beatUpHit = 0 } else if ("Present" === t.name) { const n = new s([-Math.max(1, Math.floor(a.stat(u.HP) / 4))]); if (-1 === t.present) { const o = [n]; for (let i = 1; i <= 3; i++) t.present = i, o.push(Ua(e, a, t, r));
        t.present = -1, i = s.weightedUnion(o, r.gen >= c.ADV ? [2, 4, 3, 1] : [52, 102, 76, 26]) } else i = 0 === t.present ? n : Ua(e, a, t, r) } else if ("Parental Bond" !== e.ability.name || 1 !== t.maxHits() || !t.affectedByParentalBond() || r.multiBattle && t.hasMultipleTargets())
      if (t.maxHits() > 1) { const n = [new s([0])]; for (let i = 1; i <= t.maxHits(); i++) r.gen >= c.GSC ? n.push(n[i - 1].permute(Ua(e, a, t, r))) : n.push(Ua(e, a, t, r).map(e => e * i)), a.brokenMultiscale = !0; if (t.numberOfHits >= 1) i = n[t.numberOfHits];
        else if (2 === t.maxHits()) i = n[2];
        else { const e = r.gen >= c.B2W2 ? [0, 0, 2, 2, 1, 1] : [0, 0, 3, 3, 1, 1];
          i = s.weightedUnion(n.slice(t.minHits(), t.maxHits()), e.slice(t.minHits(), t.maxHits())) } } else i = Ua(e, a, t, r), a.brokenMultiscale = !0;
    else i = Ua(e, a, t, r), t.secondHit = !0, a.brokenMultiscale = !0, i = i.permute(Ua(e, a, t, r)), t.secondHit = !1; return "Knock Off" === t.name && a.knockOff() && (a.item.used = !0), i.size.leq(39) ? i : i.simplify() } var qa = (e, a, t, r) => { const i = []; if ("(No Move)" === t.name) i.push(new s([0])), i.push(0);
      else if ("Fury Cutter" === t.name) { const n = t.furyCutter; for (; t.furyCutter <= 5;) i.push(Va(e, a, t, r)), t.furyCutter++;
        t.furyCutter = n, i.push(-1) } else if ("Echoed Voice" === t.name) { const n = t.echoedVoice; for (; t.echoedVoice <= 4;) i.push(Va(e, a, t, r)), t.echoedVoice++;
        t.echoedVoice = n, i.push(-1) } else if ("Trump Card" === t.name) { const n = t.trumpPP; for (i.push(Va(e, a, t, r)); t.trumpPP > 0;) "Pressure" === a.ability.name ? t.trumpPP -= Math.min(2, t.trumpPP) : t.trumpPP--, i.push(Va(e, a, t, r));
        t.trumpPP = n, i.push(0) } else if ("Explosion" === t.name || "Self-Destruct" === t.name) i.push(Va(e, a, t, r)), i.push(0);
      else if ("Rollout" === t.name || "Ice Ball" === t.name) { const n = t.rollout; for (let n = 0; n < 5; n++) i.push(Va(e, a, t, r)), t.rollout++;
        i.push(-i.length), t.rollout = n } else i.push(Va(e, a, t, r)), i.push(Va(e, a, t, r)), i.push(-1); return a.brokenMultiscale = !1, i },
    Za = (e, a, t) => [void 0, (e, a) => { const t = [],
        r = [],
        i = a.stat(u.HP); return a.isBurned() ? (t.push(-Math.max(1, Math.trunc(i / 16))), r.push("Burn")) : a.isPoisoned() ? (t.push(-Math.max(1, Math.trunc(i / 16))), r.push("Poison")) : a.isBadlyPoisoned() && (t.push("toxic"), r.push("Toxic")), { values: t, messages: r } }, (e, a, t) => { const r = [],
        i = [],
        n = a.stat(u.HP); return a.isBurned() ? (r.push(-Math.max(1, Math.trunc(n / 8))), i.push("Burn")) : a.isPoisoned() ? (r.push(-Math.max(1, Math.trunc(n / 8))), i.push("Poison")) : a.isBadlyPoisoned() && (r.push("toxic"), i.push("Toxic")), t.sand() && a.hurtBySandstorm() && (r.push(-Math.max(1, Math.trunc(n / 8))), i.push("Sandstorm")), "Leftovers" === a.item.name && (r.push(Math.max(1, Math.trunc(n / 16))), i.push("Leftovers")), { values: r, messages: i } }, (e, a, t) => { const r = [],
        i = [],
        n = a.stat(u.HP); return t.sand() && a.hurtBySandstorm() ? (r.push(-Math.max(1, Math.trunc(n / 16))), i.push("Sandstorm")) : t.hail() && a.hurtByHail() && (r.push(-Math.max(1, Math.trunc(n / 16))), i.push("Hail")), "Leftovers" === a.item.name && (r.push(Math.max(1, Math.trunc(n / 16))), i.push("Leftovers")), a.isBurned() ? (r.push(-Math.max(1, Math.trunc(n / 8))), i.push("Burn")) : a.isPoisoned() ? (r.push(-Math.max(1, Math.trunc(n / 8))), i.push("Poison")) : a.isBadlyPoisoned() && (r.push("toxic"), i.push("Toxic")), { values: r, messages: i } }, (e, a, t) => { const r = [],
        i = [],
        n = a.stat(u.HP); if (t.sand() && a.hurtBySandstorm() ? (r.push(-Math.max(1, Math.trunc(n / 16))), i.push("Sandstorm")) : t.hail() && a.hurtByHail() && (r.push(-Math.max(1, Math.trunc(n / 16))), i.push("Hail")), "Dry Skin" === a.ability.name ? t.sun() ? (r.push(-Math.max(1, Math.trunc(n / 8))), i.push("Dry Skin")) : t.rain() && (r.push(Math.max(1, Math.trunc(n / 8))), i.push("Dry Skin")) : t.rain() && "Rain Dish" === a.ability.name ? (r.push(Math.max(1, Math.trunc(n / 16))), i.push("Rain Dish")) : t.hail() && "Ice Body" === a.ability.name && (r.push(Math.max(1, Math.trunc(n / 16))), i.push("Ice Body")), "Leftovers" === a.item.name ? (r.push(Math.max(1, Math.trunc(n / 16))), i.push("Leftovers")) : "Black Sludge" === a.item.name && (a.stab(p.POISON) ? r.push(Math.max(1, Math.trunc(n / 16))) : r.push(-Math.max(1, Math.trunc(n / 16))), i.push("Black Sludge")), a.isBurned() ? (r.push(-Math.max(1, Math.trunc(n / 8))), i.push("Burn")) : a.isPoisoned() ? (r.push(-Math.max(1, Math.trunc(n / 8))), i.push("Poison")) : a.isBadlyPoisoned() && (r.push("toxic"), i.push("Toxic")), a.isAsleep() && "Bad Dreams" === e.ability.name && (r.push(-Math.max(1, Math.trunc(n / 8))), i.push("Bad Dreams")), "Sticky Barb" === a.item.name && (r.push(-Math.max(1, Math.trunc(n / 8))), i.push("Sticky Barb")), "Magic Guard" === a.ability.name)
        for (let e = 1; e < r.length; e++) r[e] < 0 && (r.splice(e, 1), i.splice(e, 1)); return { values: r, messages: i } }, (e, a, t) => { const r = [],
        i = [],
        n = a.stat(u.HP); if (t.sand() && a.hurtBySandstorm() ? (r.push(-Math.max(1, Math.trunc(n / 16))), i.push("Sandstorm")) : t.hail() && a.hurtByHail() && (r.push(-Math.max(1, Math.trunc(n / 16))), i.push("Hail")), "Dry Skin" === a.ability.name ? t.sun() ? (r.push(-Math.max(1, Math.trunc(n / 8))), i.push("Dry Skin")) : t.rain() && (r.push(Math.max(1, Math.trunc(n / 8))), i.push("Dry Skin")) : t.rain() && "Rain Dish" === a.ability.name ? (r.push(Math.max(1, Math.trunc(n / 16))), i.push("Rain Dish")) : t.hail() && "Ice Body" === a.ability.name && (r.push(Math.max(1, Math.trunc(n / 16))), i.push("Ice Body")), "Leftovers" === a.item.name ? (r.push(Math.max(1, Math.trunc(n / 16))), i.push("Leftovers")) : "Black Sludge" === a.item.name && (a.stab(p.POISON) ? r.push(Math.max(1, Math.trunc(n / 16))) : r.push(-Math.max(1, Math.trunc(n / 16))), i.push("Black Sludge")), "Heatproof" === a.ability.nonDisabledName() && a.isBurned() ? (r.push(-Math.max(1, Math.trunc(n / 16))), i.push("Burn")) : a.isBurned() ? (r.push(-Math.max(1, Math.trunc(n / 8))), i.push("Burn")) : a.isPoisoned() ? (r.push(-Math.max(1, Math.trunc(n / 8))), i.push("Poison")) : a.isBadlyPoisoned() && (r.push("toxic"), i.push("Toxic")), a.isAsleep() && "Bad Dreams" === e.ability.name && (r.push(-Math.max(1, Math.trunc(n / 8))), i.push("Bad Dreams")), "Sticky Barb" === a.item.name && (r.push(-Math.max(1, Math.trunc(n / 8))), i.push("Sticky Barb")), "Magic Guard" === a.ability.name)
        for (let e = 1; e < r.length; e++) r[e] < 0 && (r.splice(e, 1), i.splice(e, 1)); return { values: r, messages: i } }, (e, a, t) => { const r = [],
        i = [],
        n = a.stat(u.HP); if (t.sand() && a.hurtBySandstorm() ? (r.push(-Math.max(1, Math.trunc(n / 16))), i.push("Sandstorm")) : t.hail() && a.hurtByHail() && (r.push(-Math.max(1, Math.trunc(n / 16))), i.push("Hail")), "Dry Skin" === a.ability.name ? t.sun() ? (r.push(-Math.max(1, Math.trunc(n / 8))), i.push("Dry Skin")) : t.rain() && (r.push(Math.max(1, Math.trunc(n / 8))), i.push("Dry Skin")) : t.rain() && "Rain Dish" === a.ability.name ? (r.push(Math.max(1, Math.trunc(n / 16))), i.push("Rain Dish")) : t.hail() && "Ice Body" === a.ability.name && (r.push(Math.max(1, Math.trunc(n / 16))), i.push("Ice Body")), "Leftovers" === a.item.name ? (r.push(Math.max(1, Math.trunc(n / 16))), i.push("Leftovers")) : "Black Sludge" === a.item.name && (a.stab(p.POISON) ? r.push(Math.max(1, Math.trunc(n / 16))) : r.push(-Math.max(1, Math.trunc(n / 16))), i.push("Black Sludge")), "Heatproof" === a.ability.nonDisabledName() && a.isBurned() ? (r.push(-Math.max(1, Math.trunc(n / 16))), i.push("Burn")) : a.isBurned() ? (r.push(-Math.max(1, Math.trunc(n / 8))), i.push("Burn")) : a.isPoisoned() ? (r.push(-Math.max(1, Math.trunc(n / 8))), i.push("Poison")) : a.isBadlyPoisoned() && (r.push("toxic"), i.push("Toxic")), a.isAsleep() && "Bad Dreams" === e.ability.name && (r.push(-Math.max(1, Math.trunc(n / 8))), i.push("Bad Dreams")), "Sticky Barb" === a.item.name && (r.push(-Math.max(1, Math.trunc(n / 8))), i.push("Sticky Barb")), "Magic Guard" === a.ability.name)
        for (let e = 1; e < r.length; e++) r[e] < 0 && (r.splice(e, 1), i.splice(e, 1)); return { values: r, messages: i } }, (e, a, t) => { const r = [],
        i = [],
        n = a.stat(u.HP); if (t.sand() && a.hurtBySandstorm() ? (r.push(-Math.max(1, Math.trunc(n / 16))), i.push("Sandstorm")) : t.hail() && a.hurtByHail() && (r.push(-Math.max(1, Math.trunc(n / 16))), i.push("Hail")), "Dry Skin" === a.ability.name ? t.sun() ? (r.push(-Math.max(1, Math.trunc(n / 8))), i.push("Dry Skin")) : t.rain() && (r.push(Math.max(1, Math.trunc(n / 8))), i.push("Dry Skin")) : t.rain() && "Rain Dish" === a.ability.name ? (r.push(Math.max(1, Math.trunc(n / 16))), i.push("Rain Dish")) : t.hail() && "Ice Body" === a.ability.name && (r.push(Math.max(1, Math.trunc(n / 16))), i.push("Ice Body")), "Leftovers" === a.item.name ? (r.push(Math.max(1, Math.trunc(n / 16))), i.push("Leftovers")) : "Black Sludge" === a.item.name && (a.stab(p.POISON) ? r.push(Math.max(1, Math.trunc(n / 16))) : r.push(-Math.max(1, Math.trunc(n / 16))), i.push("Black Sludge")), t.grassyTerrain() && a.isGrounded(t) && (r.push(Math.max(1, Math.trunc(n / 16))), i.push("Grassy Terrain")), "Heatproof" === a.ability.nonDisabledName() && a.isBurned() ? (r.push(-Math.max(1, Math.trunc(n / 32))), i.push("Burn")) : a.isBurned() ? (r.push(-Math.max(1, Math.trunc(n / 16))), i.push("Burn")) : a.isPoisoned() ? (r.push(-Math.max(1, Math.trunc(n / 8))), i.push("Poison")) : a.isBadlyPoisoned() && (r.push("toxic"), i.push("Toxic")), a.isAsleep() && "Bad Dreams" === e.ability.name && (r.push(-Math.max(1, Math.trunc(n / 8))), i.push("Bad Dreams")), "Sticky Barb" === a.item.name && (r.push(-Math.max(1, Math.trunc(n / 8))), i.push("Sticky Barb")), "Magic Guard" === a.ability.name)
        for (let e = 1; e < r.length; e++) r[e] < 0 && (r.splice(e, 1), i.splice(e, 1)); return { values: r, messages: i } }][t.gen](e, a, t);

  function Ya(e, a) { return function(e) { if (Array.isArray(e)) return e }(e) || function(e, a) { var t = [],
        r = !0,
        i = !1,
        n = void 0; try { for (var o, s = e[Symbol.iterator](); !(r = (o = s.next()).done) && (t.push(o.value), !a || t.length !== a); r = !0); } catch (e) { i = !0, n = e } finally { try { r || null == s.return || s.return() } finally { if (i) throw n } } return t }(e, a) || function() { throw new TypeError("Invalid attempt to destructure non-iterable instance") }() }

  function $a(e, a, t) { return a in e ? Object.defineProperty(e, a, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[a] = t, e } const Ja = {
      [m.HAIL]: "in Hail", [m.RAIN]: "in Rain", [m.SAND]: "in Sand", [m.SUN]: "in Sun", [m.HEAVY_RAIN]: "in Heavy Rain", [m.HARSH_SUN]: "in Harsh Sun", [m.STRONG_WINDS]: "in Strong Winds" },
    Qa = {
      [h.POISONED]: "poisoned", [h.BADLY_POISONED]: "badly poisoned", [h.BURNED]: "burned", [h.PARALYZED]: "paralyzed", [h.ASLEEP]: "asleep", [h.FROZEN]: "frozen" };

  function Xa(e, a, t, r) { e = new Ca(e), a = new Ca(a), t = new ya(function(e) { for (var a = 1; a < arguments.length; a++) { var t = null != arguments[a] ? arguments[a] : {},
          r = Object.keys(t); "function" == typeof Object.getOwnPropertySymbols && (r = r.concat(Object.getOwnPropertySymbols(t).filter(function(e) { return Object.getOwnPropertyDescriptor(t, e).enumerable }))), r.forEach(function(a) { $a(e, a, t[a]) }) } return e }({}, t, { user: e, target: a })), r = new ka(r); const i = [],
      n = [],
      o = []; if ("(No Pokemon)" === e.name || "(No Pokemon)" === a.name) throw new za; if ("(No Move)" === t.name) throw new Fa;
    (r.magicRoom || "Klutz" === e.ability.name || "Unnerve" === a.ability.name && e.item.isBerry()) && (e.item.disabled = !0), (r.magicRoom || "Klutz" === a.ability.name || "Unnerve" === e.ability.name && a.item.isBerry()) && (a.item.disabled = !0), "Air Lock" !== e.ability.name && "Air Lock" !== a.ability.name || (r.airLock = !0), "Fairy Aura" !== e.ability.name && "Fairy Aura" !== a.ability.name || (r.fairyAura = !0), "Dark Aura" !== e.ability.name && "Dark Aura" !== a.ability.name || (r.darkAura = !0), "Aura Break" !== e.ability.name && "Aura Break" !== a.ability.name || (r.auraBreak = !0); const l = Za(e, a, r);
    l.messages.unshift(""), l.values.unshift(0), (e.ability.ignoresAbilities() || t.ignoresAbilities()) && a.ability.isIgnorable() && (a.ability.disabled = !1), a.hasCritArmor() || !t.canCrit() ? t.critical = !1 : "Merciless" === e.ability.name && (a.isPoisoned() || a.isBadlyPoisoned()) && (t.critical = !0); const d = qa(e, a, t, r); "Smack Down" !== t.name && "Thousand Arrows" !== t.name || (a.grounded = !0), e.item.disabled = !1, e.item.used = !1, a.item.disabled = !1, a.item.used = !1, a.ability.disabled = !1; const b = a.stat(u.HP),
      h = Math.round(d[0].min() / b * 1e3) / 10,
      m = Math.round(d[0].max() / b * 1e3) / 10,
      g = e => Math.max(0, b - e); let f, y, k, v, w = a.currentHpRange.map(g),
      S = a.currentHpRangeBerry.map(g); if ("Hidden Power" === t.name ? (f = ya.hiddenPowerType(e.ivs, r.gen), y = ya.hiddenPowerBp(e.ivs, r.gen)) : "Weather Ball" === t.name ? (f = ya.weatherBall(r.effectiveWeather()), y = r.gen >= c.HGSS && f ? 100 : 50) : t.zMove ? (f = t.type(), y = t.power()) : (f = t.type(), y = null), t.isPsyshockLike() ? (k = u.SATK, v = u.DEF) : r.gen >= c.HGSS && t.isPhysical() || r.gen < c.HGSS && ra(f) ? (k = u.ATK, v = u.DEF) : (k = u.SATK, v = u.SDEF), e.boosts[k] && i.push((e.boosts[k] > 0 ? "+" : "") + e.boosts[k]), r.gen >= c.ADV || e.evs[k] < 252) { const a = r.gen >= c.ADV ? _(e.nature, k) : 0;
      a ? i.push(e.evs[k] + (a > 0 ? "+" : "-")) : i.push(e.evs[k]), i.push(k === u.ATK ? "Atk" : "SpA") } if (r.gen >= c.GSC && !e.isItemRequired() && i.push(e.item.name), r.gen >= c.ADV && "(No Ability)" !== e.ability.name && i.push(e.ability.name), i.push(e.name), e.isHealthy() || i.push(`(${Qa[e.status]})`), t.critical && i.push("critical hit"), e.helpingHand && i.push("Helping Hand"), i.push(t.name), t.zMove || "Hidden Power" === t.name && r.gen <= c.B2W2) i.push(`[${y} BP]`);
    else if (t.hitsMultipleTimes() && t.numberOfHits >= 1) { const e = t.numberOfHits;
      i.push(e > 1 ? `[${e} hits]` : `[${e} hit]`) } if (i.push("vs."), a.boosts[v] && i.push((a.boosts[v] > 0 ? "+" : "") + a.boosts[v]), r.gen >= c.ADV || a.evs[v] < 252 || a.evs[u.HP] < 252) { i.push(a.evs[u.HP], "HP /"); const e = r.gen >= c.ADV ? _(a.nature, v) : 0;
      e ? i.push(a.evs[v] + (e > 0 ? "+" : "-")) : i.push(a.evs[v]), i.push(v === u.DEF ? "Def" : "SpD") } r.gen >= c.GSC && !a.isItemRequired() && i.push(a.item.name), r.gen >= c.ADV && "(No Ability)" !== a.ability.name && i.push(a.ability.name), i.push(a.name), a.isHealthy() || i.push(`(${Qa[a.status]})`); const M = Math.floor(100 * a.currentHp / a.stat(u.HP)); if (M < 100 && i.push(`at ${M}%`), a.reflect && v === u.DEF ? i.push("behind Reflect") : a.lightScreen && v === u.SDEF && i.push("behind Light Screen"), Ja[r.weather] && i.push(Ja[r.weather]), d[0].min() === d[0].max() ? n.push(String(d[0].min()), `(${h}%)`) : n.push(`${d[0].min()} - ${d[0].max()}`, `(${h} - ${m}%)`), "Magic Guard" !== a.ability.name) { let e = 0; if (a.stealthRock) { const t = Ya(da(p.ROCK, a.types(), { gen: r.gen }), 2),
          i = t[0],
          n = t[1];
        e += Math.trunc(b * i / (8 * n)) } a.spikes > 0 && a.isGrounded(r) && (e += Math.trunc(b / (10 - 2 * a.spikes))), w = w.map(a => Math.min(b, a + e)), S = S.map(a => Math.min(b, a + e)) } const B = function(e, a, t) { var r, i, n, o, c, l; const d = [],
        b = e.stat(u.HP),
        h = e.item.berryHeal(b),
        p = e.item.berryHealThreshold(b),
        m = null != (r = t.maxTurns) ? r : 9,
        g = null != (i = t.rechargeTurns) ? i : 0,
        f = null != (n = t.effects) ? n : [0]; let y, k, v = new s(null != (o = t.initDmgRange) ? o : [0]),
        w = new s(null != (c = t.initDmgRangeBerry) ? c : []),
        S = null != (l = t.toxicCounter) ? l : 0; const M = e => e >= b,
        B = e => b - e,
        x = (e, a) => e >= b ? e : e + a; for (let e = 0, t = 0; e < m; e++, t++) { if ("number" == typeof a[t]) { if (0 === a[t]) break;
          t += a[t] } v = v.permute(a[t], x).simplify(), w = w.permute(a[t], x).simplify(); for (let e = 0; e <= g; e++) w = w.map(et.bind({ effects: f, toxicCounter: S, totalHp: b })), v = v.map(at.bind({ effects: f, toxicCounter: S, totalHp: b, berryHeal: h, berryHealThreshold: p, berryDmg: w })), S++; if (d.push([v.count(M).add(w.count(M)), v.size.add(w.size)]), 0 === e && (y = v.map(B), k = w.map(B)), d[d.length - 1][0] === d[d.length - 1][1]) break } return { fractionalChances: d, roundedChances: d.map(e => { let a = Ya(e, 2),
            t = a[0],
            r = a[1]; return t.multiply(1e6).divide(r) / 1e6 }), remainingHealth: y, remainingHealthBerry: k } }(a, d, { initDmgRange: w, initDmgRangeBerry: S, effects: l.values, rechargeTurns: Number(t.requiresRecharge()), toxicCounter: a.toxicCounter });
    l.messages = l.messages.slice(1), l.values = l.values.slice(1); const x = []; for (let e = 0; e < B.roundedChances.length; e++) { const a = `${e?e+1:"O"}HKO`,
        t = B.fractionalChances[e]; if (t[0].eq(t[1])) { 0 === x.length && x.push(`guaranteed ${a}`); break } if (!t[0].isZero()) { const t = Math.round(1e3 * B.roundedChances[e]) / 10;
        100 === t ? x.push(`almost guaranteed ${a}`) : 0 === t ? x.push(`negligible chance to ${a}`) : x.push(`${t}% chance to ${a}`) } } return x.length > 0 ? (o.push(x.join(", ")), l.messages.length > 0 && o.push("after", l.messages.join(", "))) : o.push("this might take a while..."), a.currentHpRange = B.remainingHealth, a.currentHpRangeBerry = B.remainingHealthBerry, { summary: `${i.join(" ")}: ${n.join(" ")} -- ${o.join(" ")}`, attacker: e, defender: a, move: t, field: r, minPercent: h, maxPercent: m, damages: d.slice(0, d.length - 1), damage: d[0], effectValues: l.values, effectMessages: l.messages, fractionalChances: B.fractionalChances, roundedChances: B.roundedChances } }

  function et(e) { for (let a = 0; a < this.effects.length && e < this.totalHp; a++) "toxic" === this.effects[a] ? e += Math.trunc((this.toxicCounter + 1) * this.totalHp / 16) : e = Math.max(0, e - this.effects[a]); return Math.min(this.totalHp, e) }

  function at(e, a, t) { let r = !1; for (let a = 0; a < this.effects.length && e < this.totalHp; a++) "toxic" === this.effects[a] ? e += Math.trunc((this.toxicCounter + 1) * this.totalHp / 16) : e = Math.max(0, e - this.effects[a]), !r && this.berryHeal > 0 && e < this.totalHp && this.totalHp - e < this.berryHealThreshold && (e = Math.max(0, e - this.berryHeal), r = !0); return e = Math.min(this.totalHp, e), r && (this.berryDmg.add(e, a), t()), e } t.d(a, "sulcalc", function() { return Xa }), t.d(a, "Multiset", function() { return s }), t.d(a, "Pokemon", function() { return Ca }), t.d(a, "Ability", function() { return ba }), t.d(a, "Item", function() { return pa }), t.d(a, "Move", function() { return ya }), t.d(a, "Field", function() { return ka }), t.d(a, "info", function() { return r }), t.d(a, "NoPokemonError", function() { return za }), t.d(a, "NoMoveError", function() { return Fa }), t.d(a, "Gens", function() { return c }), t.d(a, "maxGen", function() { return l }), t.d(a, "Stats", function() { return u }), t.d(a, "Genders", function() { return d }), t.d(a, "DamageClasses", function() { return b }), t.d(a, "Statuses", function() { return h }), t.d(a, "Types", function() { return p }), t.d(a, "Weathers", function() { return m }), t.d(a, "Natures", function() { return g }), t.d(a, "Terrains", function() { return f }), t.d(a, "roundHalfToZero", function() { return y }), t.d(a, "chainMod", function() { return k }), t.d(a, "applyMod", function() { return v }), t.d(a, "damageVariation", function() { return w }), t.d(a, "needsScaling", function() { return S }), t.d(a, "scaleStat", function() { return M }) }]);
//# sourceMappingURL=sulcalc.js.map
